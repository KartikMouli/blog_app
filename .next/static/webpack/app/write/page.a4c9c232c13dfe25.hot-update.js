/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/write/page",{

/***/ "(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js":
/*!*********************************************************!*\
  !*** ./node_modules/eventemitter2/lib/eventemitter2.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (true) {\n     // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return EventEmitter;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIyL2xpYi9ldmVudGVtaXR0ZXIyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IscURBQXFELFlBQVk7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLG1EQUFtRCxzQkFBc0I7QUFDekU7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFdBQVc7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsdUNBQXVDO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLE9BQU87QUFDN0Isd0NBQXdDLE9BQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLE9BQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsT0FBTzs7QUFFN0I7QUFDQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0Qzs7QUFFQSxzQkFBc0Isb0JBQW9CO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrREFBa0QsWUFBWTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTSxJQUEwQztBQUNoRDtBQUNBLElBQUksbUNBQU87QUFDWDtBQUNBLEtBQUs7QUFBQSxrR0FBQztBQUNOLElBQUksS0FBSyxFQU9OO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMi9saWIvZXZlbnRlbWl0dGVyMi5qcz8xZWJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRXZlbnRFbWl0dGVyMlxuICogaHR0cHM6Ly9naXRodWIuY29tL2hpajFueC9FdmVudEVtaXR0ZXIyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzIGhpajFueFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG47IWZ1bmN0aW9uKHVuZGVmaW5lZCkge1xuXG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSA/IEFycmF5LmlzQXJyYXkgOiBmdW5jdGlvbiBfaXNBcnJheShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgfTtcbiAgdmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGlmICh0aGlzLl9jb25mKSB7XG4gICAgICBjb25maWd1cmUuY2FsbCh0aGlzLCB0aGlzLl9jb25mKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmUoY29uZikge1xuICAgIGlmIChjb25mKSB7XG5cbiAgICAgIHRoaXMuX2NvbmYgPSBjb25mO1xuXG4gICAgICBjb25mLmRlbGltaXRlciAmJiAodGhpcy5kZWxpbWl0ZXIgPSBjb25mLmRlbGltaXRlcik7XG4gICAgICBjb25mLm1heExpc3RlbmVycyAmJiAodGhpcy5fZXZlbnRzLm1heExpc3RlbmVycyA9IGNvbmYubWF4TGlzdGVuZXJzKTtcbiAgICAgIGNvbmYud2lsZGNhcmQgJiYgKHRoaXMud2lsZGNhcmQgPSBjb25mLndpbGRjYXJkKTtcbiAgICAgIGNvbmYubmV3TGlzdGVuZXIgJiYgKHRoaXMubmV3TGlzdGVuZXIgPSBjb25mLm5ld0xpc3RlbmVyKTtcblxuICAgICAgaWYgKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lclRyZWUgPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoY29uZikge1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHRoaXMubmV3TGlzdGVuZXIgPSBmYWxzZTtcbiAgICBjb25maWd1cmUuY2FsbCh0aGlzLCBjb25mKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEF0dGVudGlvbiwgZnVuY3Rpb24gcmV0dXJuIHR5cGUgbm93IGlzIGFycmF5LCBhbHdheXMgIVxuICAvLyBJdCBoYXMgemVybyBlbGVtZW50cyBpZiBubyBhbnkgbWF0Y2hlcyBmb3VuZCBhbmQgb25lIG9yIG1vcmVcbiAgLy8gZWxlbWVudHMgKGxlYWZzKSBpZiB0aGVyZSBhcmUgbWF0Y2hlc1xuICAvL1xuICBmdW5jdGlvbiBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHRyZWUsIGkpIHtcbiAgICBpZiAoIXRyZWUpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFyIGxpc3RlbmVycz1bXSwgbGVhZiwgbGVuLCBicmFuY2gsIHhUcmVlLCB4eFRyZWUsIGlzb2xhdGVkQnJhbmNoLCBlbmRSZWFjaGVkLFxuICAgICAgICB0eXBlTGVuZ3RoID0gdHlwZS5sZW5ndGgsIGN1cnJlbnRUeXBlID0gdHlwZVtpXSwgbmV4dFR5cGUgPSB0eXBlW2krMV07XG4gICAgaWYgKGkgPT09IHR5cGVMZW5ndGggJiYgdHJlZS5fbGlzdGVuZXJzKSB7XG4gICAgICAvL1xuICAgICAgLy8gSWYgYXQgdGhlIGVuZCBvZiB0aGUgZXZlbnQocykgbGlzdCBhbmQgdGhlIHRyZWUgaGFzIGxpc3RlbmVyc1xuICAgICAgLy8gaW52b2tlIHRob3NlIGxpc3RlbmVycy5cbiAgICAgIC8vXG4gICAgICBpZiAodHlwZW9mIHRyZWUuX2xpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBoYW5kbGVycyAmJiBoYW5kbGVycy5wdXNoKHRyZWUuX2xpc3RlbmVycyk7XG4gICAgICAgIHJldHVybiBbdHJlZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxlYWYgPSAwLCBsZW4gPSB0cmVlLl9saXN0ZW5lcnMubGVuZ3RoOyBsZWFmIDwgbGVuOyBsZWFmKyspIHtcbiAgICAgICAgICBoYW5kbGVycyAmJiBoYW5kbGVycy5wdXNoKHRyZWUuX2xpc3RlbmVyc1tsZWFmXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0cmVlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoKGN1cnJlbnRUeXBlID09PSAnKicgfHwgY3VycmVudFR5cGUgPT09ICcqKicpIHx8IHRyZWVbY3VycmVudFR5cGVdKSB7XG4gICAgICAvL1xuICAgICAgLy8gSWYgdGhlIGV2ZW50IGVtaXR0ZWQgaXMgJyonIGF0IHRoaXMgcGFydFxuICAgICAgLy8gb3IgdGhlcmUgaXMgYSBjb25jcmV0ZSBtYXRjaCBhdCB0aGlzIHBhdGNoXG4gICAgICAvL1xuICAgICAgaWYgKGN1cnJlbnRUeXBlID09PSAnKicpIHtcbiAgICAgICAgZm9yIChicmFuY2ggaW4gdHJlZSkge1xuICAgICAgICAgIGlmIChicmFuY2ggIT09ICdfbGlzdGVuZXJzJyAmJiB0cmVlLmhhc093blByb3BlcnR5KGJyYW5jaCkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5jb25jYXQoc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlW2JyYW5jaF0sIGkrMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIGlmKGN1cnJlbnRUeXBlID09PSAnKionKSB7XG4gICAgICAgIGVuZFJlYWNoZWQgPSAoaSsxID09PSB0eXBlTGVuZ3RoIHx8IChpKzIgPT09IHR5cGVMZW5ndGggJiYgbmV4dFR5cGUgPT09ICcqJykpO1xuICAgICAgICBpZihlbmRSZWFjaGVkICYmIHRyZWUuX2xpc3RlbmVycykge1xuICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaGFzIGEgX2xpc3RlbmVycywgYWRkIGl0IHRvIHRoZSBoYW5kbGVycy5cbiAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29uY2F0KHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZSwgdHlwZUxlbmd0aCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChicmFuY2ggaW4gdHJlZSkge1xuICAgICAgICAgIGlmIChicmFuY2ggIT09ICdfbGlzdGVuZXJzJyAmJiB0cmVlLmhhc093blByb3BlcnR5KGJyYW5jaCkpIHtcbiAgICAgICAgICAgIGlmKGJyYW5jaCA9PT0gJyonIHx8IGJyYW5jaCA9PT0gJyoqJykge1xuICAgICAgICAgICAgICBpZih0cmVlW2JyYW5jaF0uX2xpc3RlbmVycyAmJiAhZW5kUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5jb25jYXQoc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlW2JyYW5jaF0sIHR5cGVMZW5ndGgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29uY2F0KHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZVticmFuY2hdLCBpKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYoYnJhbmNoID09PSBuZXh0VHlwZSkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29uY2F0KHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgdHJlZVticmFuY2hdLCBpKzIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIE5vIG1hdGNoIG9uIHRoaXMgb25lLCBzaGlmdCBpbnRvIHRoZSB0cmVlIGJ1dCBub3QgaW4gdGhlIHR5cGUgYXJyYXkuXG4gICAgICAgICAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5jb25jYXQoc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB0cmVlW2JyYW5jaF0sIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmNvbmNhdChzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHRyZWVbY3VycmVudFR5cGVdLCBpKzEpKTtcbiAgICB9XG5cbiAgICB4VHJlZSA9IHRyZWVbJyonXTtcbiAgICBpZiAoeFRyZWUpIHtcbiAgICAgIC8vXG4gICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgdHJlZSB3aWxsIGFsbG93IGFueSBtYXRjaCBmb3IgdGhpcyBwYXJ0LFxuICAgICAgLy8gdGhlbiByZWN1cnNpdmVseSBleHBsb3JlIGFsbCBicmFuY2hlcyBvZiB0aGUgdHJlZVxuICAgICAgLy9cbiAgICAgIHNlYXJjaExpc3RlbmVyVHJlZShoYW5kbGVycywgdHlwZSwgeFRyZWUsIGkrMSk7XG4gICAgfVxuXG4gICAgeHhUcmVlID0gdHJlZVsnKionXTtcbiAgICBpZih4eFRyZWUpIHtcbiAgICAgIGlmKGkgPCB0eXBlTGVuZ3RoKSB7XG4gICAgICAgIGlmKHh4VHJlZS5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGxpc3RlbmVyIG9uIGEgJyoqJywgaXQgd2lsbCBjYXRjaCBhbGwsIHNvIGFkZCBpdHMgaGFuZGxlci5cbiAgICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZSwgdHlwZUxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCdWlsZCBhcnJheXMgb2YgbWF0Y2hpbmcgbmV4dCBicmFuY2hlcyBhbmQgb3RoZXJzLlxuICAgICAgICBmb3IoYnJhbmNoIGluIHh4VHJlZSkge1xuICAgICAgICAgIGlmKGJyYW5jaCAhPT0gJ19saXN0ZW5lcnMnICYmIHh4VHJlZS5oYXNPd25Qcm9wZXJ0eShicmFuY2gpKSB7XG4gICAgICAgICAgICBpZihicmFuY2ggPT09IG5leHRUeXBlKSB7XG4gICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhlIG5leHQgZWxlbWVudCB3aWxsIG1hdGNoLCBzbyBqdW1wIHR3aWNlLlxuICAgICAgICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZVticmFuY2hdLCBpKzIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGJyYW5jaCA9PT0gY3VycmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgLy8gQ3VycmVudCBub2RlIG1hdGNoZXMsIG1vdmUgaW50byB0aGUgdHJlZS5cbiAgICAgICAgICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB4eFRyZWVbYnJhbmNoXSwgaSsxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlzb2xhdGVkQnJhbmNoID0ge307XG4gICAgICAgICAgICAgIGlzb2xhdGVkQnJhbmNoW2JyYW5jaF0gPSB4eFRyZWVbYnJhbmNoXTtcbiAgICAgICAgICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlKGhhbmRsZXJzLCB0eXBlLCB7ICcqKic6IGlzb2xhdGVkQnJhbmNoIH0sIGkrMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYoeHhUcmVlLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSByZWFjaGVkIHRoZSBlbmQgYW5kIHN0aWxsIG9uIGEgJyoqJ1xuICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZSwgdHlwZUxlbmd0aCk7XG4gICAgICB9IGVsc2UgaWYoeHhUcmVlWycqJ10gJiYgeHhUcmVlWycqJ10uX2xpc3RlbmVycykge1xuICAgICAgICBzZWFyY2hMaXN0ZW5lclRyZWUoaGFuZGxlcnMsIHR5cGUsIHh4VHJlZVsnKiddLCB0eXBlTGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdGVuZXJzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ3Jvd0xpc3RlbmVyVHJlZSh0eXBlLCBsaXN0ZW5lcikge1xuXG4gICAgdHlwZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUuc3BsaXQodGhpcy5kZWxpbWl0ZXIpIDogdHlwZS5zbGljZSgpO1xuXG4gICAgLy9cbiAgICAvLyBMb29rcyBmb3IgdHdvIGNvbnNlY3V0aXZlICcqKicsIGlmIHNvLCBkb24ndCBhZGQgdGhlIGV2ZW50IGF0IGFsbC5cbiAgICAvL1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHR5cGUubGVuZ3RoOyBpKzEgPCBsZW47IGkrKykge1xuICAgICAgaWYodHlwZVtpXSA9PT0gJyoqJyAmJiB0eXBlW2krMV0gPT09ICcqKicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0cmVlID0gdGhpcy5saXN0ZW5lclRyZWU7XG4gICAgdmFyIG5hbWUgPSB0eXBlLnNoaWZ0KCk7XG5cbiAgICB3aGlsZSAobmFtZSkge1xuXG4gICAgICBpZiAoIXRyZWVbbmFtZV0pIHtcbiAgICAgICAgdHJlZVtuYW1lXSA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0cmVlID0gdHJlZVtuYW1lXTtcblxuICAgICAgaWYgKHR5cGUubGVuZ3RoID09PSAwKSB7XG5cbiAgICAgICAgaWYgKCF0cmVlLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgICB0cmVlLl9saXN0ZW5lcnMgPSBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHR5cGVvZiB0cmVlLl9saXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0cmVlLl9saXN0ZW5lcnMgPSBbdHJlZS5fbGlzdGVuZXJzLCBsaXN0ZW5lcl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheSh0cmVlLl9saXN0ZW5lcnMpKSB7XG5cbiAgICAgICAgICB0cmVlLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgICAgICBpZiAoIXRyZWUuX2xpc3RlbmVycy53YXJuZWQpIHtcblxuICAgICAgICAgICAgdmFyIG0gPSBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2V2ZW50cy5tYXhMaXN0ZW5lcnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIG0gPSB0aGlzLl9ldmVudHMubWF4TGlzdGVuZXJzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobSA+IDAgJiYgdHJlZS5fbGlzdGVuZXJzLmxlbmd0aCA+IG0pIHtcblxuICAgICAgICAgICAgICB0cmVlLl9saXN0ZW5lcnMud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS5fbGlzdGVuZXJzLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBuYW1lID0gdHlwZS5zaGlmdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW5cbiAgLy8gMTAgbGlzdGVuZXJzIGFyZSBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoXG4gIC8vIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuICAvL1xuICAvLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3NcbiAgLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5kZWxpbWl0ZXIgPSAnLic7XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gICAgdGhpcy5fZXZlbnRzIHx8IGluaXQuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9ldmVudHMubWF4TGlzdGVuZXJzID0gbjtcbiAgICBpZiAoIXRoaXMuX2NvbmYpIHRoaXMuX2NvbmYgPSB7fTtcbiAgICB0aGlzLl9jb25mLm1heExpc3RlbmVycyA9IG47XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudCA9ICcnO1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICAgIHRoaXMubWFueShldmVudCwgMSwgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubWFueSA9IGZ1bmN0aW9uKGV2ZW50LCB0dGwsIGZuKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYW55IG9ubHkgYWNjZXB0cyBpbnN0YW5jZXMgb2YgRnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmICgtLXR0bCA9PT0gMCkge1xuICAgICAgICBzZWxmLm9mZihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5fb3JpZ2luID0gZm47XG5cbiAgICB0aGlzLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbigpIHtcblxuICAgIHRoaXMuX2V2ZW50cyB8fCBpbml0LmNhbGwodGhpcyk7XG5cbiAgICB2YXIgdHlwZSA9IGFyZ3VtZW50c1swXTtcblxuICAgIGlmICh0eXBlID09PSAnbmV3TGlzdGVuZXInICYmICF0aGlzLm5ld0xpc3RlbmVyKSB7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggdGhlICpfYWxsKiBmdW5jdGlvbnMgYW5kIGludm9rZSB0aGVtLlxuICAgIGlmICh0aGlzLl9hbGwpIHtcbiAgICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbDsgaSsrKSBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLl9hbGwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZXZlbnQgPSB0eXBlO1xuICAgICAgICB0aGlzLl9hbGxbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICAgIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG5cbiAgICAgIGlmICghdGhpcy5fYWxsICYmXG4gICAgICAgICF0aGlzLl9ldmVudHMuZXJyb3IgJiZcbiAgICAgICAgISh0aGlzLndpbGRjYXJkICYmIHRoaXMubGlzdGVuZXJUcmVlLmVycm9yKSkge1xuXG4gICAgICAgIGlmIChhcmd1bWVudHNbMV0gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHRocm93IGFyZ3VtZW50c1sxXTsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmNhdWdodCwgdW5zcGVjaWZpZWQgJ2Vycm9yJyBldmVudC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYW5kbGVyO1xuXG4gICAgaWYodGhpcy53aWxkY2FyZCkge1xuICAgICAgaGFuZGxlciA9IFtdO1xuICAgICAgdmFyIG5zID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZS5zcGxpdCh0aGlzLmRlbGltaXRlcikgOiB0eXBlLnNsaWNlKCk7XG4gICAgICBzZWFyY2hMaXN0ZW5lclRyZWUuY2FsbCh0aGlzLCBoYW5kbGVyLCBucywgdGhpcy5saXN0ZW5lclRyZWUsIDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmV2ZW50ID0gdHlwZTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBzbG93ZXJcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkobCAtIDEpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsOyBpKyspIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhbmRsZXIpIHtcbiAgICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGwgLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbDsgaSsrKSBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgdmFyIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gdHlwZTtcbiAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkgfHwgISF0aGlzLl9hbGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuICEhdGhpcy5fYWxsO1xuICAgIH1cblxuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuXG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLm9uQW55KHR5cGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvbiBvbmx5IGFjY2VwdHMgaW5zdGFuY2VzIG9mIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cyB8fCBpbml0LmNhbGwodGhpcyk7XG5cbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09IFwibmV3TGlzdGVuZXJzXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJzXCIuXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgIGdyb3dMaXN0ZW5lclRyZWUuY2FsbCh0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICB9XG4gICAgZWxzZSBpZih0eXBlb2YgdGhpcy5fZXZlbnRzW3R5cGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh0aGlzLl9ldmVudHNbdHlwZV0pKSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcblxuICAgICAgICB2YXIgbSA9IGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9ldmVudHMubWF4TGlzdGVuZXJzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIG0gPSB0aGlzLl9ldmVudHMubWF4TGlzdGVuZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG5cbiAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbkFueSA9IGZ1bmN0aW9uKGZuKSB7XG5cbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29uQW55IG9ubHkgYWNjZXB0cyBpbnN0YW5jZXMgb2YgRnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZighdGhpcy5fYWxsKSB7XG4gICAgICB0aGlzLl9hbGwgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZ1bmN0aW9uIHRvIHRoZSBldmVudCBsaXN0ZW5lciBjb2xsZWN0aW9uLlxuICAgIHRoaXMuX2FsbC5wdXNoKGZuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVMaXN0ZW5lciBvbmx5IHRha2VzIGluc3RhbmNlcyBvZiBGdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVycyxsZWFmcz1bXTtcblxuICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgIHZhciBucyA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUuc3BsaXQodGhpcy5kZWxpbWl0ZXIpIDogdHlwZS5zbGljZSgpO1xuICAgICAgbGVhZnMgPSBzZWFyY2hMaXN0ZW5lclRyZWUuY2FsbCh0aGlzLCBudWxsLCBucywgdGhpcy5saXN0ZW5lclRyZWUsIDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGRvZXMgbm90IHVzZSBsaXN0ZW5lcnMoKSwgc28gbm8gc2lkZSBlZmZlY3Qgb2YgY3JlYXRpbmcgX2V2ZW50c1t0eXBlXVxuICAgICAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pIHJldHVybiB0aGlzO1xuICAgICAgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICBsZWFmcy5wdXNoKHtfbGlzdGVuZXJzOmhhbmRsZXJzfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaUxlYWY9MDsgaUxlYWY8bGVhZnMubGVuZ3RoOyBpTGVhZisrKSB7XG4gICAgICB2YXIgbGVhZiA9IGxlYWZzW2lMZWFmXTtcbiAgICAgIGhhbmRsZXJzID0gbGVhZi5fbGlzdGVuZXJzO1xuICAgICAgaWYgKGlzQXJyYXkoaGFuZGxlcnMpKSB7XG5cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGhhbmRsZXJzW2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgICAgKGhhbmRsZXJzW2ldLmxpc3RlbmVyICYmIGhhbmRsZXJzW2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgfHxcbiAgICAgICAgICAgIChoYW5kbGVyc1tpXS5fb3JpZ2luICYmIGhhbmRsZXJzW2ldLl9vcmlnaW4gPT09IGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy53aWxkY2FyZCkge1xuICAgICAgICAgIGxlYWYuX2xpc3RlbmVycy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsZWFmLl9saXN0ZW5lcnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChoYW5kbGVycyA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgKGhhbmRsZXJzLmxpc3RlbmVyICYmIGhhbmRsZXJzLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgfHxcbiAgICAgICAgKGhhbmRsZXJzLl9vcmlnaW4gJiYgaGFuZGxlcnMuX29yaWdpbiA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIGlmKHRoaXMud2lsZGNhcmQpIHtcbiAgICAgICAgICBkZWxldGUgbGVhZi5fbGlzdGVuZXJzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZkFueSA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIGkgPSAwLCBsID0gMCwgZm5zO1xuICAgIGlmIChmbiAmJiB0aGlzLl9hbGwgJiYgdGhpcy5fYWxsLmxlbmd0aCA+IDApIHtcbiAgICAgIGZucyA9IHRoaXMuX2FsbDtcbiAgICAgIGZvcihpID0gMCwgbCA9IGZucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYoZm4gPT09IGZuc1tpXSkge1xuICAgICAgICAgIGZucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYWxsID0gW107XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZjtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgIXRoaXMuX2V2ZW50cyB8fCBpbml0LmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZih0aGlzLndpbGRjYXJkKSB7XG4gICAgICB2YXIgbnMgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB0eXBlLnNwbGl0KHRoaXMuZGVsaW1pdGVyKSA6IHR5cGUuc2xpY2UoKTtcbiAgICAgIHZhciBsZWFmcyA9IHNlYXJjaExpc3RlbmVyVHJlZS5jYWxsKHRoaXMsIG51bGwsIG5zLCB0aGlzLmxpc3RlbmVyVHJlZSwgMCk7XG5cbiAgICAgIGZvciAodmFyIGlMZWFmPTA7IGlMZWFmPGxlYWZzLmxlbmd0aDsgaUxlYWYrKykge1xuICAgICAgICB2YXIgbGVhZiA9IGxlYWZzW2lMZWFmXTtcbiAgICAgICAgbGVhZi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBpZih0aGlzLndpbGRjYXJkKSB7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgICAgIHZhciBucyA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUuc3BsaXQodGhpcy5kZWxpbWl0ZXIpIDogdHlwZS5zbGljZSgpO1xuICAgICAgc2VhcmNoTGlzdGVuZXJUcmVlLmNhbGwodGhpcywgaGFuZGxlcnMsIG5zLCB0aGlzLmxpc3RlbmVyVHJlZSwgMCk7XG4gICAgICByZXR1cm4gaGFuZGxlcnM7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzIHx8IGluaXQuY2FsbCh0aGlzKTtcblxuICAgIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKSB0aGlzLl9ldmVudHNbdHlwZV0gPSBbXTtcbiAgICBpZiAoIWlzQXJyYXkodGhpcy5fZXZlbnRzW3R5cGVdKSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ldmVudHNbdHlwZV07XG4gIH07XG5cbiAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnNBbnkgPSBmdW5jdGlvbigpIHtcblxuICAgIGlmKHRoaXMuX2FsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gIH07XG5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBDb21tb25KU1xuICAgIGV4cG9ydHMuRXZlbnRFbWl0dGVyMiA9IEV2ZW50RW1pdHRlcjtcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbC5cbiAgICB3aW5kb3cuRXZlbnRFbWl0dGVyMiA9IEV2ZW50RW1pdHRlcjtcbiAgfVxufSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/fast-diff/diff.js":
/*!****************************************!*\
  !*** ./node_modules/fast-diff/diff.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\n\nmodule.exports = diff;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-diff/diff.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash/dist/lodash.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/dist/lodash.js ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lo-Dash 2.4.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments */\n  var undefined;\n\n  /** Used to pool arrays and objects used internally */\n  var arrayPool = [],\n      objectPool = [];\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */\n  var keyPrefix = +new Date + '';\n\n  /** Used as the size when optimizations are enabled for large arrays */\n  var largeArraySize = 75;\n\n  /** Used as the max size of the `arrayPool` and `objectPool` */\n  var maxPoolSize = 40;\n\n  /** Used to detect and test whitespace */\n  var whitespace = (\n    // whitespace\n    ' \\t\\x0B\\f\\xA0\\ufeff' +\n\n    // line terminators\n    '\\n\\r\\u2028\\u2029' +\n\n    // unicode category \"Zs\" space separators\n    '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'\n  );\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detected named functions */\n  var reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match leading whitespace and zeros to be removed */\n  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to detect functions containing a `this` reference */\n  var reThis = /\\bthis\\b/;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to assign default `context` object properties */\n  var contextProps = [\n    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',\n    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',\n    'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used as an internal `_.debounce` options object */\n  var debounceOptions = {\n    'leading': false,\n    'maxWait': 0,\n    'trailing': false\n  };\n\n  /** Used as the property descriptor for `__bindData__` */\n  var descriptor = {\n    'configurable': false,\n    'enumerable': false,\n    'value': null,\n    'writable': false\n  };\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[\"object\"] && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports` */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = objectTypes[typeof __webpack_require__.g] && __webpack_require__.g;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `_.indexOf` without support for binary searches\n   * or `fromIndex` constraints.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the matched value or `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    var index = (fromIndex || 0) - 1,\n        length = array ? array.length : 0;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * An implementation of `_.contains` for cache objects that mimics the return\n   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.\n   *\n   * @private\n   * @param {Object} cache The cache object to inspect.\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `0` if `value` is found, else `-1`.\n   */\n  function cacheIndexOf(cache, value) {\n    var type = typeof value;\n    cache = cache.cache;\n\n    if (type == 'boolean' || value == null) {\n      return cache[value] ? 0 : -1;\n    }\n    if (type != 'number' && type != 'string') {\n      type = 'object';\n    }\n    var key = type == 'number' ? value : keyPrefix + value;\n    cache = (cache = cache[type]) && cache[key];\n\n    return type == 'object'\n      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)\n      : (cache ? 0 : -1);\n  }\n\n  /**\n   * Adds a given value to the corresponding cache object.\n   *\n   * @private\n   * @param {*} value The value to add to the cache.\n   */\n  function cachePush(value) {\n    var cache = this.cache,\n        type = typeof value;\n\n    if (type == 'boolean' || value == null) {\n      cache[value] = true;\n    } else {\n      if (type != 'number' && type != 'string') {\n        type = 'object';\n      }\n      var key = type == 'number' ? value : keyPrefix + value,\n          typeCache = cache[type] || (cache[type] = {});\n\n      if (type == 'object') {\n        (typeCache[key] || (typeCache[key] = [])).push(value);\n      } else {\n        typeCache[key] = true;\n      }\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default callback when a given\n   * collection is a string value.\n   *\n   * @private\n   * @param {string} value The character to inspect.\n   * @returns {number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` elements, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ac = a.criteria,\n        bc = b.criteria,\n        index = -1,\n        length = ac.length;\n\n    while (++index < length) {\n      var value = ac[index],\n          other = bc[index];\n\n      if (value !== other) {\n        if (value > other || typeof value == 'undefined') {\n          return 1;\n        }\n        if (value < other || typeof other == 'undefined') {\n          return -1;\n        }\n      }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to return the same value for\n    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See http://code.google.com/p/v8/issues/detail?id=90\n    return a.index - b.index;\n  }\n\n  /**\n   * Creates a cache object to optimize linear searches of large arrays.\n   *\n   * @private\n   * @param {Array} [array=[]] The array to search.\n   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.\n   */\n  function createCache(array) {\n    var index = -1,\n        length = array.length,\n        first = array[0],\n        mid = array[(length / 2) | 0],\n        last = array[length - 1];\n\n    if (first && typeof first == 'object' &&\n        mid && typeof mid == 'object' && last && typeof last == 'object') {\n      return false;\n    }\n    var cache = getObject();\n    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n    var result = getObject();\n    result.array = array;\n    result.cache = cache;\n    result.push = cachePush;\n\n    while (++index < length) {\n      result.push(array[index]);\n    }\n    return result;\n  }\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {string} match The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Gets an array from the array pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Array} The array from the pool.\n   */\n  function getArray() {\n    return arrayPool.pop() || [];\n  }\n\n  /**\n   * Gets an object from the object pool or creates a new one if the pool is empty.\n   *\n   * @private\n   * @returns {Object} The object from the pool.\n   */\n  function getObject() {\n    return objectPool.pop() || {\n      'array': null,\n      'cache': null,\n      'criteria': null,\n      'false': false,\n      'index': 0,\n      'null': false,\n      'number': null,\n      'object': null,\n      'push': null,\n      'string': null,\n      'true': false,\n      'undefined': false,\n      'value': null\n    };\n  }\n\n  /**\n   * Releases the given array back to the array pool.\n   *\n   * @private\n   * @param {Array} [array] The array to release.\n   */\n  function releaseArray(array) {\n    array.length = 0;\n    if (arrayPool.length < maxPoolSize) {\n      arrayPool.push(array);\n    }\n  }\n\n  /**\n   * Releases the given object back to the object pool.\n   *\n   * @private\n   * @param {Object} [object] The object to release.\n   */\n  function releaseObject(object) {\n    var cache = object.cache;\n    if (cache) {\n      releaseObject(cache);\n    }\n    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n    if (objectPool.length < maxPoolSize) {\n      objectPool.push(object);\n    }\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used instead of `Array#slice` to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|string} collection The collection to slice.\n   * @param {number} start The start index.\n   * @param {number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `lodash` function using the given context object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns the `lodash` function.\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references */\n    var Array = context.Array,\n        Boolean = context.Boolean,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /**\n     * Used for `Array` method references.\n     *\n     * Normally `Array.prototype` would suffice, however, using an array literal\n     * avoids issues in Narwhal.\n     */\n    var arrayRef = [];\n\n    /** Used for native method references */\n    var objectProto = Object.prototype;\n\n    /** Used to restore the original `_` reference in `noConflict` */\n    var oldDash = context._;\n\n    /** Used to resolve the internal [[Class]] of values */\n    var toString = objectProto.toString;\n\n    /** Used to detect if a method is native */\n    var reNative = RegExp('^' +\n      String(toString)\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n    );\n\n    /** Native method shortcuts */\n    var ceil = Math.ceil,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        fnToString = Function.prototype.toString,\n        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n        hasOwnProperty = objectProto.hasOwnProperty,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        splice = arrayRef.splice,\n        unshift = arrayRef.unshift;\n\n    /** Used to set meta data on functions */\n    var defineProperty = (function() {\n      // IE 8 only accepts DOM elements\n      try {\n        var o = {},\n            func = isNative(func = Object.defineProperty) && func,\n            result = func(o, o, o) && func;\n      } catch(e) { }\n      return result;\n    }());\n\n    /* Native method shortcuts for methods with the same name as other `lodash` methods */\n    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,\n        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,\n        nativeIsFinite = context.isFinite,\n        nativeIsNaN = context.isNaN,\n        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random;\n\n    /** Used to lookup a built-in constructor by [[Class]] */\n    var ctorByClass = {};\n    ctorByClass[arrayClass] = Array;\n    ctorByClass[boolClass] = Boolean;\n    ctorByClass[dateClass] = Date;\n    ctorByClass[funcClass] = Function;\n    ctorByClass[objectClass] = Object;\n    ctorByClass[numberClass] = Number;\n    ctorByClass[regexpClass] = RegExp;\n    ctorByClass[stringClass] = String;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps the given value to enable intuitive\n     * method chaining.\n     *\n     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n     * and `unshift`\n     *\n     * Chaining is supported in custom builds as long as the `value` method is\n     * implicitly or explicitly included in the build.\n     *\n     * The chainable wrapper functions are:\n     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,\n     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,\n     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,\n     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,\n     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,\n     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,\n     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,\n     * and `zip`\n     *\n     * The non-chainable wrapper functions are:\n     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,\n     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,\n     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,\n     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,\n     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,\n     * `template`, `unescape`, `uniqueId`, and `value`\n     *\n     * The wrapper functions `first` and `last` return wrapped values when `n` is\n     * provided, otherwise they return unwrapped values.\n     *\n     * Explicit chaining can be enabled by using the `_.chain` method.\n     *\n     * @name _\n     * @constructor\n     * @category Chaining\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns a `lodash` instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(num) {\n     *   return num * num;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor\n      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))\n       ? value\n       : new lodashWrapper(value);\n    }\n\n    /**\n     * A fast path for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @param {boolean} chainAll A flag to enable chaining for all methods\n     * @returns {Object} Returns a `lodash` instance.\n     */\n    function lodashWrapper(value, chainAll) {\n      this.__chain__ = !!chainAll;\n      this.__wrapped__ = value;\n    }\n    // ensure `new lodashWrapper` is an instance of `lodash`\n    lodashWrapper.prototype = lodash.prototype;\n\n    /**\n     * An object used to flag environments features.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    /**\n     * Detect if functions can be decompiled by `Function#toString`\n     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);\n\n    /**\n     * Detect if `Function#name` is supported (all but IE).\n     *\n     * @memberOf _.support\n     * @type boolean\n     */\n    support.funcNames = typeof Function.name == 'string';\n\n    /**\n     * By default, the template delimiters used by Lo-Dash are similar to those in\n     * embedded Ruby (ERB). Change the following template settings to use alternative\n     * delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': /<%-([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': /<%([\\s\\S]+?)%>/g,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type string\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The base implementation of `_.bind` that creates the bound function and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new bound function.\n     */\n    function baseBind(bindData) {\n      var func = bindData[0],\n          partialArgs = bindData[2],\n          thisArg = bindData[4];\n\n      function bound() {\n        // `Function#bind` spec\n        // http://es5.github.io/#x15.3.4.5\n        if (partialArgs) {\n          // avoid `arguments` object deoptimizations by using `slice` instead\n          // of `Array.prototype.slice.call` and not assigning `arguments` to a\n          // variable as a ternary expression\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        // mimic the constructor's `return` behavior\n        // http://es5.github.io/#x13.2.2\n        if (this instanceof bound) {\n          // ensure `new bound` is an instance of `func`\n          var thisBinding = baseCreate(func.prototype),\n              result = func.apply(thisBinding, args || arguments);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisArg, args || arguments);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.clone` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, callback, stackA, stackB) {\n      if (callback) {\n        var result = callback(value);\n        if (typeof result != 'undefined') {\n          return result;\n        }\n      }\n      // inspect [[Class]]\n      var isObj = isObject(value);\n      if (isObj) {\n        var className = toString.call(value);\n        if (!cloneableClasses[className]) {\n          return value;\n        }\n        var ctor = ctorByClass[className];\n        switch (className) {\n          case boolClass:\n          case dateClass:\n            return new ctor(+value);\n\n          case numberClass:\n          case stringClass:\n            return new ctor(value);\n\n          case regexpClass:\n            result = ctor(value.source, reFlags.exec(value));\n            result.lastIndex = value.lastIndex;\n            return result;\n        }\n      } else {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isDeep) {\n        // check for circular references and return corresponding clone\n        var initedStack = !stackA;\n        stackA || (stackA = getArray());\n        stackB || (stackB = getArray());\n\n        var length = stackA.length;\n        while (length--) {\n          if (stackA[length] == value) {\n            return stackB[length];\n          }\n        }\n        result = isArr ? ctor(value.length) : {};\n      }\n      else {\n        result = isArr ? slice(value) : assign({}, value);\n      }\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n      // exit for shallow clone\n      if (!isDeep) {\n        return result;\n      }\n      // add the source value to the stack of traversed objects\n      // and associate it with its clone\n      stackA.push(value);\n      stackB.push(result);\n\n      // recursively populate clone (susceptible to call stack limits)\n      (isArr ? forEach : forOwn)(value, function(objValue, key) {\n        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);\n      });\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    function baseCreate(prototype, properties) {\n      return isObject(prototype) ? nativeCreate(prototype) : {};\n    }\n    // fallback for browsers without `Object.create`\n    if (!nativeCreate) {\n      baseCreate = (function() {\n        function Object() {}\n        return function(prototype) {\n          if (isObject(prototype)) {\n            Object.prototype = prototype;\n            var result = new Object;\n            Object.prototype = null;\n          }\n          return result || context.Object();\n        };\n      }());\n    }\n\n    /**\n     * The base implementation of `_.createCallback` without support for creating\n     * \"_.pluck\" or \"_.where\" style callbacks.\n     *\n     * @private\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     */\n    function baseCreateCallback(func, thisArg, argCount) {\n      if (typeof func != 'function') {\n        return identity;\n      }\n      // exit early for no `thisArg` or already bound by `Function#bind`\n      if (typeof thisArg == 'undefined' || !('prototype' in func)) {\n        return func;\n      }\n      var bindData = func.__bindData__;\n      if (typeof bindData == 'undefined') {\n        if (support.funcNames) {\n          bindData = !func.name;\n        }\n        bindData = bindData || !support.funcDecomp;\n        if (!bindData) {\n          var source = fnToString.call(func);\n          if (!support.funcNames) {\n            bindData = !reFuncName.test(source);\n          }\n          if (!bindData) {\n            // checks if `func` references the `this` keyword and stores the result\n            bindData = reThis.test(source);\n            setBindData(func, bindData);\n          }\n        }\n      }\n      // exit early if there are no `this` references or `func` is bound\n      if (bindData === false || (bindData !== true && bindData[1] & 1)) {\n        return func;\n      }\n      switch (argCount) {\n        case 1: return function(value) {\n          return func.call(thisArg, value);\n        };\n        case 2: return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n        case 3: return function(value, index, collection) {\n          return func.call(thisArg, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n      }\n      return bind(func, thisArg);\n    }\n\n    /**\n     * The base implementation of `createWrapper` that creates the wrapper and\n     * sets its meta data.\n     *\n     * @private\n     * @param {Array} bindData The bind data array.\n     * @returns {Function} Returns the new function.\n     */\n    function baseCreateWrapper(bindData) {\n      var func = bindData[0],\n          bitmask = bindData[1],\n          partialArgs = bindData[2],\n          partialRightArgs = bindData[3],\n          thisArg = bindData[4],\n          arity = bindData[5];\n\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          key = func;\n\n      function bound() {\n        var thisBinding = isBind ? thisArg : this;\n        if (partialArgs) {\n          var args = slice(partialArgs);\n          push.apply(args, arguments);\n        }\n        if (partialRightArgs || isCurry) {\n          args || (args = slice(arguments));\n          if (partialRightArgs) {\n            push.apply(args, partialRightArgs);\n          }\n          if (isCurry && args.length < arity) {\n            bitmask |= 16 & ~32;\n            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);\n          }\n        }\n        args || (args = arguments);\n        if (isBindKey) {\n          func = thisBinding[key];\n        }\n        if (this instanceof bound) {\n          thisBinding = baseCreate(func.prototype);\n          var result = func.apply(thisBinding, args);\n          return isObject(result) ? result : thisBinding;\n        }\n        return func.apply(thisBinding, args);\n      }\n      setBindData(bound, bindData);\n      return bound;\n    }\n\n    /**\n     * The base implementation of `_.difference` that accepts a single array\n     * of values to exclude.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {Array} [values] The array of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     */\n    function baseDifference(array, values) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          isLarge = length >= largeArraySize && indexOf === baseIndexOf,\n          result = [];\n\n      if (isLarge) {\n        var cache = createCache(values);\n        if (cache) {\n          indexOf = cacheIndexOf;\n          values = cache;\n        } else {\n          isLarge = false;\n        }\n      }\n      while (++index < length) {\n        var value = array[index];\n        if (indexOf(values, value) < 0) {\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseObject(values);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` without support for callback\n     * shorthands or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.\n     * @param {number} [fromIndex=0] The index to start from.\n     * @returns {Array} Returns a new flattened array.\n     */\n    function baseFlatten(array, isShallow, isStrict, fromIndex) {\n      var index = (fromIndex || 0) - 1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n\n        if (value && typeof value == 'object' && typeof value.length == 'number'\n            && (isArray(value) || isArguments(value))) {\n          // recursively flatten arrays (susceptible to call stack limits)\n          if (!isShallow) {\n            value = baseFlatten(value, isShallow, isStrict);\n          }\n          var valIndex = -1,\n              valLength = value.length,\n              resIndex = result.length;\n\n          result.length += valLength;\n          while (++valIndex < valLength) {\n            result[resIndex++] = value[valIndex];\n          }\n        } else if (!isStrict) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.isEqual`, without support for `thisArg` binding,\n     * that allows partial \"_.where\" style comparisons.\n     *\n     * @private\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.\n     * @param {Array} [stackA=[]] Tracks traversed `a` objects.\n     * @param {Array} [stackB=[]] Tracks traversed `b` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {\n      // used to indicate that when comparing objects, `a` has at least the properties of `b`\n      if (callback) {\n        var result = callback(a, b);\n        if (typeof result != 'undefined') {\n          return !!result;\n        }\n      }\n      // exit early for identical values\n      if (a === b) {\n        // treat `+0` vs. `-0` as not equal\n        return a !== 0 || (1 / a == 1 / b);\n      }\n      var type = typeof a,\n          otherType = typeof b;\n\n      // exit early for unlike primitive values\n      if (a === a &&\n          !(a && objectTypes[type]) &&\n          !(b && objectTypes[otherType])) {\n        return false;\n      }\n      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior\n      // http://es5.github.io/#x15.3.4.4\n      if (a == null || b == null) {\n        return a === b;\n      }\n      // compare [[Class]] names\n      var className = toString.call(a),\n          otherClass = toString.call(b);\n\n      if (className == argsClass) {\n        className = objectClass;\n      }\n      if (otherClass == argsClass) {\n        otherClass = objectClass;\n      }\n      if (className != otherClass) {\n        return false;\n      }\n      switch (className) {\n        case boolClass:\n        case dateClass:\n          // coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal\n          return +a == +b;\n\n        case numberClass:\n          // treat `NaN` vs. `NaN` as equal\n          return (a != +a)\n            ? b != +b\n            // but treat `+0` vs. `-0` as not equal\n            : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n        case regexpClass:\n        case stringClass:\n          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)\n          // treat string primitives and their corresponding object instances as equal\n          return a == String(b);\n      }\n      var isArr = className == arrayClass;\n      if (!isArr) {\n        // unwrap any `lodash` wrapped values\n        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),\n            bWrapped = hasOwnProperty.call(b, '__wrapped__');\n\n        if (aWrapped || bWrapped) {\n          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);\n        }\n        // exit for functions and DOM nodes\n        if (className != objectClass) {\n          return false;\n        }\n        // in older versions of Opera, `arguments` objects have `Array` constructors\n        var ctorA = a.constructor,\n            ctorB = b.constructor;\n\n        // non `Object` object instances with different constructors are not equal\n        if (ctorA != ctorB &&\n              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&\n              ('constructor' in a && 'constructor' in b)\n            ) {\n          return false;\n        }\n      }\n      // assume cyclic structures are equal\n      // the algorithm for detecting cyclic structures is adapted from ES 5.1\n      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)\n      var initedStack = !stackA;\n      stackA || (stackA = getArray());\n      stackB || (stackB = getArray());\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == a) {\n          return stackB[length] == b;\n        }\n      }\n      var size = 0;\n      result = true;\n\n      // add `a` and `b` to the stack of traversed objects\n      stackA.push(a);\n      stackB.push(b);\n\n      // recursively compare objects and arrays (susceptible to call stack limits)\n      if (isArr) {\n        // compare lengths to determine if a deep comparison is necessary\n        length = a.length;\n        size = b.length;\n        result = size == length;\n\n        if (result || isWhere) {\n          // deep compare the contents, ignoring non-numeric properties\n          while (size--) {\n            var index = length,\n                value = b[size];\n\n            if (isWhere) {\n              while (index--) {\n                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {\n                  break;\n                }\n              }\n            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {\n              break;\n            }\n          }\n        }\n      }\n      else {\n        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n        // which, in this case, is more costly\n        forIn(b, function(value, key, b) {\n          if (hasOwnProperty.call(b, key)) {\n            // count the number of properties.\n            size++;\n            // deep compare each property value.\n            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));\n          }\n        });\n\n        if (result && !isWhere) {\n          // ensure both objects have the same number of properties\n          forIn(a, function(value, key, a) {\n            if (hasOwnProperty.call(a, key)) {\n              // `size` will be `-1` if `a` has more properties than `b`\n              return (result = --size > -1);\n            }\n          });\n        }\n      }\n      stackA.pop();\n      stackB.pop();\n\n      if (initedStack) {\n        releaseArray(stackA);\n        releaseArray(stackB);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.merge` without argument juggling or support\n     * for `thisArg` binding.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     */\n    function baseMerge(object, source, callback, stackA, stackB) {\n      (isArray(source) ? forEach : forOwn)(source, function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            var isShallow;\n            if (callback) {\n              result = callback(value, source);\n              if ((isShallow = typeof result != 'undefined')) {\n                value = result;\n              }\n            }\n            if (!isShallow) {\n              value = isArr\n                ? (isArray(value) ? value : [])\n                : (isPlainObject(value) ? value : {});\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!isShallow) {\n              baseMerge(value, source, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n\n    /**\n     * The base implementation of `_.random` without argument juggling or support\n     * for returning floating-point numbers.\n     *\n     * @private\n     * @param {number} min The minimum possible value.\n     * @param {number} max The maximum possible value.\n     * @returns {number} Returns a random number.\n     */\n    function baseRandom(min, max) {\n      return min + floor(nativeRandom() * (max - min + 1));\n    }\n\n    /**\n     * The base implementation of `_.uniq` without support for callback shorthands\n     * or `thisArg` binding.\n     *\n     * @private\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function} [callback] The function called per iteration.\n     * @returns {Array} Returns a duplicate-value-free array.\n     */\n    function baseUniq(array, isSorted, callback) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array ? array.length : 0,\n          result = [];\n\n      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,\n          seen = (callback || isLarge) ? getArray() : result;\n\n      if (isLarge) {\n        var cache = createCache(seen);\n        indexOf = cacheIndexOf;\n        seen = cache;\n      }\n      while (++index < length) {\n        var value = array[index],\n            computed = callback ? callback(value, index, array) : value;\n\n        if (isSorted\n              ? !index || seen[seen.length - 1] !== computed\n              : indexOf(seen, computed) < 0\n            ) {\n          if (callback || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      if (isLarge) {\n        releaseArray(seen.array);\n        releaseObject(seen);\n      } else if (callback) {\n        releaseArray(seen);\n      }\n      return result;\n    }\n\n    /**\n     * Creates a function that aggregates a collection, creating an object composed\n     * of keys generated from the results of running each element of the collection\n     * through a callback. The given `setter` function sets the keys and values\n     * of the composed object.\n     *\n     * @private\n     * @param {Function} setter The setter function.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter) {\n      return function(collection, callback, thisArg) {\n        var result = {};\n        callback = lodash.createCallback(callback, thisArg, 3);\n\n        var index = -1,\n            length = collection ? collection.length : 0;\n\n        if (typeof length == 'number') {\n          while (++index < length) {\n            var value = collection[index];\n            setter(result, value, callback(value, index, collection), collection);\n          }\n        } else {\n          forOwn(collection, function(value, key, collection) {\n            setter(result, value, callback(value, key, collection), collection);\n          });\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, either curries or invokes `func`\n     * with an optional `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of method flags to compose.\n     *  The bitmask may be composed of the following flags:\n     *  1 - `_.bind`\n     *  2 - `_.bindKey`\n     *  4 - `_.curry`\n     *  8 - `_.curry` (bound)\n     *  16 - `_.partial`\n     *  32 - `_.partialRight`\n     * @param {Array} [partialArgs] An array of arguments to prepend to those\n     *  provided to the new function.\n     * @param {Array} [partialRightArgs] An array of arguments to append to those\n     *  provided to the new function.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new function.\n     */\n    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {\n      var isBind = bitmask & 1,\n          isBindKey = bitmask & 2,\n          isCurry = bitmask & 4,\n          isCurryBound = bitmask & 8,\n          isPartial = bitmask & 16,\n          isPartialRight = bitmask & 32;\n\n      if (!isBindKey && !isFunction(func)) {\n        throw new TypeError;\n      }\n      if (isPartial && !partialArgs.length) {\n        bitmask &= ~16;\n        isPartial = partialArgs = false;\n      }\n      if (isPartialRight && !partialRightArgs.length) {\n        bitmask &= ~32;\n        isPartialRight = partialRightArgs = false;\n      }\n      var bindData = func && func.__bindData__;\n      if (bindData && bindData !== true) {\n        // clone `bindData`\n        bindData = slice(bindData);\n        if (bindData[2]) {\n          bindData[2] = slice(bindData[2]);\n        }\n        if (bindData[3]) {\n          bindData[3] = slice(bindData[3]);\n        }\n        // set `thisBinding` is not previously bound\n        if (isBind && !(bindData[1] & 1)) {\n          bindData[4] = thisArg;\n        }\n        // set if previously bound but not currently (subsequent curried functions)\n        if (!isBind && bindData[1] & 1) {\n          bitmask |= 8;\n        }\n        // set curried arity if not yet set\n        if (isCurry && !(bindData[1] & 4)) {\n          bindData[5] = arity;\n        }\n        // append partial left arguments\n        if (isPartial) {\n          push.apply(bindData[2] || (bindData[2] = []), partialArgs);\n        }\n        // append partial right arguments\n        if (isPartialRight) {\n          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);\n        }\n        // merge flags\n        bindData[1] |= bitmask;\n        return createWrapper.apply(null, bindData);\n      }\n      // fast path for `_.bind`\n      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;\n      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);\n    }\n\n    /**\n     * Used by `escape` to convert characters to HTML entities.\n     *\n     * @private\n     * @param {string} match The matched character to escape.\n     * @returns {string} Returns the escaped character.\n     */\n    function escapeHtmlChar(match) {\n      return htmlEscapes[match];\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized, this method returns the custom method, otherwise it returns\n     * the `baseIndexOf` function.\n     *\n     * @private\n     * @returns {Function} Returns the \"indexOf\" function.\n     */\n    function getIndexOf() {\n      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a native function.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.\n     */\n    function isNative(value) {\n      return typeof value == 'function' && reNative.test(value);\n    }\n\n    /**\n     * Sets `this` binding data on a given function.\n     *\n     * @private\n     * @param {Function} func The function to set data on.\n     * @param {Array} value The data array to set.\n     */\n    var setBindData = !defineProperty ? noop : function(func, value) {\n      descriptor.value = value;\n      defineProperty(func, '__bindData__', descriptor);\n      descriptor.value = null;\n    };\n\n    /**\n     * A fallback implementation of `isPlainObject` which checks if a given value\n     * is an object created by the `Object` constructor, assuming objects created\n     * by the `Object` constructor have no inherited enumerable properties and that\n     * there are no `Object.prototype` extensions.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     */\n    function shimIsPlainObject(value) {\n      var ctor,\n          result;\n\n      // avoid non Object objects, `arguments` objects, and DOM elements\n      if (!(value && toString.call(value) == objectClass) ||\n          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {\n        return false;\n      }\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return typeof result == 'undefined' || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Used by `unescape` to convert HTML entities to characters.\n     *\n     * @private\n     * @param {string} match The matched character to unescape.\n     * @returns {string} Returns the unescaped character.\n     */\n    function unescapeHtmlChar(match) {\n      return htmlUnescapes[match];\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `value` is an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.\n     * @example\n     *\n     * (function() { return _.isArguments(arguments); })(1, 2, 3);\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == argsClass || false;\n    }\n\n    /**\n     * Checks if `value` is an array.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.\n     * @example\n     *\n     * (function() { return _.isArray(arguments); })();\n     * // => false\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     */\n    var isArray = nativeIsArray || function(value) {\n      return value && typeof value == 'object' && typeof value.length == 'number' &&\n        toString.call(value) == arrayClass || false;\n    };\n\n    /**\n     * A fallback implementation of `Object.keys` which produces an array of the\n     * given object's own enumerable property names.\n     *\n     * @private\n     * @type Function\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     */\n    var shimKeys = function(object) {\n      var index, iterable = object, result = [];\n      if (!iterable) return result;\n      if (!(objectTypes[typeof object])) return result;\n        for (index in iterable) {\n          if (hasOwnProperty.call(iterable, index)) {\n            result.push(index);\n          }\n        }\n      return result\n    };\n\n    /**\n     * Creates an array composed of the own enumerable property names of an object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names.\n     * @example\n     *\n     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      if (!isObject(object)) {\n        return [];\n      }\n      return nativeKeys(object);\n    };\n\n    /**\n     * Used to convert characters to HTML entities:\n     *\n     * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n     * don't require escaping in HTML and have no special meaning unless they're part\n     * of a tag or an unquoted attribute value.\n     * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n     */\n    var htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n\n    /** Used to convert HTML entities to characters */\n    var htmlUnescapes = invert(htmlEscapes);\n\n    /** Used to match HTML entities and HTML characters */\n    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),\n        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources will overwrite property assignments of previous\n     * sources. If a callback is provided it will be executed to produce the\n     * assigned values. The callback is bound to `thisArg` and invoked with two\n     * arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @alias extend\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize assigning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });\n     * // => { 'name': 'fred', 'employer': 'slate' }\n     *\n     * var defaults = _.partialRight(_.assign, function(a, b) {\n     *   return typeof a == 'undefined' ? b : a;\n     * });\n     *\n     * var object = { 'name': 'barney' };\n     * defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var assign = function(object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n        callback = args[--argsLength];\n      }\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];\n        }\n        }\n      }\n      return result\n    };\n\n    /**\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also\n     * be cloned, otherwise they will be assigned by reference. If a callback\n     * is provided it will be executed to produce the cloned values. If the\n     * callback returns `undefined` cloning will be handled by the method instead.\n     * The callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep=false] Specify a deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var shallow = _.clone(characters);\n     * shallow[0] === characters[0];\n     * // => true\n     *\n     * var deep = _.clone(characters, true);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * _.mixin({\n     *   'clone': _.partialRight(_.clone, function(value) {\n     *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n     *   })\n     * });\n     *\n     * var clone = _.clone(document.body);\n     * clone.childNodes.length;\n     * // => 0\n     */\n    function clone(value, isDeep, callback, thisArg) {\n      // allows working with \"Collections\" methods without using their `index`\n      // and `collection` arguments for `isDeep` and `callback`\n      if (typeof isDeep != 'boolean' && isDeep != null) {\n        thisArg = callback;\n        callback = isDeep;\n        isDeep = false;\n      }\n      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates a deep clone of `value`. If a callback is provided it will be\n     * executed to produce the cloned values. If the callback returns `undefined`\n     * cloning will be handled by the method instead. The callback is bound to\n     * `thisArg` and invoked with one argument; (value).\n     *\n     * Note: This method is loosely based on the structured clone algorithm. Functions\n     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n     * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to deep clone.\n     * @param {Function} [callback] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the deep cloned value.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * var deep = _.cloneDeep(characters);\n     * deep[0] === characters[0];\n     * // => false\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'node': element\n     * };\n     *\n     * var clone = _.cloneDeep(view, function(value) {\n     *   return _.isElement(value) ? value.cloneNode(true) : undefined;\n     * });\n     *\n     * clone.node == view.node;\n     * // => false\n     */\n    function cloneDeep(value, callback, thisArg) {\n      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));\n    }\n\n    /**\n     * Creates an object that inherits from the given `prototype` object. If a\n     * `properties` object is provided its own enumerable properties are assigned\n     * to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties ? assign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional defaults of the same property will be ignored.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param- {Object} [guard] Allows working with `_.reduce` without using its\n     *  `key` and `object` arguments as sources.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var object = { 'name': 'barney' };\n     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });\n     * // => { 'name': 'barney', 'employer': 'slate' }\n     */\n    var defaults = function(object, source, guard) {\n      var index, iterable = object, result = iterable;\n      if (!iterable) return result;\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = typeof guard == 'number' ? 2 : args.length;\n      while (++argsIndex < argsLength) {\n        iterable = args[argsIndex];\n        if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (typeof result[index] == 'undefined') result[index] = iterable[index];\n        }\n        }\n      }\n      return result\n    };\n\n    /**\n     * This method is like `_.findIndex` except that it returns the key of the\n     * first element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': false },\n     *   'fred': {    'age': 40, 'blocked': true },\n     *   'pebbles': { 'age': 1,  'blocked': false }\n     * };\n     *\n     * _.findKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => 'barney' (property order is not guaranteed across environments)\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findKey(characters, { 'age': 1 });\n     * // => 'pebbles'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findKey(characters, 'blocked');\n     * // => 'fred'\n     */\n    function findKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [callback=identity] The function called per\n     *  iteration. If a property name or object is provided it will be used to\n     *  create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {string|undefined} Returns the key of the found element, else `undefined`.\n     * @example\n     *\n     * var characters = {\n     *   'barney': {  'age': 36, 'blocked': true },\n     *   'fred': {    'age': 40, 'blocked': false },\n     *   'pebbles': { 'age': 1,  'blocked': true }\n     * };\n     *\n     * _.findLastKey(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => returns `pebbles`, assuming `_.findKey` returns `barney`\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastKey(characters, { 'age': 40 });\n     * // => 'fred'\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastKey(characters, 'blocked');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forOwnRight(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result = key;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over own and inherited enumerable properties of an object,\n     * executing the callback for each property. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, key, object). Callbacks may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forIn(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)\n     */\n    var forIn = function(collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n        for (index in iterable) {\n          if (callback(iterable[index], index, collection) === false) return result;\n        }\n      return result\n    };\n\n    /**\n     * This method is like `_.forIn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * Shape.prototype.move = function(x, y) {\n     *   this.x += x;\n     *   this.y += y;\n     * };\n     *\n     * _.forInRight(new Shape, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'\n     */\n    function forInRight(object, callback, thisArg) {\n      var pairs = [];\n\n      forIn(object, function(value, key) {\n        pairs.push(key, value);\n      });\n\n      var length = pairs.length;\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(pairs[length--], pairs[length], object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Iterates over own enumerable properties of an object, executing the callback\n     * for each property. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, key, object). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)\n     */\n    var forOwn = function(collection, callback, thisArg) {\n      var index, iterable = collection, result = iterable;\n      if (!iterable) return result;\n      if (!objectTypes[typeof iterable]) return result;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (callback(iterable[index], index, collection) === false) return result;\n        }\n      return result\n    };\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over elements\n     * of a `collection` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'\n     */\n    function forOwnRight(object, callback, thisArg) {\n      var props = keys(object),\n          length = props.length;\n\n      callback = baseCreateCallback(callback, thisArg, 3);\n      while (length--) {\n        var key = props[length];\n        if (callback(object[key], key, object) === false) {\n          break;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Creates a sorted array of property names of all enumerable properties,\n     * own and inherited, of `object` that have function values.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property names that have function values.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n     */\n    function functions(object) {\n      var result = [];\n      forIn(object, function(value, key) {\n        if (isFunction(value)) {\n          result.push(key);\n        }\n      });\n      return result.sort();\n    }\n\n    /**\n     * Checks if the specified property name exists as a direct property of `object`,\n     * instead of an inherited property.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to check.\n     * @returns {boolean} Returns `true` if key is a direct property, else `false`.\n     * @example\n     *\n     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n     * // => true\n     */\n    function has(object, key) {\n      return object ? hasOwnProperty.call(object, key) : false;\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of the given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the created inverted object.\n     * @example\n     *\n     * _.invert({ 'first': 'fred', 'second': 'barney' });\n     * // => { 'fred': 'first', 'barney': 'second' }\n     */\n    function invert(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        result[object[key]] = key;\n      }\n      return result;\n    }\n\n    /**\n     * Checks if `value` is a boolean value.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.\n     * @example\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        value && typeof value == 'object' && toString.call(value) == boolClass || false;\n    }\n\n    /**\n     * Checks if `value` is a date.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     */\n    function isDate(value) {\n      return value && typeof value == 'object' && toString.call(value) == dateClass || false;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     */\n    function isElement(value) {\n      return value && value.nodeType === 1 || false;\n    }\n\n    /**\n     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n     * length of `0` and objects with no own enumerable properties are considered\n     * \"empty\".\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object|string} value The value to inspect.\n     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({});\n     * // => true\n     *\n     * _.isEmpty('');\n     * // => true\n     */\n    function isEmpty(value) {\n      var result = true;\n      if (!value) {\n        return result;\n      }\n      var className = toString.call(value),\n          length = value.length;\n\n      if ((className == arrayClass || className == stringClass || className == argsClass ) ||\n          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n        return !length;\n      }\n      forOwn(value, function() {\n        return (result = false);\n      });\n      return result;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent to each other. If a callback is provided it will be executed\n     * to compare values. If the callback returns `undefined` comparisons will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (a, b).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} a The value to compare.\n     * @param {*} b The other value to compare.\n     * @param {Function} [callback] The function to customize comparing values.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var copy = { 'name': 'fred' };\n     *\n     * object == copy;\n     * // => false\n     *\n     * _.isEqual(object, copy);\n     * // => true\n     *\n     * var words = ['hello', 'goodbye'];\n     * var otherWords = ['hi', 'goodbye'];\n     *\n     * _.isEqual(words, otherWords, function(a, b) {\n     *   var reGreet = /^(?:hello|hi)$/i,\n     *       aGreet = _.isString(a) && reGreet.test(a),\n     *       bGreet = _.isString(b) && reGreet.test(b);\n     *\n     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n     * });\n     * // => true\n     */\n    function isEqual(a, b, callback, thisArg) {\n      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));\n    }\n\n    /**\n     * Checks if `value` is, or can be coerced to, a finite number.\n     *\n     * Note: This is not the same as native `isFinite` which will return true for\n     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.\n     * @example\n     *\n     * _.isFinite(-101);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => true\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite('');\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n    }\n\n    /**\n     * Checks if `value` is a function.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     */\n    function isFunction(value) {\n      return typeof value == 'function';\n    }\n\n    /**\n     * Checks if `value` is the language type of Object.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // check if the value is the ECMAScript language type of Object\n      // http://es5.github.io/#x8\n      // and avoid a V8 bug\n      // http://code.google.com/p/v8/issues/detail?id=2291\n      return !!(value && objectTypes[typeof value]);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * Note: This is not the same as native `isNaN` which will return `true` for\n     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // `NaN` as a primitive is the only value that is not equal to itself\n      // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(undefined);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is a number.\n     *\n     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4 * 5);\n     * // => true\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        value && typeof value == 'object' && toString.call(value) == numberClass || false;\n    }\n\n    /**\n     * Checks if `value` is an object created by the `Object` constructor.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * _.isPlainObject(new Shape);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     */\n    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n      if (!(value && toString.call(value) == objectClass)) {\n        return false;\n      }\n      var valueOf = value.valueOf,\n          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n      return objProto\n        ? (value == objProto || getPrototypeOf(value) == objProto)\n        : shimIsPlainObject(value);\n    };\n\n    /**\n     * Checks if `value` is a regular expression.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.\n     * @example\n     *\n     * _.isRegExp(/fred/);\n     * // => true\n     */\n    function isRegExp(value) {\n      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;\n    }\n\n    /**\n     * Checks if `value` is a string.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('fred');\n     * // => true\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        value && typeof value == 'object' && toString.call(value) == stringClass || false;\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     */\n    function isUndefined(value) {\n      return typeof value == 'undefined';\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated by\n     * running each own enumerable property of `object` through the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new object with values of the results of each `callback` execution.\n     * @example\n     *\n     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     *\n     * var characters = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.mapValues(characters, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 }\n     */\n    function mapValues(object, callback, thisArg) {\n      var result = {};\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      forOwn(object, function(value, key, object) {\n        result[key] = callback(value, key, object);\n      });\n      return result;\n    }\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined` into the destination object. Subsequent sources\n     * will overwrite property assignments of previous sources. If a callback is\n     * provided it will be executed to produce the merged values of the destination\n     * and source properties. If the callback returns `undefined` merging will\n     * be handled by the method instead. The callback is bound to `thisArg` and\n     * invoked with two arguments; (objectValue, sourceValue).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The destination object.\n     * @param {...Object} [source] The source objects.\n     * @param {Function} [callback] The function to customize merging properties.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the destination object.\n     * @example\n     *\n     * var names = {\n     *   'characters': [\n     *     { 'name': 'barney' },\n     *     { 'name': 'fred' }\n     *   ]\n     * };\n     *\n     * var ages = {\n     *   'characters': [\n     *     { 'age': 36 },\n     *     { 'age': 40 }\n     *   ]\n     * };\n     *\n     * _.merge(names, ages);\n     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }\n     *\n     * var food = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var otherFood = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(food, otherFood, function(a, b) {\n     *   return _.isArray(a) ? a.concat(b) : undefined;\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n     */\n    function merge(object) {\n      var args = arguments,\n          length = 2;\n\n      if (!isObject(object)) {\n        return object;\n      }\n      // allows working with `_.reduce` and `_.reduceRight` without using\n      // their `index` and `collection` arguments\n      if (typeof args[2] != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n      var sources = slice(arguments, 1, length),\n          index = -1,\n          stackA = getArray(),\n          stackB = getArray();\n\n      while (++index < length) {\n        baseMerge(object, sources[index], callback, stackA, stackB);\n      }\n      releaseArray(stackA);\n      releaseArray(stackB);\n      return object;\n    }\n\n    /**\n     * Creates a shallow clone of `object` excluding the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` omitting the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The properties to omit or the\n     *  function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object without the omitted properties.\n     * @example\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');\n     * // => { 'name': 'fred' }\n     *\n     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {\n     *   return typeof value == 'number';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function omit(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var props = [];\n        forIn(object, function(value, key) {\n          props.push(key);\n        });\n        props = baseDifference(props, baseFlatten(arguments, true, false, 1));\n\n        var index = -1,\n            length = props.length;\n\n        while (++index < length) {\n          var key = props[index];\n          result[key] = object[key];\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (!callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates a two dimensional array of an object's key-value pairs,\n     * i.e. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'barney': 36, 'fred': 40 });\n     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)\n     */\n    function pairs(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a shallow clone of `object` composed of the specified properties.\n     * Property names may be specified as individual arguments or as arrays of\n     * property names. If a callback is provided it will be executed for each\n     * property of `object` picking the properties the callback returns truey\n     * for. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The source object.\n     * @param {Function|...string|string[]} [callback] The function called per\n     *  iteration or property names to pick, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns an object composed of the picked properties.\n     * @example\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');\n     * // => { 'name': 'fred' }\n     *\n     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {\n     *   return key.charAt(0) != '_';\n     * });\n     * // => { 'name': 'fred' }\n     */\n    function pick(object, callback, thisArg) {\n      var result = {};\n      if (typeof callback != 'function') {\n        var index = -1,\n            props = baseFlatten(arguments, true, false, 1),\n            length = isObject(object) ? props.length : 0;\n\n        while (++index < length) {\n          var key = props[index];\n          if (key in object) {\n            result[key] = object[key];\n          }\n        }\n      } else {\n        callback = lodash.createCallback(callback, thisArg, 3);\n        forIn(object, function(value, key, object) {\n          if (callback(value, key, object)) {\n            result[key] = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * An alternative to `_.reduce` this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable properties through a callback, with each callback execution\n     * potentially mutating the `accumulator` object. The callback is bound to\n     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).\n     * Callbacks may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Array|Object} object The object to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {\n     *   num *= num;\n     *   if (num % 2) {\n     *     return result.push(num) < 3;\n     *   }\n     * });\n     * // => [1, 9, 25]\n     *\n     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     * });\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function transform(object, callback, accumulator, thisArg) {\n      var isArr = isArray(object);\n      if (accumulator == null) {\n        if (isArr) {\n          accumulator = [];\n        } else {\n          var ctor = object && object.constructor,\n              proto = ctor && ctor.prototype;\n\n          accumulator = baseCreate(proto);\n        }\n      }\n      if (callback) {\n        callback = lodash.createCallback(callback, thisArg, 4);\n        (isArr ? forEach : forOwn)(object, function(value, index, object) {\n          return callback(accumulator, value, index, object);\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * Creates an array composed of the own enumerable property values of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Objects\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns an array of property values.\n     * @example\n     *\n     * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => [1, 2, 3] (property order is not guaranteed across environments)\n     */\n    function values(object) {\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements from the specified indexes, or keys, of the\n     * `collection`. Indexes may be specified as individual arguments or as arrays\n     * of indexes.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`\n     *   to retrieve, specified as individual indexes or arrays of indexes.\n     * @returns {Array} Returns a new array of elements corresponding to the\n     *  provided indexes.\n     * @example\n     *\n     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n     * // => ['a', 'c', 'e']\n     *\n     * _.at(['fred', 'barney', 'pebbles'], 0, 2);\n     * // => ['fred', 'pebbles']\n     */\n    function at(collection) {\n      var args = arguments,\n          index = -1,\n          props = baseFlatten(args, true, false, 1),\n          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,\n          result = Array(length);\n\n      while(++index < length) {\n        result[index] = collection[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * Checks if a given value is present in a collection using strict equality\n     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the\n     * offset from the end of the collection.\n     *\n     * @static\n     * @memberOf _\n     * @alias include\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {*} target The value to check for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.\n     * @example\n     *\n     * _.contains([1, 2, 3], 1);\n     * // => true\n     *\n     * _.contains([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');\n     * // => true\n     *\n     * _.contains('pebbles', 'eb');\n     * // => true\n     */\n    function contains(collection, target, fromIndex) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = collection ? collection.length : 0,\n          result = false;\n\n      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n      if (isArray(collection)) {\n        result = indexOf(collection, target, fromIndex) > -1;\n      } else if (typeof length == 'number') {\n        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;\n      } else {\n        forOwn(collection, function(value) {\n          if (++index >= fromIndex) {\n            return !(result = value === target);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through the callback. The corresponding value\n     * of each key is the number of times the key was returned by the callback.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n\n    /**\n     * Checks if the given callback returns truey value for **all** elements of\n     * a collection. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if all elements passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes']);\n     * // => false\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.every(characters, 'age');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.every(characters, { 'age': 36 });\n     * // => false\n     */\n    function every(collection, callback, thisArg) {\n      var result = true;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (!(result = !!callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return (result = !!callback(value, index, collection));\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning an array of all elements\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that passed the callback check.\n     * @example\n     *\n     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [2, 4, 6]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.filter(characters, 'blocked');\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.filter(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     */\n    function filter(collection, callback, thisArg) {\n      var result = [];\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result.push(value);\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, returning the first element that\n     * the callback returns truey for. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect, findWhere\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.find(characters, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => { 'name': 'barney', 'age': 36, 'blocked': false }\n     *\n     * // using \"_.where\" callback shorthand\n     * _.find(characters, { 'age': 1 });\n     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.find(characters, 'blocked');\n     * // => { 'name': 'fred', 'age': 40, 'blocked': true }\n     */\n    function find(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          var value = collection[index];\n          if (callback(value, index, collection)) {\n            return value;\n          }\n        }\n      } else {\n        var result;\n        forOwn(collection, function(value, index, collection) {\n          if (callback(value, index, collection)) {\n            result = value;\n            return false;\n          }\n        });\n        return result;\n      }\n    }\n\n    /**\n     * This method is like `_.find` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the found element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(num) {\n     *   return num % 2 == 1;\n     * });\n     * // => 3\n     */\n    function findLast(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      forEachRight(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result = value;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Iterates over elements of a collection, executing the callback for each\n     * element. The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection). Callbacks may exit iteration early by\n     * explicitly returning `false`.\n     *\n     * Note: As with other \"Collections\" methods, objects with a `length` property\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n     * may be used for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');\n     * // => logs each number and returns '1,2,3'\n     *\n     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });\n     * // => logs each number and returns the object (property order is not guaranteed across environments)\n     */\n    function forEach(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if (callback(collection[index], index, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, callback);\n      }\n      return collection;\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias eachRight\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');\n     * // => logs each number from right to left and returns '3,2,1'\n     */\n    function forEachRight(collection, callback, thisArg) {\n      var length = collection ? collection.length : 0;\n      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        while (length--) {\n          if (callback(collection[length], length, collection) === false) {\n            break;\n          }\n        }\n      } else {\n        var props = keys(collection);\n        length = props.length;\n        forOwn(collection, function(value, key, collection) {\n          key = props ? props[--length] : --length;\n          return callback(collection[key], key, collection);\n        });\n      }\n      return collection;\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of a collection through the callback. The corresponding value\n     * of each key is an array of the elements responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of the collection through the given callback. The corresponding\n     * value of each key is the last element responsible for generating the key.\n     * The callback is bound to `thisArg` and invoked with three arguments;\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var keys = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.indexBy(keys, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     */\n    var indexBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Invokes the method named by `methodName` on each element in the `collection`\n     * returning an array of the results of each invoked method. Additional arguments\n     * will be provided to each invoked method. If `methodName` is a function it\n     * will be invoked for, and `this` bound to, each element in the `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|string} methodName The name of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [arg] Arguments to invoke the method with.\n     * @returns {Array} Returns a new array of the results of each invoked method.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    function invoke(collection, methodName) {\n      var args = slice(arguments, 2),\n          index = -1,\n          isFunc = typeof methodName == 'function',\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an array of values by running each element in the collection\n     * through the callback. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of the results of each `callback` execution.\n     * @example\n     *\n     * _.map([1, 2, 3], function(num) { return num * 3; });\n     * // => [3, 6, 9]\n     *\n     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n     * // => [3, 6, 9] (property order is not guaranteed across environments)\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, callback, thisArg) {\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      if (typeof length == 'number') {\n        var result = Array(length);\n        while (++index < length) {\n          result[index] = callback(collection[index], index, collection);\n        }\n      } else {\n        result = [];\n        forOwn(collection, function(value, key, collection) {\n          result[++index] = callback(value, key, collection);\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the maximum value of a collection. If the collection is empty or\n     * falsey `-Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.max(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'fred', 'age': 40 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.max(characters, 'age');\n     * // => { 'name': 'fred', 'age': 40 };\n     */\n    function max(collection, callback, thisArg) {\n      var computed = -Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value > result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current > computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the minimum value of a collection. If the collection is empty or\n     * falsey `Infinity` is returned. If a callback is provided it will be executed\n     * for each value in the collection to generate the criterion by which the value\n     * is ranked. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.min(characters, function(chr) { return chr.age; });\n     * // => { 'name': 'barney', 'age': 36 };\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.min(characters, 'age');\n     * // => { 'name': 'barney', 'age': 36 };\n     */\n    function min(collection, callback, thisArg) {\n      var computed = Infinity,\n          result = computed;\n\n      // allows working with functions like `_.map` without using\n      // their `index` argument as a callback\n      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {\n        callback = null;\n      }\n      if (callback == null && isArray(collection)) {\n        var index = -1,\n            length = collection.length;\n\n        while (++index < length) {\n          var value = collection[index];\n          if (value < result) {\n            result = value;\n          }\n        }\n      } else {\n        callback = (callback == null && isString(collection))\n          ? charAtCallback\n          : lodash.createCallback(callback, thisArg, 3);\n\n        forEach(collection, function(value, index, collection) {\n          var current = callback(value, index, collection);\n          if (current < computed) {\n            computed = current;\n            result = value;\n          }\n        });\n      }\n      return result;\n    }\n\n    /**\n     * Retrieves the value of a specified property from all elements in the collection.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {string} property The name of the property to pluck.\n     * @returns {Array} Returns a new array of property values.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.pluck(characters, 'name');\n     * // => ['barney', 'fred']\n     */\n    var pluck = map;\n\n    /**\n     * Reduces a collection to a value which is the accumulated result of running\n     * each element in the collection through the callback, where each successive\n     * callback execution consumes the return value of the previous execution. If\n     * `accumulator` is not provided the first element of the collection will be\n     * used as the initial `accumulator` value. The callback is bound to `thisArg`\n     * and invoked with four arguments; (accumulator, value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var sum = _.reduce([1, 2, 3], function(sum, num) {\n     *   return sum + num;\n     * });\n     * // => 6\n     *\n     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n     *   result[key] = num * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6, 'c': 9 }\n     */\n    function reduce(collection, callback, accumulator, thisArg) {\n      if (!collection) return accumulator;\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n\n      var index = -1,\n          length = collection.length;\n\n      if (typeof length == 'number') {\n        if (noaccum) {\n          accumulator = collection[++index];\n        }\n        while (++index < length) {\n          accumulator = callback(accumulator, collection[index], index, collection);\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          accumulator = noaccum\n            ? (noaccum = false, value)\n            : callback(accumulator, value, index, collection)\n        });\n      }\n      return accumulator;\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [callback=identity] The function called per iteration.\n     * @param {*} [accumulator] Initial value of the accumulator.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var list = [[0, 1], [2, 3], [4, 5]];\n     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, callback, accumulator, thisArg) {\n      var noaccum = arguments.length < 3;\n      callback = lodash.createCallback(callback, thisArg, 4);\n      forEachRight(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The opposite of `_.filter` this method returns the elements of a\n     * collection that the callback does **not** return truey for.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of elements that failed the callback check.\n     * @example\n     *\n     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n     * // => [1, 3, 5]\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.reject(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.reject(characters, { 'age': 36 });\n     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]\n     */\n    function reject(collection, callback, thisArg) {\n      callback = lodash.createCallback(callback, thisArg, 3);\n      return filter(collection, function(value, index, collection) {\n        return !callback(value, index, collection);\n      });\n    }\n\n    /**\n     * Retrieves a random element or `n` random elements from a collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to sample.\n     * @param {number} [n] The number of elements to sample.\n     * @param- {Object} [guard] Allows working with functions like `_.map`\n     *  without using their `index` arguments as `n`.\n     * @returns {Array} Returns the random sample(s) of `collection`.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     *\n     * _.sample([1, 2, 3, 4], 2);\n     * // => [3, 1]\n     */\n    function sample(collection, n, guard) {\n      if (collection && typeof collection.length != 'number') {\n        collection = values(collection);\n      }\n      if (n == null || guard) {\n        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;\n      }\n      var result = shuffle(collection);\n      result.length = nativeMin(nativeMax(0, n), result.length);\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the Fisher-Yates\n     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to shuffle.\n     * @returns {Array} Returns a new shuffled collection.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4, 5, 6]);\n     * // => [4, 1, 6, 3, 5, 2]\n     */\n    function shuffle(collection) {\n      var index = -1,\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      forEach(collection, function(value) {\n        var rand = baseRandom(0, ++index);\n        result[index] = result[rand];\n        result[rand] = value;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the size of the `collection` by returning `collection.length` for arrays\n     * and array-like objects or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns `collection.length` or number of own enumerable properties.\n     * @example\n     *\n     * _.size([1, 2]);\n     * // => 2\n     *\n     * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n     * // => 3\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      var length = collection ? collection.length : 0;\n      return typeof length == 'number' ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if the callback returns a truey value for **any** element of a\n     * collection. The function returns as soon as it finds a passing value and\n     * does not iterate over the entire collection. The callback is bound to\n     * `thisArg` and invoked with three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {boolean} Returns `true` if any element passed the callback check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'blocked': false },\n     *   { 'name': 'fred',   'age': 40, 'blocked': true }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.some(characters, 'blocked');\n     * // => true\n     *\n     * // using \"_.where\" callback shorthand\n     * _.some(characters, { 'age': 1 });\n     * // => false\n     */\n    function some(collection, callback, thisArg) {\n      var result;\n      callback = lodash.createCallback(callback, thisArg, 3);\n\n      var index = -1,\n          length = collection ? collection.length : 0;\n\n      if (typeof length == 'number') {\n        while (++index < length) {\n          if ((result = callback(collection[index], index, collection))) {\n            break;\n          }\n        }\n      } else {\n        forOwn(collection, function(value, index, collection) {\n          return !(result = callback(value, index, collection));\n        });\n      }\n      return !!result;\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection through the callback. This method\n     * performs a stable sort, that is, it will preserve the original sort order\n     * of equal elements. The callback is bound to `thisArg` and invoked with\n     * three arguments; (value, index|key, collection).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an array of property names is provided for `callback` the collection\n     * will be sorted by each property value.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of sorted elements.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n     * // => [3, 1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'barney',  'age': 26 },\n     *   { 'name': 'fred',    'age': 30 }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.map(_.sortBy(characters, 'age'), _.values);\n     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]\n     *\n     * // sorting by multiple properties\n     * _.map(_.sortBy(characters, ['name', 'age']), _.values);\n     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]\n     */\n    function sortBy(collection, callback, thisArg) {\n      var index = -1,\n          isArr = isArray(callback),\n          length = collection ? collection.length : 0,\n          result = Array(typeof length == 'number' ? length : 0);\n\n      if (!isArr) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      forEach(collection, function(value, key, collection) {\n        var object = result[++index] = getObject();\n        if (isArr) {\n          object.criteria = map(callback, function(key) { return value[key]; });\n        } else {\n          (object.criteria = getArray())[0] = callback(value, key, collection);\n        }\n        object.index = index;\n        object.value = value;\n      });\n\n      length = result.length;\n      result.sort(compareAscending);\n      while (length--) {\n        var object = result[length];\n        result[length] = object.value;\n        if (!isArr) {\n          releaseArray(object.criteria);\n        }\n        releaseObject(object);\n      }\n      return result;\n    }\n\n    /**\n     * Converts the `collection` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to convert.\n     * @returns {Array} Returns the new converted array.\n     * @example\n     *\n     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n     * // => [2, 3, 4]\n     */\n    function toArray(collection) {\n      if (collection && typeof collection.length == 'number') {\n        return slice(collection);\n      }\n      return values(collection);\n    }\n\n    /**\n     * Performs a deep comparison of each element in a `collection` to the given\n     * `properties` object, returning an array of all elements that have equivalent\n     * property values.\n     *\n     * @static\n     * @memberOf _\n     * @type Function\n     * @category Collections\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Object} props The object of property values to filter by.\n     * @returns {Array} Returns a new array of elements that have the given properties.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * _.where(characters, { 'age': 36 });\n     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]\n     *\n     * _.where(characters, { 'pets': ['dino'] });\n     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]\n     */\n    var where = filter;\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are all falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array excluding all values of the provided arrays using strict\n     * equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {...Array} [values] The arrays of values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n     * // => [1, 3, 4]\n     */\n    function difference(array) {\n      return baseDifference(array, baseFlatten(arguments, true, true, 1));\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element that passes the callback check, instead of the element itself.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': false },\n     *   { 'name': 'fred',    'age': 40, 'blocked': true },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }\n     * ];\n     *\n     * _.findIndex(characters, function(chr) {\n     *   return chr.age < 20;\n     * });\n     * // => 2\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findIndex(characters, 'blocked');\n     * // => 1\n     */\n    function findIndex(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0;\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        if (callback(array[index], index, array)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of a `collection` from right to left.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36, 'blocked': true },\n     *   { 'name': 'fred',    'age': 40, 'blocked': false },\n     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }\n     * ];\n     *\n     * _.findLastIndex(characters, function(chr) {\n     *   return chr.age > 30;\n     * });\n     * // => 1\n     *\n     * // using \"_.where\" callback shorthand\n     * _.findLastIndex(characters, { 'age': 36 });\n     * // => 0\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.findLastIndex(characters, 'blocked');\n     * // => 2\n     */\n    function findLastIndex(array, callback, thisArg) {\n      var length = array ? array.length : 0;\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (length--) {\n        if (callback(array[length], length, array)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Gets the first element or first `n` elements of an array. If a callback\n     * is provided elements at the beginning of the array are returned as long\n     * as the callback returns truey. The callback is bound to `thisArg` and\n     * invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head, take\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the first element(s) of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.first([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.first(characters, 'blocked');\n     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function first(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[0] : undefined;\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n\n    /**\n     * Flattens a nested array (the nesting can be to any depth). If `isShallow`\n     * is truey, the array will only be flattened a single level. If a callback\n     * is provided each element of the array is passed through the callback before\n     * flattening. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2], [3, [[4]]]]);\n     * // => [1, 2, 3, 4];\n     *\n     * _.flatten([1, [2], [3, [[4]]]], true);\n     * // => [1, 2, 3, [[4]]];\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },\n     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.flatten(characters, 'pets');\n     * // => ['hoppy', 'baby puss', 'dino']\n     */\n    function flatten(array, isShallow, callback, thisArg) {\n      // juggle arguments\n      if (typeof isShallow != 'boolean' && isShallow != null) {\n        thisArg = callback;\n        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;\n        isShallow = false;\n      }\n      if (callback != null) {\n        array = map(array, callback, thisArg);\n      }\n      return baseFlatten(array, isShallow);\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found using\n     * strict equality for comparisons, i.e. `===`. If the array is already sorted\n     * providing `true` for `fromIndex` will run a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n     *  to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 1\n     *\n     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 4\n     *\n     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      if (typeof fromIndex == 'number') {\n        var length = array ? array.length : 0;\n        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);\n      } else if (fromIndex) {\n        var index = sortedIndex(array, value);\n        return array[index] === value ? index : -1;\n      }\n      return baseIndexOf(array, value, fromIndex);\n    }\n\n    /**\n     * Gets all but the last element or last `n` elements of an array. If a\n     * callback is provided elements at the end of the array are excluded from\n     * the result as long as the callback returns truey. The callback is bound\n     * to `thisArg` and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.initial([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.initial([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [1]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.initial(characters, 'blocked');\n     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]\n     *\n     * // using \"_.where\" callback shorthand\n     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');\n     * // => ['barney', 'fred']\n     */\n    function initial(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : callback || n;\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n    }\n\n    /**\n     * Creates an array of unique values present in all provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of shared values.\n     * @example\n     *\n     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2]\n     */\n    function intersection() {\n      var args = [],\n          argsIndex = -1,\n          argsLength = arguments.length,\n          caches = getArray(),\n          indexOf = getIndexOf(),\n          trustIndexOf = indexOf === baseIndexOf,\n          seen = getArray();\n\n      while (++argsIndex < argsLength) {\n        var value = arguments[argsIndex];\n        if (isArray(value) || isArguments(value)) {\n          args.push(value);\n          caches.push(trustIndexOf && value.length >= largeArraySize &&\n            createCache(argsIndex ? args[argsIndex] : seen));\n        }\n      }\n      var array = args[0],\n          index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      outer:\n      while (++index < length) {\n        var cache = caches[0];\n        value = array[index];\n\n        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {\n          argsIndex = argsLength;\n          (cache || seen).push(value);\n          while (--argsIndex) {\n            cache = caches[argsIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n      }\n      while (argsLength--) {\n        cache = caches[argsLength];\n        if (cache) {\n          releaseObject(cache);\n        }\n      }\n      releaseArray(caches);\n      releaseArray(seen);\n      return result;\n    }\n\n    /**\n     * Gets the last element or last `n` elements of an array. If a callback is\n     * provided elements at the end of the array are returned as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback] The function called\n     *  per element or the number of elements to return. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {*} Returns the last element(s) of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     *\n     * _.last([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.last([1, 2, 3], function(num) {\n     *   return num > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.last(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.last(characters, { 'employer': 'na' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function last(array, callback, thisArg) {\n      var n = 0,\n          length = array ? array.length : 0;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array ? array[length - 1] : undefined;\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n\n    /**\n     * Gets the index at which the last occurrence of `value` is found using strict\n     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n     * as the offset from the end of the collection.\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value or `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n     * // => 4\n     *\n     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var index = array ? array.length : 0;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Removes all provided values from the given array using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {...*} [value] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3, 1, 2, 3];\n     * _.pull(array, 2, 3);\n     * console.log(array);\n     * // => [1, 1]\n     */\n    function pull(array) {\n      var args = arguments,\n          argsIndex = 0,\n          argsLength = args.length,\n          length = array ? array.length : 0;\n\n      while (++argsIndex < argsLength) {\n        var index = -1,\n            value = args[argsIndex];\n        while (++index < length) {\n          if (array[index] === value) {\n            splice.call(array, index--, 1);\n            length--;\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to but not including `end`. If `start` is less than `stop` a\n     * zero-length range is created unless a negative `step` is specified.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns a new range array.\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      start = +start || 0;\n      step = typeof step == 'number' ? step : (+step || 1);\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      }\n      // use `Array(length)` so engines like Chakra and V8 avoid slower modes\n      // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n      var index = -1,\n          length = nativeMax(0, ceil((end - start) / (step || 1))),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * Removes all elements from an array that the callback returns truey for\n     * and returns an array of removed elements. The callback is bound to `thisArg`\n     * and invoked with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to modify.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4, 5, 6];\n     * var evens = _.remove(array, function(num) { return num % 2 == 0; });\n     *\n     * console.log(array);\n     * // => [1, 3, 5]\n     *\n     * console.log(evens);\n     * // => [2, 4, 6]\n     */\n    function remove(array, callback, thisArg) {\n      var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n      callback = lodash.createCallback(callback, thisArg, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (callback(value, index, array)) {\n          result.push(value);\n          splice.call(array, index--, 1);\n          length--;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.initial` this method gets all but the first element or\n     * first `n` elements of an array. If a callback function is provided elements\n     * at the beginning of the array are excluded from the result as long as the\n     * callback returns truey. The callback is bound to `thisArg` and invoked\n     * with three arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias drop, tail\n     * @category Arrays\n     * @param {Array} array The array to query.\n     * @param {Function|Object|number|string} [callback=1] The function called\n     *  per element or the number of elements to exclude. If a property name or\n     *  object is provided it will be used to create a \"_.pluck\" or \"_.where\"\n     *  style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.rest([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.rest([1, 2, 3], function(num) {\n     *   return num < 3;\n     * });\n     * // => [3]\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },\n     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },\n     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }\n     * ];\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.pluck(_.rest(characters, 'blocked'), 'name');\n     * // => ['fred', 'pebbles']\n     *\n     * // using \"_.where\" callback shorthand\n     * _.rest(characters, { 'employer': 'slate' });\n     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]\n     */\n    function rest(array, callback, thisArg) {\n      if (typeof callback != 'number' && callback != null) {\n        var n = 0,\n            index = -1,\n            length = array ? array.length : 0;\n\n        callback = lodash.createCallback(callback, thisArg, 3);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n      }\n      return slice(array, n);\n    }\n\n    /**\n     * Uses a binary search to determine the smallest index at which a value\n     * should be inserted into a given sorted array in order to maintain the sort\n     * order of the array. If a callback is provided it will be executed for\n     * `value` and each element of `array` to compute their sort ranking. The\n     * callback is bound to `thisArg` and invoked with one argument; (value).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([20, 30, 50], 40);\n     * // => 2\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 2\n     *\n     * var dict = {\n     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n     * };\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return dict.wordToNumber[word];\n     * });\n     * // => 2\n     *\n     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n     *   return this.wordToNumber[word];\n     * }, dict);\n     * // => 2\n     */\n    function sortedIndex(array, value, callback, thisArg) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      // explicitly reference `identity` for better inlining in Firefox\n      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;\n      value = callback(value);\n\n      while (low < high) {\n        var mid = (low + high) >>> 1;\n        (callback(array[mid]) < value)\n          ? low = mid + 1\n          : high = mid;\n      }\n      return low;\n    }\n\n    /**\n     * Creates an array of unique values, in order, of the provided arrays using\n     * strict equality for comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of combined values.\n     * @example\n     *\n     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);\n     * // => [1, 2, 3, 5, 4]\n     */\n    function union() {\n      return baseUniq(baseFlatten(arguments, true, true));\n    }\n\n    /**\n     * Creates a duplicate-value-free version of an array using strict equality\n     * for comparisons, i.e. `===`. If the array is sorted, providing\n     * `true` for `isSorted` will use a faster algorithm. If a callback is provided\n     * each element of `array` is passed through the callback before uniqueness\n     * is computed. The callback is bound to `thisArg` and invoked with three\n     * arguments; (value, index, array).\n     *\n     * If a property name is provided for `callback` the created \"_.pluck\" style\n     * callback will return the property value of the given element.\n     *\n     * If an object is provided for `callback` the created \"_.where\" style callback\n     * will return `true` for elements that have the properties of the given object,\n     * else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Arrays\n     * @param {Array} array The array to process.\n     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.\n     * @param {Function|Object|string} [callback=identity] The function called\n     *  per iteration. If a property name or object is provided it will be used\n     *  to create a \"_.pluck\" or \"_.where\" style callback, respectively.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns a duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([1, 2, 1, 3, 1]);\n     * // => [1, 2, 3]\n     *\n     * _.uniq([1, 1, 2, 2, 3], true);\n     * // => [1, 2, 3]\n     *\n     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });\n     * // => ['A', 'b', 'C']\n     *\n     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);\n     * // => [1, 2.5, 3]\n     *\n     * // using \"_.pluck\" callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniq(array, isSorted, callback, thisArg) {\n      // juggle arguments\n      if (typeof isSorted != 'boolean' && isSorted != null) {\n        thisArg = callback;\n        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;\n        isSorted = false;\n      }\n      if (callback != null) {\n        callback = lodash.createCallback(callback, thisArg, 3);\n      }\n      return baseUniq(array, isSorted, callback);\n    }\n\n    /**\n     * Creates an array excluding all provided values using strict equality for\n     * comparisons, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {Array} array The array to filter.\n     * @param {...*} [value] The values to exclude.\n     * @returns {Array} Returns a new array of filtered values.\n     * @example\n     *\n     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n     * // => [2, 3, 4]\n     */\n    function without(array) {\n      return baseDifference(array, slice(arguments, 1));\n    }\n\n    /**\n     * Creates an array that is the symmetric difference of the provided arrays.\n     * See http://en.wikipedia.org/wiki/Symmetric_difference.\n     *\n     * @static\n     * @memberOf _\n     * @category Arrays\n     * @param {...Array} [array] The arrays to inspect.\n     * @returns {Array} Returns an array of values.\n     * @example\n     *\n     * _.xor([1, 2, 3], [5, 2, 1, 4]);\n     * // => [3, 5, 4]\n     *\n     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);\n     * // => [1, 4, 5]\n     */\n    function xor() {\n      var index = -1,\n          length = arguments.length;\n\n      while (++index < length) {\n        var array = arguments[index];\n        if (isArray(array) || isArguments(array)) {\n          var result = result\n            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))\n            : array;\n        }\n      }\n      return result || [];\n    }\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the first\n     * elements of the given arrays, the second of which contains the second\n     * elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @alias unzip\n     * @category Arrays\n     * @param {...Array} [array] Arrays to process.\n     * @returns {Array} Returns a new array of grouped elements.\n     * @example\n     *\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     */\n    function zip() {\n      var array = arguments.length > 1 ? arguments : arguments[0],\n          index = -1,\n          length = array ? max(pluck(array, 'length')) : 0,\n          result = Array(length < 0 ? 0 : length);\n\n      while (++index < length) {\n        result[index] = pluck(array, index);\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed from arrays of `keys` and `values`. Provide\n     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`\n     * or two arrays, one of `keys` and one of corresponding `values`.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Arrays\n     * @param {Array} keys The array of keys.\n     * @param {Array} [values=[]] The array of values.\n     * @returns {Object} Returns an object composed of the given keys and\n     *  corresponding values.\n     * @example\n     *\n     * _.zipObject(['fred', 'barney'], [30, 40]);\n     * // => { 'fred': 30, 'barney': 40 }\n     */\n    function zipObject(keys, values) {\n      var index = -1,\n          length = keys ? keys.length : 0,\n          result = {};\n\n      if (!values && length && !isArray(keys[0])) {\n        values = [];\n      }\n      while (++index < length) {\n        var key = keys[index];\n        if (values) {\n          result[key] = values[index];\n        } else if (key) {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that executes `func`, with  the `this` binding and\n     * arguments of the created function, only after being called `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {number} n The number of times the function must be called before\n     *  `func` is executed.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('Done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => logs 'Done saving!', after all saves have completed\n     */\n    function after(n, func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with the `this`\n     * binding of `thisArg` and prepends any additional `bind` arguments to those\n     * provided to the bound function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to bind.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var func = function(greeting) {\n     *   return greeting + ' ' + this.name;\n     * };\n     *\n     * func = _.bind(func, { 'name': 'fred' }, 'hi');\n     * func();\n     * // => 'hi fred'\n     */\n    function bind(func, thisArg) {\n      return arguments.length > 2\n        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)\n        : createWrapper(func, 1, null, null, thisArg);\n    }\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method. Method names may be specified as individual arguments or as arrays\n     * of method names. If no method names are provided all the function properties\n     * of `object` will be bound.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...string} [methodName] The object method names to\n     *  bind, specified as individual method names or arrays of method names.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'onClick': function() { console.log('clicked ' + this.label); }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => logs 'clicked docs', when the button is clicked\n     */\n    function bindAll(object) {\n      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),\n          index = -1,\n          length = funcs.length;\n\n      while (++index < length) {\n        var key = funcs[index];\n        object[key] = createWrapper(object[key], 1, null, null, object);\n      }\n      return object;\n    }\n\n    /**\n     * Creates a function that, when called, invokes the method at `object[key]`\n     * and prepends any additional `bindKey` arguments to those provided to the bound\n     * function. This method differs from `_.bind` by allowing bound functions to\n     * reference methods that will be redefined or don't yet exist.\n     * See http://michaux.ca/articles/lazy-function-definition-pattern.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Object} object The object the method belongs to.\n     * @param {string} key The key of the method.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'name': 'fred',\n     *   'greet': function(greeting) {\n     *     return greeting + ' ' + this.name;\n     *   }\n     * };\n     *\n     * var func = _.bindKey(object, 'greet', 'hi');\n     * func();\n     * // => 'hi fred'\n     *\n     * object.greet = function(greeting) {\n     *   return greeting + 'ya ' + this.name + '!';\n     * };\n     *\n     * func();\n     * // => 'hiya fred!'\n     */\n    function bindKey(object, key) {\n      return arguments.length > 2\n        ? createWrapper(key, 19, slice(arguments, 2), null, object)\n        : createWrapper(key, 3, null, null, object);\n    }\n\n    /**\n     * Creates a function that is the composition of the provided functions,\n     * where each function consumes the return value of the function that follows.\n     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {...Function} [func] Functions to compose.\n     * @returns {Function} Returns the new composed function.\n     * @example\n     *\n     * var realNameMap = {\n     *   'pebbles': 'penelope'\n     * };\n     *\n     * var format = function(name) {\n     *   name = realNameMap[name.toLowerCase()] || name;\n     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n     * };\n     *\n     * var greet = function(formatted) {\n     *   return 'Hiya ' + formatted + '!';\n     * };\n     *\n     * var welcome = _.compose(greet, format);\n     * welcome('pebbles');\n     * // => 'Hiya Penelope!'\n     */\n    function compose() {\n      var funcs = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        if (!isFunction(funcs[length])) {\n          throw new TypeError;\n        }\n      }\n      return function() {\n        var args = arguments,\n            length = funcs.length;\n\n        while (length--) {\n          args = [funcs[length].apply(this, args)];\n        }\n        return args[0];\n      };\n    }\n\n    /**\n     * Creates a function which accepts one or more arguments of `func` that when\n     * invoked either executes `func` returning its result, if all `func` arguments\n     * have been provided, or returns a function that accepts one or more of the\n     * remaining `func` arguments, and so on. The arity of `func` can be specified\n     * if `func.length` is not sufficient.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var curried = _.curry(function(a, b, c) {\n     *   console.log(a + b + c);\n     * });\n     *\n     * curried(1)(2)(3);\n     * // => 6\n     *\n     * curried(1, 2)(3);\n     * // => 6\n     *\n     * curried(1, 2, 3);\n     * // => 6\n     */\n    function curry(func, arity) {\n      arity = typeof arity == 'number' ? arity : (+arity || func.length);\n      return createWrapper(func, 4, null, null, null, arity);\n    }\n\n    /**\n     * Creates a function that will delay the execution of `func` until after\n     * `wait` milliseconds have elapsed since the last time it was invoked.\n     * Provide an options object to indicate that `func` should be invoked on\n     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls\n     * to the debounced function will return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to debounce.\n     * @param {number} wait The number of milliseconds to delay.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // avoid costly calculations while the window size is in flux\n     * var lazyLayout = _.debounce(calculateLayout, 150);\n     * jQuery(window).on('resize', lazyLayout);\n     *\n     * // execute `sendMail` when the click event is fired, debouncing subsequent calls\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * });\n     *\n     * // ensure `batchLog` is executed once after 1 second of debounced calls\n     * var source = new EventSource('/stream');\n     * source.addEventListener('message', _.debounce(batchLog, 250, {\n     *   'maxWait': 1000\n     * }, false);\n     */\n    function debounce(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      wait = nativeMax(0, wait) || 0;\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = options.leading;\n        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      var delayed = function() {\n        var remaining = wait - (now() - stamp);\n        if (remaining <= 0) {\n          if (maxTimeoutId) {\n            clearTimeout(maxTimeoutId);\n          }\n          var isCalled = trailingCall;\n          maxTimeoutId = timeoutId = trailingCall = undefined;\n          if (isCalled) {\n            lastCalled = now();\n            result = func.apply(thisArg, args);\n            if (!timeoutId && !maxTimeoutId) {\n              args = thisArg = null;\n            }\n          }\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      };\n\n      var maxDelayed = function() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (trailing || (maxWait !== wait)) {\n          lastCalled = now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = null;\n          }\n        }\n      };\n\n      return function() {\n        args = arguments;\n        stamp = now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = null;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Defers executing the `func` function until the current call stack has cleared.\n     * Additional arguments will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to defer.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) { console.log(text); }, 'deferred');\n     * // logs 'deferred' after one or more milliseconds\n     */\n    function defer(func) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 1);\n      return setTimeout(function() { func.apply(undefined, args); }, 1);\n    }\n\n    /**\n     * Executes the `func` function after `wait` milliseconds. Additional arguments\n     * will be provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay execution.\n     * @param {...*} [arg] Arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) { console.log(text); }, 1000, 'later');\n     * // => logs 'later' after one second\n     */\n    function delay(func, wait) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var args = slice(arguments, 2);\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided it will be used to determine the cache key for storing the result\n     * based on the arguments provided to the memoized function. By default, the\n     * first argument provided to the memoized function is used as the cache key.\n     * The `func` is executed with the `this` binding of the memoized function.\n     * The result cache is exposed as the `cache` property on the memoized function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] A function used to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var fibonacci = _.memoize(function(n) {\n     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n     * });\n     *\n     * fibonacci(9)\n     * // => 34\n     *\n     * var data = {\n     *   'fred': { 'name': 'fred', 'age': 40 },\n     *   'pebbles': { 'name': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // modifying the result cache\n     * var get = _.memoize(function(name) { return data[name]; }, _.identity);\n     * get('pebbles');\n     * // => { 'name': 'pebbles', 'age': 1 }\n     *\n     * get.cache.pebbles.name = 'penelope';\n     * get('pebbles');\n     * // => { 'name': 'penelope', 'age': 1 }\n     */\n    function memoize(func, resolver) {\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      var memoized = function() {\n        var cache = memoized.cache,\n            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];\n\n        return hasOwnProperty.call(cache, key)\n          ? cache[key]\n          : (cache[key] = func.apply(this, arguments));\n      }\n      memoized.cache = {};\n      return memoized;\n    }\n\n    /**\n     * Creates a function that is restricted to execute `func` once. Repeat calls to\n     * the function will return the value of the first call. The `func` is executed\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` executes `createApplication` once\n     */\n    function once(func) {\n      var ran,\n          result;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      return function() {\n        if (ran) {\n          return result;\n        }\n        ran = true;\n        result = func.apply(this, arguments);\n\n        // clear the `func` variable so the function may be garbage collected\n        func = null;\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that, when called, invokes `func` with any additional\n     * `partial` arguments prepended to those provided to the new function. This\n     * method is similar to `_.bind` except it does **not** alter the `this` binding.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) { return greeting + ' ' + name; };\n     * var hi = _.partial(greet, 'hi');\n     * hi('fred');\n     * // => 'hi fred'\n     */\n    function partial(func) {\n      return createWrapper(func, 16, slice(arguments, 1));\n    }\n\n    /**\n     * This method is like `_.partial` except that `partial` arguments are\n     * appended to those provided to the new function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [arg] Arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n     *\n     * var options = {\n     *   'variable': 'data',\n     *   'imports': { 'jq': $ }\n     * };\n     *\n     * defaultsDeep(options, _.templateSettings);\n     *\n     * options.variable\n     * // => 'data'\n     *\n     * options.imports\n     * // => { '_': _, 'jq': $ }\n     */\n    function partialRight(func) {\n      return createWrapper(func, 32, null, slice(arguments, 1));\n    }\n\n    /**\n     * Creates a function that, when executed, will only call the `func` function\n     * at most once per every `wait` milliseconds. Provide an options object to\n     * indicate that `func` should be invoked on the leading and/or trailing edge\n     * of the `wait` timeout. Subsequent calls to the throttled function will\n     * return the result of the last `func` call.\n     *\n     * Note: If `leading` and `trailing` options are `true` `func` will be called\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {Function} func The function to throttle.\n     * @param {number} wait The number of milliseconds to throttle executions to.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // avoid excessively updating the position while scrolling\n     * var throttled = _.throttle(updatePosition, 100);\n     * jQuery(window).on('scroll', throttled);\n     *\n     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (!isFunction(func)) {\n        throw new TypeError;\n      }\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? options.leading : leading;\n        trailing = 'trailing' in options ? options.trailing : trailing;\n      }\n      debounceOptions.leading = leading;\n      debounceOptions.maxWait = wait;\n      debounceOptions.trailing = trailing;\n\n      return debounce(func, wait, debounceOptions);\n    }\n\n    /**\n     * Creates a function that provides `value` to the wrapper function as its\n     * first argument. Additional arguments provided to the function are appended\n     * to those provided to the wrapper function. The wrapper is executed with\n     * the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Functions\n     * @param {*} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('Fred, Wilma, & Pebbles');\n     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return createWrapper(wrapper, 16, [value]);\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * var getter = _.constant(object);\n     * getter() === object;\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Produces a callback bound to an optional `thisArg`. If `func` is a property\n     * name the created callback will return the property value for a given element.\n     * If `func` is an object the created callback will return `true` for elements\n     * that contain the equivalent object properties, otherwise it will return `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} [func=identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of the created callback.\n     * @param {number} [argCount] The number of arguments the callback accepts.\n     * @returns {Function} Returns a callback function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);\n     *   return !match ? func(callback, thisArg) : function(object) {\n     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(characters, 'age__gt38');\n     * // => [{ 'name': 'fred', 'age': 40 }]\n     */\n    function createCallback(func, thisArg, argCount) {\n      var type = typeof func;\n      if (func == null || type == 'function') {\n        return baseCreateCallback(func, thisArg, argCount);\n      }\n      // handle \"_.pluck\" style callback shorthands\n      if (type != 'object') {\n        return property(func);\n      }\n      var props = keys(func),\n          key = props[0],\n          a = func[key];\n\n      // handle \"_.where\" style callback shorthands\n      if (props.length == 1 && a === a && !isObject(a)) {\n        // fast path the common case of providing an object with a single\n        // property containing a primitive value\n        return function(object) {\n          var b = object[key];\n          return a === b && (a !== 0 || (1 / a == 1 / b));\n        };\n      }\n      return function(object) {\n        var length = props.length,\n            result = false;\n\n        while (length--) {\n          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n     * corresponding HTML entities.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('Fred, Wilma, & Pebbles');\n     * // => 'Fred, Wilma, &amp; Pebbles'\n     */\n    function escape(string) {\n      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);\n    }\n\n    /**\n     * This method returns the first argument provided to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.identity(object) === object;\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Adds function properties of a source object to the destination object.\n     * If `object` is a function methods will be added to its prototype as well.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Function|Object} [object=lodash] object The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.\n     * @example\n     *\n     * function capitalize(string) {\n     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n     * }\n     *\n     * _.mixin({ 'capitalize': capitalize });\n     * _.capitalize('fred');\n     * // => 'Fred'\n     *\n     * _('fred').capitalize().value();\n     * // => 'Fred'\n     *\n     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });\n     * _('fred').capitalize();\n     * // => 'Fred'\n     */\n    function mixin(object, source, options) {\n      var chain = true,\n          methodNames = source && functions(source);\n\n      if (!source || (!options && !methodNames.length)) {\n        if (options == null) {\n          options = source;\n        }\n        ctor = lodashWrapper;\n        source = object;\n        object = lodash;\n        methodNames = functions(source);\n      }\n      if (options === false) {\n        chain = false;\n      } else if (isObject(options) && 'chain' in options) {\n        chain = options.chain;\n      }\n      var ctor = object,\n          isFunc = isFunction(ctor);\n\n      forEach(methodNames, function(methodName) {\n        var func = object[methodName] = source[methodName];\n        if (isFunc) {\n          ctor.prototype[methodName] = function() {\n            var chainAll = this.__chain__,\n                value = this.__wrapped__,\n                args = [value];\n\n            push.apply(args, arguments);\n            var result = func.apply(object, args);\n            if (chain || chainAll) {\n              if (value === result && isObject(result)) {\n                return this;\n              }\n              result = new ctor(result);\n              result.__chain__ = chainAll;\n            }\n            return result;\n          };\n        }\n      });\n    }\n\n    /**\n     * Reverts the '_' variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      context._ = oldDash;\n      return this;\n    }\n\n    /**\n     * A no-operation function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var object = { 'name': 'fred' };\n     * _.noop(object) === undefined;\n     * // => true\n     */\n    function noop() {\n      // no operation performed\n    }\n\n    /**\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\n     * (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @example\n     *\n     * var stamp = _.now();\n     * _.defer(function() { console.log(_.now() - stamp); });\n     * // => logs the number of milliseconds it took for the deferred function to be called\n     */\n    var now = isNative(now = Date.now) && now || function() {\n      return new Date().getTime();\n    };\n\n    /**\n     * Converts the given value into an integer of the specified radix.\n     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the\n     * `value` is a hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * Note: This method avoids differences in native ES3 and ES5 `parseInt`\n     * implementations. See http://es5.github.io/#E.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} value The value to parse.\n     * @param {number} [radix] The radix used to interpret the value to parse.\n     * @returns {number} Returns the new integer value.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     */\n    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {\n      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`\n      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);\n    };\n\n    /**\n     * Creates a \"_.pluck\" style function, which returns the `key` value of a\n     * given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} key The name of the property to retrieve.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'fred',   'age': 40 },\n     *   { 'name': 'barney', 'age': 36 }\n     * ];\n     *\n     * var getName = _.property('name');\n     *\n     * _.map(characters, getName);\n     * // => ['barney', 'fred']\n     *\n     * _.sortBy(characters, getName);\n     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]\n     */\n    function property(key) {\n      return function(object) {\n        return object[key];\n      };\n    }\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is provided a number between `0` and the given number will be\n     * returned. If `floating` is truey or either `min` or `max` are floats a\n     * floating-point number will be returned instead of an integer.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} [min=0] The minimum possible value.\n     * @param {number} [max=1] The maximum possible value.\n     * @param {boolean} [floating=false] Specify returning a floating-point number.\n     * @returns {number} Returns a random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(min, max, floating) {\n      var noMin = min == null,\n          noMax = max == null;\n\n      if (floating == null) {\n        if (typeof min == 'boolean' && noMax) {\n          floating = min;\n          min = 1;\n        }\n        else if (!noMax && typeof max == 'boolean') {\n          floating = max;\n          noMax = true;\n        }\n      }\n      if (noMin && noMax) {\n        max = 1;\n      }\n      min = +min || 0;\n      if (noMax) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      if (floating || min % 1 || max % 1) {\n        var rand = nativeRandom();\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);\n      }\n      return baseRandom(min, max);\n    }\n\n    /**\n     * Resolves the value of property `key` on `object`. If `key` is a function\n     * it will be invoked with the `this` binding of `object` and its result returned,\n     * else the property value is returned. If `object` is falsey then `undefined`\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {Object} object The object to inspect.\n     * @param {string} key The name of the property to resolve.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = {\n     *   'cheese': 'crumpets',\n     *   'stuff': function() {\n     *     return 'nonsense';\n     *   }\n     * };\n     *\n     * _.result(object, 'cheese');\n     * // => 'crumpets'\n     *\n     * _.result(object, 'stuff');\n     * // => 'nonsense'\n     */\n    function result(object, key) {\n      if (object) {\n        var value = object[key];\n        return isFunction(value) ? object[key]() : value;\n      }\n    }\n\n    /**\n     * A micro-templating method that handles arbitrary delimiters, preserves\n     * whitespace, and correctly escapes quotes within interpolated code.\n     *\n     * Note: In the development build, `_.template` utilizes sourceURLs for easier\n     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n     *\n     * For more information on precompiling templates see:\n     * https://lodash.com/custom-builds\n     *\n     * For more information on Chrome extension sandboxes see:\n     * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} text The template text.\n     * @param {Object} data The data object used to populate the text.\n     * @param {Object} [options] The options object.\n     * @param {RegExp} [options.escape] The \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n     * @param {Object} [options.imports] An object to import into the template as local variables.\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n     * @param {string} [sourceURL] The sourceURL of the template's compiled source.\n     * @param {string} [variable] The data object variable name.\n     * @returns {Function|string} Returns a compiled function when no `data` object\n     *  is given, else it returns the interpolated text.\n     * @example\n     *\n     * // using the \"interpolate\" delimiter to create a compiled template\n     * var compiled = _.template('hello <%= name %>');\n     * compiled({ 'name': 'fred' });\n     * // => 'hello fred'\n     *\n     * // using the \"escape\" delimiter to escape HTML in data property values\n     * _.template('<b><%- value %></b>', { 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the \"evaluate\" delimiter to generate HTML\n     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n     * _.template('hello ${ name }', { 'name': 'pebbles' });\n     * // => 'hello pebbles'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * _.template('<% print(\"hello \" + name); %>!', { 'name': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // using a custom template delimiters\n     * _.templateSettings = {\n     *   'interpolate': /{{([\\s\\S]+?)}}/g\n     * };\n     *\n     * _.template('hello {{ name }}!', { 'name': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using the `imports` option to import jQuery\n     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';\n     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     *   var __t, __p = '', __e = _.escape;\n     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n     *   return __p;\n     * }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(text, data, options) {\n      // based on John Resig's `tmpl` implementation\n      // http://ejohn.org/blog/javascript-micro-templating/\n      // and Laura Doktorova's doT.js\n      // https://github.com/olado/doT\n      var settings = lodash.templateSettings;\n      text = String(text || '');\n\n      // avoid missing dependencies when `iteratorTemplate` is not defined\n      options = defaults({}, options, settings);\n\n      var imports = defaults({}, options.imports, settings.imports),\n          importsKeys = keys(imports),\n          importsValues = values(imports);\n\n      var isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // compile the regexp to match each delimiter\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // escape characters that cannot be included in string literals\n        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // replace delimiters with snippets\n        if (escapeValue) {\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // the JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // if `variable` is not specified, wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain\n      var variable = options.variable,\n          hasVariable = variable;\n\n      if (!hasVariable) {\n        variable = 'obj';\n        source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n      }\n      // cleanup code by stripping empty strings\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // frame code as the function body\n      source = 'function(' + variable + ') {\\n' +\n        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n        \"var __t, __p = '', __e = _.escape\" +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      // Use a sourceURL for easier debugging.\n      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n      var sourceURL = '\\n/*\\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n      try {\n        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n      } catch(e) {\n        e.source = source;\n        throw e;\n      }\n      if (data) {\n        return result(data);\n      }\n      // provide the compiled function's source by its `toString` method, in\n      // supported environments, or the `source` property as a convenience for\n      // inlining compiled templates during the build process\n      result.source = source;\n      return result;\n    }\n\n    /**\n     * Executes the callback `n` times, returning an array of the results\n     * of each callback execution. The callback is bound to `thisArg` and invoked\n     * with one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {number} n The number of times to execute the callback.\n     * @param {Function} callback The function called per iteration.\n     * @param {*} [thisArg] The `this` binding of `callback`.\n     * @returns {Array} Returns an array of the results of each `callback` execution.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) { mage.castSpell(n); });\n     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n     *\n     * _.times(3, function(n) { this.cast(n); }, mage);\n     * // => also calls `mage.castSpell(n)` three times\n     */\n    function times(n, callback, thisArg) {\n      n = (n = +n) > -1 ? n : 0;\n      var index = -1,\n          result = Array(n);\n\n      callback = baseCreateCallback(callback, thisArg, 1);\n      while (++index < n) {\n        result[index] = callback(index);\n      }\n      return result;\n    }\n\n    /**\n     * The inverse of `_.escape` this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n     * corresponding characters.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} string The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('Fred, Barney &amp; Pebbles');\n     * // => 'Fred, Barney & Pebbles'\n     */\n    function unescape(string) {\n      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utilities\n     * @param {string} [prefix] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return String(prefix == null ? '' : prefix) + id;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object that wraps the given value with explicit\n     * method chaining enabled.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney',  'age': 36 },\n     *   { 'name': 'fred',    'age': 40 },\n     *   { 'name': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _.chain(characters)\n     *     .sortBy('age')\n     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })\n     *     .first()\n     *     .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      value = new lodashWrapper(value);\n      value.__chain__ = true;\n      return value;\n    }\n\n    /**\n     * Invokes `interceptor` with the `value` as the first argument and then\n     * returns `value`. The purpose of this method is to \"tap into\" a method\n     * chain in order to perform operations on intermediate results within\n     * the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chaining\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3, 4])\n     *  .tap(function(array) { array.pop(); })\n     *  .reverse()\n     *  .value();\n     * // => [3, 2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * Enables explicit method chaining on the wrapper object.\n     *\n     * @name chain\n     * @memberOf _\n     * @category Chaining\n     * @returns {*} Returns the wrapper object.\n     * @example\n     *\n     * var characters = [\n     *   { 'name': 'barney', 'age': 36 },\n     *   { 'name': 'fred',   'age': 40 }\n     * ];\n     *\n     * // without explicit chaining\n     * _(characters).first();\n     * // => { 'name': 'barney', 'age': 36 }\n     *\n     * // with explicit chaining\n     * _(characters).chain()\n     *   .first()\n     *   .pick('age')\n     *   .value();\n     * // => { 'age': 36 }\n     */\n    function wrapperChain() {\n      this.__chain__ = true;\n      return this;\n    }\n\n    /**\n     * Produces the `toString` result of the wrapped value.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chaining\n     * @returns {string} Returns the string result.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return String(this.__wrapped__);\n    }\n\n    /**\n     * Extracts the wrapped value.\n     *\n     * @name valueOf\n     * @memberOf _\n     * @alias value\n     * @category Chaining\n     * @returns {*} Returns the wrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).valueOf();\n     * // => [1, 2, 3]\n     */\n    function wrapperValueOf() {\n      return this.__wrapped__;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return wrapped values when chaining\n    lodash.after = after;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.chain = chain;\n    lodash.compact = compact;\n    lodash.compose = compose;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.createCallback = createCallback;\n    lodash.curry = curry;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.indexBy = indexBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.map = map;\n    lodash.mapValues = mapValues;\n    lodash.max = max;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.min = min;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.property = property;\n    lodash.pull = pull;\n    lodash.range = range;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.shuffle = shuffle;\n    lodash.sortBy = sortBy;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.values = values;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n\n    // add aliases\n    lodash.collect = map;\n    lodash.drop = rest;\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.extend = assign;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n    lodash.unzip = zip;\n\n    // add functions to `lodash.prototype`\n    mixin(lodash);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions that return unwrapped values when chaining\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.contains = contains;\n    lodash.escape = escape;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.indexOf = indexOf;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isNaN = isNaN;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isUndefined = isUndefined;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.mixin = mixin;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.result = result;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.template = template;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n\n    // add aliases\n    lodash.all = every;\n    lodash.any = some;\n    lodash.detect = find;\n    lodash.findWhere = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.include = contains;\n    lodash.inject = reduce;\n\n    mixin(function() {\n      var source = {}\n      forOwn(lodash, function(func, methodName) {\n        if (!lodash.prototype[methodName]) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }(), false);\n\n    /*--------------------------------------------------------------------------*/\n\n    // add functions capable of returning wrapped and unwrapped values when chaining\n    lodash.first = first;\n    lodash.last = last;\n    lodash.sample = sample;\n\n    // add aliases\n    lodash.take = first;\n    lodash.head = first;\n\n    forOwn(lodash, function(func, methodName) {\n      var callbackable = methodName !== 'sample';\n      if (!lodash.prototype[methodName]) {\n        lodash.prototype[methodName]= function(n, guard) {\n          var chainAll = this.__chain__,\n              result = func(this.__wrapped__, n, guard);\n\n          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))\n            ? result\n            : new lodashWrapper(result, chainAll);\n        };\n      }\n    });\n\n    /*--------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type string\n     */\n    lodash.VERSION = '2.4.2';\n\n    // add \"Chaining\" functions to the wrapper\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.value = wrapperValueOf;\n    lodash.prototype.valueOf = wrapperValueOf;\n\n    // add `Array` functions that return unwrapped values\n    forEach(['join', 'pop', 'shift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        var chainAll = this.__chain__,\n            result = func.apply(this.__wrapped__, arguments);\n\n        return chainAll\n          ? new lodashWrapper(result, chainAll)\n          : result;\n      };\n    });\n\n    // add `Array` functions that return the existing wrapped value\n    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        func.apply(this.__wrapped__, arguments);\n        return this;\n      };\n    });\n\n    // add `Array` functions that return new wrapped values\n    forEach(['concat', 'slice', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n      lodash.prototype[methodName] = function() {\n        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);\n      };\n    });\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  var _ = runInContext();\n\n  // some AMD build optimizers like r.js check for condition patterns like the following:\n  if (true) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash is loaded with a RequireJS shim config.\n    // See http://requirejs.org/docs/api.html#config-shim\n    root._ = _;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else {}\n}.call(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash/dist/lodash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/write/page.jsx":
/*!********************************!*\
  !*** ./src/app/write/page.jsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _writepage_module_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./writepage.module.css */ \"(app-pages-browser)/./src/app/write/writepage.module.css\");\n/* harmony import */ var _writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_writepage_module_css__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_quill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-quill */ \"(app-pages-browser)/./node_modules/react-quill/dist/react-quill.js\");\n/* harmony import */ var react_quill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_quill__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/./node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/navigation.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_navigation__WEBPACK_IMPORTED_MODULE_4__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n// import Image from \"next/image\";\n\n// import \"react-quill/dist/quill.bubble.css\";\n\n\nconst Writepage = ()=>{\n    _s();\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const { status } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_3__.useSession)();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    if (status === \"loading\") {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().loading),\n            children: \"Loading...\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n            lineNumber: 20,\n            columnNumber: 12\n        }, undefined);\n    }\n    // if (status === \"authenticated\") {\n    //   router.push(\"/\");\n    // }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"text\",\n                placeholder: \"Title\",\n                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().input)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                lineNumber: 29,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().editor),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().button),\n                        onClick: ()=>setOpen(!open),\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Image, {\n                            src: \"/plus.png\",\n                            alt: \"\",\n                            width: 16,\n                            height: 16\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                            lineNumber: 32,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, undefined),\n                    open && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().add),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().addbutton),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Image, {\n                                    src: \"/image.png\",\n                                    alt: \"\",\n                                    width: 16,\n                                    height: 16\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                    lineNumber: 37,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                lineNumber: 36,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().addbutton),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Image, {\n                                    src: \"/external.png\",\n                                    alt: \"\",\n                                    width: 16,\n                                    height: 16\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                    lineNumber: 40,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                lineNumber: 39,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().addbutton),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Image, {\n                                    src: \"/video.png\",\n                                    alt: \"\",\n                                    width: 16,\n                                    height: 16\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                    lineNumber: 43,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                                lineNumber: 42,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                        lineNumber: 35,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((react_quill__WEBPACK_IMPORTED_MODULE_2___default()), {\n                        className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().textarea),\n                        theme: \"bubble\",\n                        value: value,\n                        onChange: setValue,\n                        placeholder: \"Tell your story...\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                        lineNumber: 48,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                lineNumber: 30,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                className: (_writepage_module_css__WEBPACK_IMPORTED_MODULE_5___default().publish),\n                children: \"Publish\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n                lineNumber: 56,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\karti\\\\OneDrive\\\\Documents\\\\GitHub\\\\blog_app\\\\src\\\\app\\\\write\\\\page.jsx\",\n        lineNumber: 28,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Writepage, \"s9cHFeUMFP4CoNnR6Ut9MKLTH70=\", false, function() {\n    return [\n        next_auth_react__WEBPACK_IMPORTED_MODULE_3__.useSession,\n        next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter\n    ];\n});\n_c = Writepage;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Writepage);\nvar _c;\n$RefreshReg$(_c, \"Writepage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvd3JpdGUvcGFnZS5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFFd0M7QUFDSTtBQUM1QyxrQ0FBa0M7QUFDRztBQUNyQyw4Q0FBOEM7QUFDRDtBQUNEO0FBRTVDLE1BQU1NLFlBQVk7O0lBQ2hCLE1BQU0sQ0FBQ0MsTUFBTUMsUUFBUSxHQUFHUCwrQ0FBUUEsQ0FBQztJQUNqQyxNQUFNLENBQUNRLE9BQU9DLFNBQVMsR0FBR1QsK0NBQVFBLENBQUM7SUFFbkMsTUFBTSxFQUFDVSxNQUFNLEVBQUUsR0FBR1AsMkRBQVVBO0lBRTVCLE1BQU1RLFNBQVNQLDBEQUFTQTtJQUV4QixJQUFJTSxXQUFXLFdBQVc7UUFDeEIscUJBQU8sOERBQUNFO1lBQUlDLFdBQVdaLHNFQUFjO3NCQUFFOzs7Ozs7SUFDekM7SUFFQSxvQ0FBb0M7SUFDcEMsc0JBQXNCO0lBQ3RCLElBQUk7SUFFSixxQkFDRSw4REFBQ1c7UUFBSUMsV0FBV1osd0VBQWdCOzswQkFDOUIsOERBQUNlO2dCQUFNQyxNQUFLO2dCQUFPQyxhQUFZO2dCQUFRTCxXQUFXWixvRUFBWTs7Ozs7OzBCQUM5RCw4REFBQ1c7Z0JBQUlDLFdBQVdaLHFFQUFhOztrQ0FDM0IsOERBQUNtQjt3QkFBT1AsV0FBV1oscUVBQWE7d0JBQUVvQixTQUFTLElBQU1kLFFBQVEsQ0FBQ0Q7a0NBQ3hELDRFQUFDZ0I7NEJBQU1DLEtBQUk7NEJBQVlDLEtBQUk7NEJBQUdDLE9BQU87NEJBQUlDLFFBQVE7Ozs7Ozs7Ozs7O29CQUVsRHBCLHNCQUNDLDhEQUFDTTt3QkFBSUMsV0FBV1osa0VBQVU7OzBDQUN4Qiw4REFBQ21CO2dDQUFPUCxXQUFXWix3RUFBZ0I7MENBQ2pDLDRFQUFDcUI7b0NBQU1DLEtBQUk7b0NBQWFDLEtBQUk7b0NBQUdDLE9BQU87b0NBQUlDLFFBQVE7Ozs7Ozs7Ozs7OzBDQUVwRCw4REFBQ047Z0NBQU9QLFdBQVdaLHdFQUFnQjswQ0FDakMsNEVBQUNxQjtvQ0FBTUMsS0FBSTtvQ0FBZ0JDLEtBQUk7b0NBQUdDLE9BQU87b0NBQUlDLFFBQVE7Ozs7Ozs7Ozs7OzBDQUV2RCw4REFBQ047Z0NBQU9QLFdBQVdaLHdFQUFnQjswQ0FDakMsNEVBQUNxQjtvQ0FBTUMsS0FBSTtvQ0FBYUMsS0FBSTtvQ0FBR0MsT0FBTztvQ0FBSUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBS3hELDhEQUFDeEIsb0RBQVVBO3dCQUNUVyxXQUFXWix1RUFBZTt3QkFDMUI2QixPQUFNO3dCQUNOdEIsT0FBT0E7d0JBQ1B1QixVQUFVdEI7d0JBQ1ZTLGFBQVk7Ozs7Ozs7Ozs7OzswQkFHaEIsOERBQUNFO2dCQUFPUCxXQUFXWixzRUFBYzswQkFBRTs7Ozs7Ozs7Ozs7O0FBR3pDO0dBaERNSTs7UUFJY0YsdURBQVVBO1FBRWJDLHNEQUFTQTs7O0tBTnBCQztBQWtETiwrREFBZUEsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvYXBwL3dyaXRlL3BhZ2UuanN4PzdlODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi93cml0ZXBhZ2UubW9kdWxlLmNzc1wiO1xyXG4vLyBpbXBvcnQgSW1hZ2UgZnJvbSBcIm5leHQvaW1hZ2VcIjtcclxuaW1wb3J0IFJlYWN0UXVpbGwgZnJvbSBcInJlYWN0LXF1aWxsXCI7XHJcbi8vIGltcG9ydCBcInJlYWN0LXF1aWxsL2Rpc3QvcXVpbGwuYnViYmxlLmNzc1wiO1xyXG5pbXBvcnQgeyB1c2VTZXNzaW9uIH0gZnJvbSBcIm5leHQtYXV0aC9yZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCI7XHJcblxyXG5jb25zdCBXcml0ZXBhZ2UgPSAoKSA9PiB7XHJcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoXCJcIik7XHJcblxyXG4gIGNvbnN0IHtzdGF0dXMgfSA9IHVzZVNlc3Npb24oKTtcclxuXHJcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XHJcblxyXG4gIGlmIChzdGF0dXMgPT09IFwibG9hZGluZ1wiKSB7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5sb2FkaW5nfT5Mb2FkaW5nLi4uPC9kaXY+O1xyXG4gIH1cclxuXHJcbiAgLy8gaWYgKHN0YXR1cyA9PT0gXCJhdXRoZW50aWNhdGVkXCIpIHtcclxuICAvLyAgIHJvdXRlci5wdXNoKFwiL1wiKTtcclxuICAvLyB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRhaW5lcn0+XHJcbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiVGl0bGVcIiBjbGFzc05hbWU9e3N0eWxlcy5pbnB1dH0gLz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5lZGl0b3J9PlxyXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtzdHlsZXMuYnV0dG9ufSBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuKCFvcGVuKX0+XHJcbiAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL3BsdXMucG5nXCIgYWx0PVwiXCIgd2lkdGg9ezE2fSBoZWlnaHQ9ezE2fSAvPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIHtvcGVuICYmIChcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWRkfT5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5hZGRidXR0b259PlxyXG4gICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvaW1hZ2UucG5nXCIgYWx0PVwiXCIgd2lkdGg9ezE2fSBoZWlnaHQ9ezE2fSAvPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5hZGRidXR0b259PlxyXG4gICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvZXh0ZXJuYWwucG5nXCIgYWx0PVwiXCIgd2lkdGg9ezE2fSBoZWlnaHQ9ezE2fSAvPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5hZGRidXR0b259PlxyXG4gICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvdmlkZW8ucG5nXCIgYWx0PVwiXCIgd2lkdGg9ezE2fSBoZWlnaHQ9ezE2fSAvPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIDxSZWFjdFF1aWxsXHJcbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy50ZXh0YXJlYX1cclxuICAgICAgICAgIHRoZW1lPVwiYnViYmxlXCJcclxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtzZXRWYWx1ZX1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVGVsbCB5b3VyIHN0b3J5Li4uXCJcclxuICAgICAgICA+PC9SZWFjdFF1aWxsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5wdWJsaXNofT5QdWJsaXNoPC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgV3JpdGVwYWdlO1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInN0eWxlcyIsIlJlYWN0UXVpbGwiLCJ1c2VTZXNzaW9uIiwidXNlUm91dGVyIiwiV3JpdGVwYWdlIiwib3BlbiIsInNldE9wZW4iLCJ2YWx1ZSIsInNldFZhbHVlIiwic3RhdHVzIiwicm91dGVyIiwiZGl2IiwiY2xhc3NOYW1lIiwibG9hZGluZyIsImNvbnRhaW5lciIsImlucHV0IiwidHlwZSIsInBsYWNlaG9sZGVyIiwiZWRpdG9yIiwiYnV0dG9uIiwib25DbGljayIsIkltYWdlIiwic3JjIiwiYWx0Iiwid2lkdGgiLCJoZWlnaHQiLCJhZGQiLCJhZGRidXR0b24iLCJ0ZXh0YXJlYSIsInRoZW1lIiwib25DaGFuZ2UiLCJwdWJsaXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/write/page.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/index.js":
/*!***************************************!*\
  !*** ./node_modules/quilljs/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./lib/index */ \"(app-pages-browser)/./node_modules/quilljs/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtIQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpbGxqcy9pbmRleC5qcz8yMTczIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXgnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/document.js":
/*!***************************************************!*\
  !*** ./node_modules/quilljs/lib/core/document.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Document, Format, Line, LinkedList, Normalizer, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\nDelta = (__webpack_require__(/*! rich-text */ \"(app-pages-browser)/./node_modules/rich-text/index.js\").Delta);\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nFormat = __webpack_require__(/*! ./format */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/format.js\");\n\nLine = __webpack_require__(/*! ./line */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/line.js\");\n\nLinkedList = __webpack_require__(/*! ../lib/linked-list */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/linked-list.js\");\n\nNormalizer = __webpack_require__(/*! ../lib/normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\nDocument = (function() {\n  function Document(root, options) {\n    this.root = root;\n    if (options == null) {\n      options = {};\n    }\n    this.formats = {};\n    _.each(options.formats, _.bind(this.addFormat, this));\n    this.setHTML(this.root.innerHTML);\n  }\n\n  Document.prototype.addFormat = function(name, config) {\n    if (!_.isObject(config)) {\n      config = Format.FORMATS[name];\n    }\n    if (this.formats[name] != null) {\n      console.warn('Overwriting format', name, this.formats[name]);\n    }\n    return this.formats[name] = new Format(this.root.ownerDocument, config);\n  };\n\n  Document.prototype.appendLine = function(lineNode) {\n    return this.insertLineBefore(lineNode, null);\n  };\n\n  Document.prototype.findLeafAt = function(index, inclusive) {\n    var line, offset, _ref;\n    _ref = this.findLineAt(index), line = _ref[0], offset = _ref[1];\n    if (line != null) {\n      return line.findLeafAt(offset, inclusive);\n    } else {\n      return [null, offset];\n    }\n  };\n\n  Document.prototype.findLine = function(node) {\n    var line;\n    while ((node != null) && (dom.BLOCK_TAGS[node.tagName] == null)) {\n      node = node.parentNode;\n    }\n    line = node != null ? this.lineMap[node.id] : null;\n    if ((line != null ? line.node : void 0) === node) {\n      return line;\n    } else {\n      return null;\n    }\n  };\n\n  Document.prototype.findLineAt = function(index) {\n    var curLine, length;\n    if (!(this.lines.length > 0)) {\n      return [null, index];\n    }\n    length = this.toDelta().length();\n    if (index === length) {\n      return [this.lines.last, this.lines.last.length];\n    }\n    if (index > length) {\n      return [null, index - length];\n    }\n    curLine = this.lines.first;\n    while (curLine != null) {\n      if (index < curLine.length) {\n        return [curLine, index];\n      }\n      index -= curLine.length;\n      curLine = curLine.next;\n    }\n    return [null, index];\n  };\n\n  Document.prototype.insertLineBefore = function(newLineNode, refLine) {\n    var line;\n    line = new Line(this, newLineNode);\n    if (refLine != null) {\n      if (!dom(newLineNode.parentNode).isElement()) {\n        this.root.insertBefore(newLineNode, refLine.node);\n      }\n      this.lines.insertAfter(refLine.prev, line);\n    } else {\n      if (!dom(newLineNode.parentNode).isElement()) {\n        this.root.appendChild(newLineNode);\n      }\n      this.lines.append(line);\n    }\n    this.lineMap[line.id] = line;\n    return line;\n  };\n\n  Document.prototype.mergeLines = function(line, lineToMerge) {\n    if (lineToMerge.length > 1) {\n      if (line.length === 1) {\n        dom(line.leaves.last.node).remove();\n      }\n      _.each(dom(lineToMerge.node).childNodes(), function(child) {\n        if (child.tagName !== dom.DEFAULT_BREAK_TAG) {\n          return line.node.appendChild(child);\n        }\n      });\n    }\n    this.removeLine(lineToMerge);\n    return line.rebuild();\n  };\n\n  Document.prototype.optimizeLines = function() {\n    return _.each(this.lines.toArray(), function(line, i) {\n      line.optimize();\n      return true;\n    });\n  };\n\n  Document.prototype.rebuild = function() {\n    var lineNode, lines, _results;\n    lines = this.lines.toArray();\n    lineNode = this.root.firstChild;\n    if ((lineNode != null) && (dom.LIST_TAGS[lineNode.tagName] != null)) {\n      lineNode = lineNode.firstChild;\n    }\n    _.each(lines, (function(_this) {\n      return function(line, index) {\n        var newLine, _ref;\n        while (line.node !== lineNode) {\n          if (line.node.parentNode === _this.root || ((_ref = line.node.parentNode) != null ? _ref.parentNode : void 0) === _this.root) {\n            lineNode = Normalizer.normalizeLine(lineNode);\n            newLine = _this.insertLineBefore(lineNode, line);\n            lineNode = dom(lineNode).nextLineNode(_this.root);\n          } else {\n            return _this.removeLine(line);\n          }\n        }\n        if (line.outerHTML !== lineNode.outerHTML) {\n          line.node = Normalizer.normalizeLine(line.node);\n          line.rebuild();\n        }\n        return lineNode = dom(lineNode).nextLineNode(_this.root);\n      };\n    })(this));\n    _results = [];\n    while (lineNode != null) {\n      lineNode = Normalizer.normalizeLine(lineNode);\n      this.appendLine(lineNode);\n      _results.push(lineNode = dom(lineNode).nextLineNode(this.root));\n    }\n    return _results;\n  };\n\n  Document.prototype.removeLine = function(line) {\n    if (line.node.parentNode != null) {\n      if (dom.LIST_TAGS[line.node.parentNode.tagName] && line.node.parentNode.childNodes.length === 1) {\n        dom(line.node.parentNode).remove();\n      } else {\n        dom(line.node).remove();\n      }\n    }\n    delete this.lineMap[line.id];\n    return this.lines.remove(line);\n  };\n\n  Document.prototype.setHTML = function(html) {\n    html = Normalizer.stripComments(html);\n    html = Normalizer.stripWhitespace(html);\n    this.root.innerHTML = html;\n    this.lines = new LinkedList();\n    this.lineMap = {};\n    return this.rebuild();\n  };\n\n  Document.prototype.splitLine = function(line, offset) {\n    var lineNode1, lineNode2, newLine, _ref;\n    offset = Math.min(offset, line.length - 1);\n    _ref = dom(line.node).split(offset, true), lineNode1 = _ref[0], lineNode2 = _ref[1];\n    line.node = lineNode1;\n    line.rebuild();\n    newLine = this.insertLineBefore(lineNode2, line.next);\n    newLine.formats = _.clone(line.formats);\n    newLine.resetContent();\n    return newLine;\n  };\n\n  Document.prototype.toDelta = function() {\n    var delta, lines;\n    lines = this.lines.toArray();\n    delta = new Delta();\n    lines.forEach(function(line) {\n      return line.delta.ops.forEach(function(op) {\n        return delta.push(op);\n      });\n    });\n    return delta;\n  };\n\n  return Document;\n\n})();\n\nmodule.exports = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/document.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/editor.js":
/*!*************************************************!*\
  !*** ./node_modules/quilljs/lib/core/editor.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Document, Editor, Line, Renderer, Selection, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nDocument = __webpack_require__(/*! ./document */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/document.js\");\n\nLine = __webpack_require__(/*! ./line */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/line.js\");\n\nRenderer = __webpack_require__(/*! ./renderer */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/renderer.js\");\n\nSelection = __webpack_require__(/*! ./selection */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/selection.js\");\n\nEditor = (function() {\n  Editor.sources = {\n    API: 'api',\n    SILENT: 'silent',\n    USER: 'user'\n  };\n\n  function Editor(iframeContainer, quill, options) {\n    this.iframeContainer = iframeContainer;\n    this.quill = quill;\n    this.options = options != null ? options : {};\n    this.renderer = new Renderer(this.iframeContainer, this.options);\n    dom(this.iframeContainer).on('focus', this.focus.bind(this));\n    this.root = this.renderer.root;\n    this.doc = new Document(this.root, this.options);\n    this.delta = this.doc.toDelta();\n    this.selection = new Selection(this.doc, this.renderer.iframe, this.quill);\n    this.timer = setInterval(_.bind(this.checkUpdate, this), this.options.pollInterval);\n    if (!this.options.readOnly) {\n      this.enable();\n    }\n  }\n\n  Editor.prototype.disable = function() {\n    return this.enable(false);\n  };\n\n  Editor.prototype.enable = function(enabled) {\n    if (enabled == null) {\n      enabled = true;\n    }\n    return this.root.setAttribute('contenteditable', enabled);\n  };\n\n  Editor.prototype.applyDelta = function(delta, source) {\n    var localDelta;\n    localDelta = this._update();\n    if (localDelta) {\n      delta = localDelta.transform(delta, true);\n      localDelta = delta.transform(localDelta, false);\n    }\n    if (delta.ops.length > 0) {\n      delta = this._trackDelta((function(_this) {\n        return function() {\n          var index;\n          index = 0;\n          _.each(delta.ops, function(op) {\n            if (_.isString(op.insert)) {\n              _this._insertAt(index, op.insert, op.attributes);\n              return index += op.insert.length;\n            } else if (_.isNumber(op.insert)) {\n              _this._insertAt(index, dom.EMBED_TEXT, op.attributes);\n              return index += 1;\n            } else if (_.isNumber(op[\"delete\"])) {\n              return _this._deleteAt(index, op[\"delete\"]);\n            } else if (_.isNumber(op.retain)) {\n              _.each(op.attributes, function(value, name) {\n                return _this._formatAt(index, op.retain, name, value);\n              });\n              return index += op.retain;\n            }\n          });\n          return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n        };\n      })(this));\n      this.delta = this.doc.toDelta();\n      this.innerHTML = this.root.innerHTML;\n      if (delta && source !== Editor.sources.SILENT) {\n        this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, delta, source);\n      }\n    }\n    if (localDelta && localDelta.ops.length > 0 && source !== Editor.sources.SILENT) {\n      return this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, localDelta, Editor.sources.USER);\n    }\n  };\n\n  Editor.prototype.checkUpdate = function(source) {\n    var delta;\n    if (source == null) {\n      source = 'user';\n    }\n    if ((this.renderer.iframe.parentNode == null) || (this.root.parentNode == null)) {\n      return clearInterval(this.timer);\n    }\n    delta = this._update();\n    if (delta) {\n      this.delta.compose(delta);\n      this.quill.emit(this.quill.constructor.events.TEXT_CHANGE, delta, source);\n    }\n    if (delta) {\n      source = Editor.sources.SILENT;\n    }\n    return this.selection.update(source);\n  };\n\n  Editor.prototype.focus = function() {\n    if (dom.isIE(11)) {\n      this.selection.setRange(this.selection.range);\n    }\n    if (dom.isIOS()) {\n      this.renderer.iframe.focus();\n    }\n    return this.root.focus();\n  };\n\n  Editor.prototype.getDelta = function() {\n    return this.delta;\n  };\n\n  Editor.prototype._deleteAt = function(index, length) {\n    if (length <= 0) {\n      return;\n    }\n    return this.selection.shiftAfter(index, -1 * length, (function(_this) {\n      return function() {\n        var curLine, deleteLength, firstLine, mergeFirstLine, nextLine, offset, _ref;\n        _ref = _this.doc.findLineAt(index), firstLine = _ref[0], offset = _ref[1];\n        curLine = firstLine;\n        mergeFirstLine = firstLine.length - offset <= length && offset > 0;\n        while ((curLine != null) && length > 0) {\n          nextLine = curLine.next;\n          deleteLength = Math.min(curLine.length - offset, length);\n          if (offset === 0 && length >= curLine.length) {\n            _this.doc.removeLine(curLine);\n          } else {\n            curLine.deleteText(offset, deleteLength);\n          }\n          length -= deleteLength;\n          curLine = nextLine;\n          offset = 0;\n        }\n        if (mergeFirstLine && firstLine.next) {\n          return _this.doc.mergeLines(firstLine, firstLine.next);\n        }\n      };\n    })(this));\n  };\n\n  Editor.prototype._formatAt = function(index, length, name, value) {\n    return this.selection.shiftAfter(index, 0, (function(_this) {\n      return function() {\n        var formatLength, line, offset, _ref, _results;\n        _ref = _this.doc.findLineAt(index), line = _ref[0], offset = _ref[1];\n        _results = [];\n        while ((line != null) && length > 0) {\n          formatLength = Math.min(length, line.length - offset - 1);\n          line.formatText(offset, formatLength, name, value);\n          length -= formatLength;\n          if (length > 0) {\n            line.format(name, value);\n          }\n          length -= 1;\n          offset = 0;\n          _results.push(line = line.next);\n        }\n        return _results;\n      };\n    })(this));\n  };\n\n  Editor.prototype._insertAt = function(index, text, formatting) {\n    if (formatting == null) {\n      formatting = {};\n    }\n    return this.selection.shiftAfter(index, text.length, (function(_this) {\n      return function() {\n        var line, lineTexts, offset, _ref;\n        text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        lineTexts = text.split('\\n');\n        _ref = _this.doc.findLineAt(index), line = _ref[0], offset = _ref[1];\n        return _.each(lineTexts, function(lineText, i) {\n          var nextLine;\n          if ((line == null) || line.length <= offset) {\n            if (i < lineTexts.length - 1 || lineText.length > 0) {\n              line = _this.doc.appendLine(_this.root.ownerDocument.createElement(dom.DEFAULT_BLOCK_TAG));\n              offset = 0;\n              line.insertText(offset, lineText, formatting);\n              line.format(formatting);\n              nextLine = null;\n            }\n          } else {\n            line.insertText(offset, lineText, formatting);\n            if (i < lineTexts.length - 1) {\n              nextLine = _this.doc.splitLine(line, offset + lineText.length);\n              _.each(_.defaults({}, formatting, line.formats), function(value, format) {\n                return line.format(format, formatting[format]);\n              });\n              offset = 0;\n            }\n          }\n          return line = nextLine;\n        });\n      };\n    })(this));\n  };\n\n  Editor.prototype._trackDelta = function(fn) {\n    var delta, newDelta;\n    fn();\n    newDelta = this.doc.toDelta();\n    delta = this.delta.diff(newDelta);\n    return delta;\n  };\n\n  Editor.prototype._update = function() {\n    var delta;\n    if (this.innerHTML === this.root.innerHTML) {\n      return false;\n    }\n    delta = this._trackDelta((function(_this) {\n      return function() {\n        _this.selection.preserve(_.bind(_this.doc.rebuild, _this.doc));\n        return _this.selection.shiftAfter(0, 0, _.bind(_this.doc.optimizeLines, _this.doc));\n      };\n    })(this));\n    this.innerHTML = this.root.innerHTML;\n    if (delta.ops.length > 0) {\n      return delta;\n    } else {\n      return false;\n    }\n  };\n\n  return Editor;\n\n})();\n\nmodule.exports = Editor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/editor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/format.js":
/*!*************************************************!*\
  !*** ./node_modules/quilljs/lib/core/format.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Format, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nFormat = (function() {\n  Format.types = {\n    LINE: 'line'\n  };\n\n  Format.FORMATS = {\n    bold: {\n      tag: 'B',\n      prepare: 'bold'\n    },\n    italic: {\n      tag: 'I',\n      prepare: 'italic'\n    },\n    underline: {\n      tag: 'U',\n      prepare: 'underline'\n    },\n    strike: {\n      tag: 'S',\n      prepare: 'strikeThrough'\n    },\n    color: {\n      style: 'color',\n      \"default\": 'rgb(0, 0, 0)',\n      prepare: 'foreColor'\n    },\n    background: {\n      style: 'backgroundColor',\n      \"default\": 'rgb(255, 255, 255)',\n      prepare: 'backColor'\n    },\n    font: {\n      style: 'fontFamily',\n      \"default\": \"'Helvetica', 'Arial', sans-serif\",\n      prepare: 'fontName'\n    },\n    size: {\n      style: 'fontSize',\n      \"default\": '13px',\n      prepare: function(doc, value) {\n        return doc.execCommand('fontSize', false, dom.convertFontSize(value));\n      }\n    },\n    link: {\n      tag: 'A',\n      attribute: 'href'\n    },\n    image: {\n      tag: 'IMG',\n      attribute: 'src'\n    },\n    align: {\n      type: Format.types.LINE,\n      style: 'textAlign',\n      \"default\": 'left'\n    },\n    bullet: {\n      type: Format.types.LINE,\n      exclude: 'list',\n      parentTag: 'UL',\n      tag: 'LI'\n    },\n    list: {\n      type: Format.types.LINE,\n      exclude: 'bullet',\n      parentTag: 'OL',\n      tag: 'LI'\n    }\n  };\n\n  function Format(document, config) {\n    this.document = document;\n    this.config = config;\n  }\n\n  Format.prototype.add = function(node, value) {\n    var formatNode, inline, parentNode, _ref, _ref1;\n    if (!value) {\n      return this.remove(node);\n    }\n    if (this.value(node) === value) {\n      return node;\n    }\n    if (_.isString(this.config.parentTag)) {\n      parentNode = this.document.createElement(this.config.parentTag);\n      dom(node).wrap(parentNode);\n      if (node.parentNode.tagName === ((_ref = node.parentNode.previousSibling) != null ? _ref.tagName : void 0)) {\n        dom(node.parentNode.previousSibling).merge(node.parentNode);\n      }\n      if (node.parentNode.tagName === ((_ref1 = node.parentNode.nextSibling) != null ? _ref1.tagName : void 0)) {\n        dom(node.parentNode).merge(node.parentNode.nextSibling);\n      }\n    }\n    if (_.isString(this.config.tag)) {\n      formatNode = this.document.createElement(this.config.tag);\n      if (dom.VOID_TAGS[formatNode.tagName] != null) {\n        if (node.parentNode != null) {\n          dom(node).replace(formatNode);\n        }\n        node = formatNode;\n      } else if (this.isType(Format.types.LINE)) {\n        node = dom(node).switchTag(this.config.tag);\n      } else {\n        dom(node).wrap(formatNode);\n        node = formatNode;\n      }\n    }\n    if (_.isString(this.config.style) || _.isString(this.config.attribute) || _.isString(this.config[\"class\"])) {\n      if (_.isString(this.config[\"class\"])) {\n        node = this.remove(node);\n      }\n      if (dom(node).isTextNode()) {\n        inline = this.document.createElement(dom.DEFAULT_INLINE_TAG);\n        dom(node).wrap(inline);\n        node = inline;\n      }\n      if (_.isString(this.config.style)) {\n        if (value !== this.config[\"default\"]) {\n          node.style[this.config.style] = value;\n        }\n      }\n      if (_.isString(this.config.attribute)) {\n        node.setAttribute(this.config.attribute, value);\n      }\n      if (_.isString(this.config[\"class\"])) {\n        dom(node).addClass(this.config[\"class\"] + value);\n      }\n    }\n    return node;\n  };\n\n  Format.prototype.isType = function(type) {\n    return type === this.config.type;\n  };\n\n  Format.prototype.match = function(node) {\n    var c, _i, _len, _ref, _ref1;\n    if (!dom(node).isElement()) {\n      return false;\n    }\n    if (_.isString(this.config.parentTag) && ((_ref = node.parentNode) != null ? _ref.tagName : void 0) !== this.config.parentTag) {\n      return false;\n    }\n    if (_.isString(this.config.tag) && node.tagName !== this.config.tag) {\n      return false;\n    }\n    if (_.isString(this.config.style) && (!node.style[this.config.style] || node.style[this.config.style] === this.config[\"default\"])) {\n      return false;\n    }\n    if (_.isString(this.config.attribute) && !node.hasAttribute(this.config.attribute)) {\n      return false;\n    }\n    if (_.isString(this.config[\"class\"])) {\n      _ref1 = dom(node).classes();\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        c = _ref1[_i];\n        if (c.indexOf(this.config[\"class\"]) === 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  };\n\n  Format.prototype.prepare = function(value) {\n    if (_.isString(this.config.prepare)) {\n      return this.document.execCommand(this.config.prepare, false, value);\n    } else if (_.isFunction(this.config.prepare)) {\n      return this.config.prepare(this.document, value);\n    }\n  };\n\n  Format.prototype.remove = function(node) {\n    var c, _i, _len, _ref;\n    if (!this.match(node)) {\n      return node;\n    }\n    if (_.isString(this.config.style)) {\n      node.style[this.config.style] = '';\n      if (!node.getAttribute('style')) {\n        node.removeAttribute('style');\n      }\n    }\n    if (_.isString(this.config.attribute)) {\n      node.removeAttribute(this.config.attribute);\n    }\n    if (_.isString(this.config[\"class\"])) {\n      _ref = dom(node).classes();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        c = _ref[_i];\n        if (c.indexOf(this.config[\"class\"]) === 0) {\n          dom(node).removeClass(c);\n        }\n      }\n      if (!node.getAttribute('class')) {\n        node.removeAttribute('class');\n      }\n    }\n    if (_.isString(this.config.tag)) {\n      if (this.isType(Format.types.LINE)) {\n        if (_.isString(this.config.parentTag)) {\n          if (node.previousSibling != null) {\n            dom(node).splitAncestors(node.parentNode.parentNode);\n          }\n          if (node.nextSibling != null) {\n            dom(node.nextSibling).splitAncestors(node.parentNode.parentNode);\n          }\n        }\n        node = dom(node).switchTag(dom.DEFAULT_BLOCK_TAG);\n      } else {\n        node = dom(node).switchTag(dom.DEFAULT_INLINE_TAG);\n        if (dom.EMBED_TAGS[this.config.tag] != null) {\n          dom(node).text(dom.EMBED_TEXT);\n        }\n      }\n    }\n    if (_.isString(this.config.parentTag)) {\n      dom(node.parentNode).unwrap();\n    }\n    if (node.tagName === dom.DEFAULT_INLINE_TAG && !node.hasAttributes()) {\n      node = dom(node).unwrap();\n    }\n    return node;\n  };\n\n  Format.prototype.value = function(node) {\n    var c, _i, _len, _ref;\n    if (!this.match(node)) {\n      return void 0;\n    }\n    if (_.isString(this.config.attribute)) {\n      return node.getAttribute(this.config.attribute) || void 0;\n    } else if (_.isString(this.config.style)) {\n      return node.style[this.config.style] || void 0;\n    } else if (_.isString(this.config[\"class\"])) {\n      _ref = dom(node).classes();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        c = _ref[_i];\n        if (c.indexOf(this.config[\"class\"]) === 0) {\n          return c.slice(this.config[\"class\"].length);\n        }\n      }\n    } else if (_.isString(this.config.tag)) {\n      return true;\n    }\n    return void 0;\n  };\n\n  return Format;\n\n})();\n\nmodule.exports = Format;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/leaf.js":
/*!***********************************************!*\
  !*** ./node_modules/quilljs/lib/core/leaf.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Format, Leaf, LinkedList, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nFormat = __webpack_require__(/*! ./format */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/format.js\");\n\nLinkedList = __webpack_require__(/*! ../lib/linked-list */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/linked-list.js\");\n\nLeaf = (function(_super) {\n  __extends(Leaf, _super);\n\n  Leaf.ID_PREFIX = 'leaf-';\n\n  Leaf.isLeafNode = function(node) {\n    return dom(node).isTextNode() || (node.firstChild == null);\n  };\n\n  function Leaf(node, formats) {\n    this.node = node;\n    this.formats = _.clone(formats);\n    this.id = _.uniqueId(Leaf.ID_PREFIX);\n    this.text = dom(this.node).text();\n    this.length = this.text.length;\n  }\n\n  Leaf.prototype.deleteText = function(offset, length) {\n    var textNode;\n    if (!(length > 0)) {\n      return;\n    }\n    this.text = this.text.slice(0, offset) + this.text.slice(offset + length);\n    this.length = this.text.length;\n    if (dom.EMBED_TAGS[this.node.tagName] != null) {\n      textNode = this.node.ownerDocument.createTextNode(this.text);\n      return this.node = dom(this.node).replace(textNode);\n    } else {\n      return dom(this.node).text(this.text);\n    }\n  };\n\n  Leaf.prototype.insertText = function(offset, text) {\n    var textNode;\n    this.text = this.text.slice(0, offset) + text + this.text.slice(offset);\n    if (dom(this.node).isTextNode()) {\n      dom(this.node).text(this.text);\n    } else {\n      textNode = this.node.ownerDocument.createTextNode(text);\n      if (this.node.tagName === dom.DEFAULT_BREAK_TAG) {\n        this.node = dom(this.node).replace(textNode);\n      } else {\n        this.node.appendChild(textNode);\n        this.node = textNode;\n      }\n    }\n    return this.length = this.text.length;\n  };\n\n  return Leaf;\n\n})(LinkedList.Node);\n\nmodule.exports = Leaf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9jb3JlL2xlYWYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQkFBZ0I7QUFDaEIsd0NBQXdDLDBCQUEwQiw2REFBNkQsa0JBQWtCLDRCQUE0QixtQ0FBbUMsOEJBQThCLG9DQUFvQzs7QUFFbFIsSUFBSSxtQkFBTyxDQUFDLHdFQUFROztBQUVwQixNQUFNLG1CQUFPLENBQUMsNkVBQVk7O0FBRTFCLFNBQVMsbUJBQU8sQ0FBQywrRUFBVTs7QUFFM0IsYUFBYSxtQkFBTyxDQUFDLDZGQUFvQjs7QUFFekM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9jb3JlL2xlYWYuanM/MjEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRm9ybWF0LCBMZWFmLCBMaW5rZWRMaXN0LCBkb20sIF8sXG4gIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5kb20gPSByZXF1aXJlKCcuLi9saWIvZG9tJyk7XG5cbkZvcm1hdCA9IHJlcXVpcmUoJy4vZm9ybWF0Jyk7XG5cbkxpbmtlZExpc3QgPSByZXF1aXJlKCcuLi9saWIvbGlua2VkLWxpc3QnKTtcblxuTGVhZiA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgX19leHRlbmRzKExlYWYsIF9zdXBlcik7XG5cbiAgTGVhZi5JRF9QUkVGSVggPSAnbGVhZi0nO1xuXG4gIExlYWYuaXNMZWFmTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZG9tKG5vZGUpLmlzVGV4dE5vZGUoKSB8fCAobm9kZS5maXJzdENoaWxkID09IG51bGwpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIExlYWYobm9kZSwgZm9ybWF0cykge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy5mb3JtYXRzID0gXy5jbG9uZShmb3JtYXRzKTtcbiAgICB0aGlzLmlkID0gXy51bmlxdWVJZChMZWFmLklEX1BSRUZJWCk7XG4gICAgdGhpcy50ZXh0ID0gZG9tKHRoaXMubm9kZSkudGV4dCgpO1xuICAgIHRoaXMubGVuZ3RoID0gdGhpcy50ZXh0Lmxlbmd0aDtcbiAgfVxuXG4gIExlYWYucHJvdG90eXBlLmRlbGV0ZVRleHQgPSBmdW5jdGlvbihvZmZzZXQsIGxlbmd0aCkge1xuICAgIHZhciB0ZXh0Tm9kZTtcbiAgICBpZiAoIShsZW5ndGggPiAwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnRleHQgPSB0aGlzLnRleHQuc2xpY2UoMCwgb2Zmc2V0KSArIHRoaXMudGV4dC5zbGljZShvZmZzZXQgKyBsZW5ndGgpO1xuICAgIHRoaXMubGVuZ3RoID0gdGhpcy50ZXh0Lmxlbmd0aDtcbiAgICBpZiAoZG9tLkVNQkVEX1RBR1NbdGhpcy5ub2RlLnRhZ05hbWVdICE9IG51bGwpIHtcbiAgICAgIHRleHROb2RlID0gdGhpcy5ub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50ZXh0KTtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUgPSBkb20odGhpcy5ub2RlKS5yZXBsYWNlKHRleHROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRvbSh0aGlzLm5vZGUpLnRleHQodGhpcy50ZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgTGVhZi5wcm90b3R5cGUuaW5zZXJ0VGV4dCA9IGZ1bmN0aW9uKG9mZnNldCwgdGV4dCkge1xuICAgIHZhciB0ZXh0Tm9kZTtcbiAgICB0aGlzLnRleHQgPSB0aGlzLnRleHQuc2xpY2UoMCwgb2Zmc2V0KSArIHRleHQgKyB0aGlzLnRleHQuc2xpY2Uob2Zmc2V0KTtcbiAgICBpZiAoZG9tKHRoaXMubm9kZSkuaXNUZXh0Tm9kZSgpKSB7XG4gICAgICBkb20odGhpcy5ub2RlKS50ZXh0KHRoaXMudGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHROb2RlID0gdGhpcy5ub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG4gICAgICBpZiAodGhpcy5ub2RlLnRhZ05hbWUgPT09IGRvbS5ERUZBVUxUX0JSRUFLX1RBRykge1xuICAgICAgICB0aGlzLm5vZGUgPSBkb20odGhpcy5ub2RlKS5yZXBsYWNlKHRleHROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgIHRoaXMubm9kZSA9IHRleHROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPSB0aGlzLnRleHQubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiBMZWFmO1xuXG59KShMaW5rZWRMaXN0Lk5vZGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExlYWY7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/leaf.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/line.js":
/*!***********************************************!*\
  !*** ./node_modules/quilljs/lib/core/line.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Format, Leaf, Line, LinkedList, Normalizer, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\nDelta = (__webpack_require__(/*! rich-text */ \"(app-pages-browser)/./node_modules/rich-text/index.js\").Delta);\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nFormat = __webpack_require__(/*! ./format */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/format.js\");\n\nLeaf = __webpack_require__(/*! ./leaf */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/leaf.js\");\n\nLine = __webpack_require__(/*! ./line */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/line.js\");\n\nLinkedList = __webpack_require__(/*! ../lib/linked-list */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/linked-list.js\");\n\nNormalizer = __webpack_require__(/*! ../lib/normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\nLine = (function(_super) {\n  __extends(Line, _super);\n\n  Line.CLASS_NAME = 'line';\n\n  Line.ID_PREFIX = 'line-';\n\n  function Line(doc, node) {\n    this.doc = doc;\n    this.node = node;\n    this.id = _.uniqueId(Line.ID_PREFIX);\n    this.formats = {};\n    dom(this.node).addClass(Line.CLASS_NAME);\n    this.rebuild();\n    Line.__super__.constructor.call(this, this.node);\n  }\n\n  Line.prototype.buildLeaves = function(node, formats) {\n    return _.each(dom(node).childNodes(), (function(_this) {\n      return function(node) {\n        var nodeFormats;\n        node = Normalizer.normalizeNode(node);\n        nodeFormats = _.clone(formats);\n        _.each(_this.doc.formats, function(format, name) {\n          if (!format.isType(Format.types.LINE) && format.match(node)) {\n            return nodeFormats[name] = format.value(node);\n          }\n        });\n        if (Leaf.isLeafNode(node)) {\n          return _this.leaves.append(new Leaf(node, nodeFormats));\n        } else {\n          return _this.buildLeaves(node, nodeFormats);\n        }\n      };\n    })(this));\n  };\n\n  Line.prototype.deleteText = function(offset, length) {\n    var deleteLength, leaf, _ref;\n    if (!(length > 0)) {\n      return;\n    }\n    _ref = this.findLeafAt(offset), leaf = _ref[0], offset = _ref[1];\n    while ((leaf != null) && length > 0) {\n      deleteLength = Math.min(length, leaf.length - offset);\n      leaf.deleteText(offset, deleteLength);\n      length -= deleteLength;\n      leaf = leaf.next;\n      offset = 0;\n    }\n    return this.rebuild();\n  };\n\n  Line.prototype.findLeaf = function(leafNode) {\n    var curLeaf;\n    curLeaf = this.leaves.first;\n    while (curLeaf != null) {\n      if (curLeaf.node === leafNode) {\n        return curLeaf;\n      }\n      curLeaf = curLeaf.next;\n    }\n    return null;\n  };\n\n  Line.prototype.findLeafAt = function(offset, inclusive) {\n    var leaf;\n    if (inclusive == null) {\n      inclusive = false;\n    }\n    if (offset >= this.length - 1) {\n      return [this.leaves.last, this.leaves.last.length];\n    }\n    leaf = this.leaves.first;\n    while (leaf != null) {\n      if (offset < leaf.length || (offset === leaf.length && inclusive)) {\n        return [leaf, offset];\n      }\n      offset -= leaf.length;\n      leaf = leaf.next;\n    }\n    return [this.leaves.last, offset - this.leaves.last.length];\n  };\n\n  Line.prototype.format = function(name, value) {\n    var formats;\n    if (_.isObject(name)) {\n      formats = name;\n    } else {\n      formats = {};\n      formats[name] = value;\n    }\n    _.each(formats, (function(_this) {\n      return function(value, name) {\n        var excludeFormat, format;\n        format = _this.doc.formats[name];\n        if (format.isType(Format.types.LINE)) {\n          if (format.config.exclude && _this.formats[format.config.exclude]) {\n            excludeFormat = _this.doc.formats[format.config.exclude];\n            if (excludeFormat != null) {\n              _this.node = excludeFormat.remove(_this.node);\n              delete _this.formats[format.config.exclude];\n            }\n          }\n          _this.node = format.add(_this.node, value);\n        }\n        if (value) {\n          return _this.formats[name] = value;\n        } else {\n          return delete _this.formats[name];\n        }\n      };\n    })(this));\n    return this.resetContent();\n  };\n\n  Line.prototype.formatText = function(offset, length, name, value) {\n    var format, leaf, leafOffset, leftNode, nextLeaf, rightNode, targetNode, _ref, _ref1, _ref2;\n    _ref = this.findLeafAt(offset), leaf = _ref[0], leafOffset = _ref[1];\n    format = this.doc.formats[name];\n    if (!((format != null) && format.config.type !== Format.types.LINE)) {\n      return;\n    }\n    while ((leaf != null) && length > 0) {\n      nextLeaf = leaf.next;\n      if ((value && leaf.formats[name] !== value) || (!value && (leaf.formats[name] != null))) {\n        targetNode = leaf.node;\n        if (leaf.formats[name] != null) {\n          dom(targetNode).splitAncestors(this.node);\n          while (!format.match(targetNode)) {\n            targetNode = targetNode.parentNode;\n          }\n        }\n        if (leafOffset > 0) {\n          _ref1 = dom(targetNode).split(leafOffset), leftNode = _ref1[0], targetNode = _ref1[1];\n        }\n        if (leaf.length > leafOffset + length) {\n          _ref2 = dom(targetNode).split(length), targetNode = _ref2[0], rightNode = _ref2[1];\n        }\n        format.add(targetNode, value);\n      }\n      length -= leaf.length - leafOffset;\n      leafOffset = 0;\n      leaf = nextLeaf;\n    }\n    return this.rebuild();\n  };\n\n  Line.prototype.insertText = function(offset, text, formats) {\n    var leaf, leafOffset, nextNode, node, prevNode, _ref, _ref1;\n    if (formats == null) {\n      formats = {};\n    }\n    if (!(text.length > 0)) {\n      return;\n    }\n    _ref = this.findLeafAt(offset), leaf = _ref[0], leafOffset = _ref[1];\n    if (_.isEqual(leaf.formats, formats)) {\n      leaf.insertText(leafOffset, text);\n      return this.resetContent();\n    } else {\n      node = _.reduce(formats, (function(_this) {\n        return function(node, value, name) {\n          return _this.doc.formats[name].add(node, value);\n        };\n      })(this), this.node.ownerDocument.createTextNode(text));\n      _ref1 = dom(leaf.node).split(leafOffset), prevNode = _ref1[0], nextNode = _ref1[1];\n      if (nextNode) {\n        nextNode = dom(nextNode).splitAncestors(this.node).get();\n      }\n      this.node.insertBefore(node, nextNode);\n      return this.rebuild();\n    }\n  };\n\n  Line.prototype.optimize = function() {\n    Normalizer.optimizeLine(this.node);\n    return this.rebuild();\n  };\n\n  Line.prototype.rebuild = function(force) {\n    if (force == null) {\n      force = false;\n    }\n    if (!force && (this.outerHTML != null) && this.outerHTML === this.node.outerHTML) {\n      if (_.all(this.leaves.toArray(), (function(_this) {\n        return function(leaf) {\n          return dom(leaf.node).isAncestor(_this.node);\n        };\n      })(this))) {\n        return false;\n      }\n    }\n    this.node = Normalizer.normalizeNode(this.node);\n    if (dom(this.node).length() === 0 && !this.node.querySelector(dom.DEFAULT_BREAK_TAG)) {\n      this.node.appendChild(this.node.ownerDocument.createElement(dom.DEFAULT_BREAK_TAG));\n    }\n    this.leaves = new LinkedList();\n    this.formats = _.reduce(this.doc.formats, (function(_this) {\n      return function(formats, format, name) {\n        if (format.isType(Format.types.LINE)) {\n          if (format.match(_this.node)) {\n            formats[name] = format.value(_this.node);\n          } else {\n            delete formats[name];\n          }\n        }\n        return formats;\n      };\n    })(this), this.formats);\n    this.buildLeaves(this.node, {});\n    this.resetContent();\n    return true;\n  };\n\n  Line.prototype.resetContent = function() {\n    if (this.node.id !== this.id) {\n      this.node.id = this.id;\n    }\n    this.outerHTML = this.node.outerHTML;\n    this.length = 1;\n    this.delta = new Delta();\n    this.leaves.toArray().forEach((function(_this) {\n      return function(leaf) {\n        _this.length += leaf.length;\n        if (dom.EMBED_TAGS[leaf.node.tagName] != null) {\n          return _this.delta.insert(1, leaf.formats);\n        } else {\n          return _this.delta.insert(leaf.text, leaf.formats);\n        }\n      };\n    })(this));\n    return this.delta.insert('\\n', this.formats);\n  };\n\n  return Line;\n\n})(LinkedList.Node);\n\nmodule.exports = Line;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/line.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/renderer.js":
/*!***************************************************!*\
  !*** ./node_modules/quilljs/lib/core/renderer.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var DEFAULT_STYLES, LIST_STYLES, Normalizer, Renderer, dom, rule, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nNormalizer = __webpack_require__(/*! ../lib/normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\nDEFAULT_STYLES = {\n  'html': {\n    'height': '100%',\n    'width': '100%'\n  },\n  'body': {\n    'box-sizing': 'border-box',\n    'cursor': 'text',\n    'font-family': \"'Helvetica', 'Arial', sans-serif\",\n    'font-size': '13px',\n    'height': '100%',\n    'line-height': '1.42',\n    'margin': '0px',\n    'overflow-x': 'hidden',\n    'overflow-y': 'auto',\n    'padding': '12px 15px'\n  },\n  '.editor-container': {\n    'height': '100%',\n    'outline': 'none',\n    'position': 'relative',\n    'tab-size': '4',\n    'white-space': 'pre-wrap'\n  },\n  '.editor-container div': {\n    'margin': '0',\n    'padding': '0'\n  },\n  '.editor-container a': {\n    'text-decoration': 'underline'\n  },\n  '.editor-container b': {\n    'font-weight': 'bold'\n  },\n  '.editor-container i': {\n    'font-style': 'italic'\n  },\n  '.editor-container s': {\n    'text-decoration': 'line-through'\n  },\n  '.editor-container u': {\n    'text-decoration': 'underline'\n  },\n  '.editor-container img': {\n    'max-width': '100%'\n  },\n  '.editor-container blockquote': {\n    'margin': '0 0 0 2em',\n    'padding': '0'\n  },\n  '.editor-container ol': {\n    'margin': '0 0 0 2em',\n    'padding': '0',\n    'list-style-type': 'decimal'\n  },\n  '.editor-container ul': {\n    'margin': '0 0 0 2em',\n    'padding': '0',\n    'list-style-type': 'disc'\n  }\n};\n\nLIST_STYLES = ['decimal', 'lower-alpha', 'lower-roman'];\n\nrule = '.editor-container ol > li';\n\n_.each([1, 2, 3, 4, 5, 6, 7, 8, 9], function(i) {\n  rule += ' > ol';\n  DEFAULT_STYLES[rule] = {\n    'list-style-type': LIST_STYLES[i % 3]\n  };\n  return rule += ' > li';\n});\n\nif (dom.isIE(10)) {\n  DEFAULT_STYLES[dom.DEFAULT_BREAK_TAG] = {\n    'display': 'none'\n  };\n}\n\nRenderer = (function() {\n  Renderer.objToCss = function(obj) {\n    return _.map(obj, function(value, key) {\n      var innerStr;\n      innerStr = _.map(value, function(innerValue, innerKey) {\n        return \"\" + innerKey + \": \" + innerValue + \";\";\n      }).join(' ');\n      return \"\" + key + \" { \" + innerStr + \" }\";\n    }).join(\"\\n\");\n  };\n\n  Renderer.buildFrame = function(container) {\n    var iframe, iframeDoc, root;\n    iframe = container.ownerDocument.createElement('iframe');\n    dom(iframe).attributes({\n      frameBorder: '0',\n      height: '100%',\n      width: '100%',\n      title: 'Quill Rich Text Editor',\n      role: 'presentation'\n    });\n    container.appendChild(iframe);\n    iframeDoc = iframe.contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write('<!DOCTYPE html>');\n    iframeDoc.close();\n    root = iframeDoc.createElement('div');\n    iframeDoc.body.appendChild(root);\n    return [root, iframe];\n  };\n\n  function Renderer(container, options) {\n    var _ref;\n    this.container = container;\n    this.options = options != null ? options : {};\n    this.container.innerHTML = '';\n    _ref = Renderer.buildFrame(this.container), this.root = _ref[0], this.iframe = _ref[1];\n    this.root.setAttribute('id', this.options.id);\n    this.iframe.setAttribute('name', this.options.id);\n    dom(this.root).addClass('editor-container');\n    dom(this.container).addClass('ql-container');\n    if (dom.isIOS()) {\n      dom(this.container).styles({\n        'overflow': 'auto',\n        '-webkit-overflow-scrolling': 'touch'\n      });\n    }\n    this.addStyles(DEFAULT_STYLES);\n    if (this.options.styles != null) {\n      _.defer(_.bind(this.addStyles, this, this.options.styles));\n    }\n  }\n\n  Renderer.prototype.addContainer = function(className, before) {\n    var container, refNode;\n    if (before == null) {\n      before = false;\n    }\n    refNode = before ? this.root : null;\n    container = this.root.ownerDocument.createElement('div');\n    dom(container).addClass(className);\n    this.root.parentNode.insertBefore(container, refNode);\n    return container;\n  };\n\n  Renderer.prototype.addStyles = function(css) {\n    var link, style;\n    if (typeof css === 'object') {\n      style = this.root.ownerDocument.createElement('style');\n      style.type = 'text/css';\n      css = Renderer.objToCss(css);\n      style.appendChild(this.root.ownerDocument.createTextNode(css));\n      return this.root.ownerDocument.head.appendChild(style);\n    } else if (typeof css === 'string') {\n      link = this.root.ownerDocument.createElement('link');\n      dom(link).attributes({\n        type: 'text/css',\n        rel: 'stylesheet',\n        href: css\n      });\n      return this.root.ownerDocument.head.appendChild(link);\n    }\n  };\n\n  return Renderer;\n\n})();\n\nmodule.exports = Renderer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/renderer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/core/selection.js":
/*!****************************************************!*\
  !*** ./node_modules/quilljs/lib/core/selection.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Leaf, Normalizer, Range, Selection, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nLeaf = __webpack_require__(/*! ./leaf */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/leaf.js\");\n\nNormalizer = __webpack_require__(/*! ../lib/normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\nRange = __webpack_require__(/*! ../lib/range */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/range.js\");\n\nSelection = (function() {\n  function Selection(doc, iframe, emitter) {\n    this.doc = doc;\n    this.iframe = iframe;\n    this.emitter = emitter;\n    this.document = this.doc.root.ownerDocument;\n    this.focus = false;\n    this.range = new Range(0, 0);\n    this.nullDelay = false;\n    this.update('silent');\n  }\n\n  Selection.prototype.checkFocus = function() {\n    return this.document.activeElement === this.doc.root && document.activeElement === this.iframe;\n  };\n\n  Selection.prototype.getRange = function(ignoreFocus) {\n    var end, nativeRange, start;\n    if (ignoreFocus == null) {\n      ignoreFocus = false;\n    }\n    if (this.checkFocus()) {\n      nativeRange = this._getNativeRange();\n      if (nativeRange == null) {\n        return null;\n      }\n      start = this._positionToIndex(nativeRange.startContainer, nativeRange.startOffset);\n      if (nativeRange.startContainer === nativeRange.endContainer && nativeRange.startOffset === nativeRange.endOffset) {\n        end = start;\n      } else {\n        end = this._positionToIndex(nativeRange.endContainer, nativeRange.endOffset);\n      }\n      return new Range(Math.min(start, end), Math.max(start, end));\n    } else if (ignoreFocus) {\n      return this.range;\n    } else {\n      return null;\n    }\n  };\n\n  Selection.prototype.preserve = function(fn) {\n    var endNode, endOffset, nativeRange, startNode, startOffset, _ref, _ref1, _ref2, _ref3;\n    nativeRange = this._getNativeRange();\n    if ((nativeRange != null) && this.checkFocus()) {\n      _ref = this._encodePosition(nativeRange.startContainer, nativeRange.startOffset), startNode = _ref[0], startOffset = _ref[1];\n      _ref1 = this._encodePosition(nativeRange.endContainer, nativeRange.endOffset), endNode = _ref1[0], endOffset = _ref1[1];\n      fn();\n      _ref2 = this._decodePosition(startNode, startOffset), startNode = _ref2[0], startOffset = _ref2[1];\n      _ref3 = this._decodePosition(endNode, endOffset), endNode = _ref3[0], endOffset = _ref3[1];\n      return this._setNativeRange(startNode, startOffset, endNode, endOffset);\n    } else {\n      return fn();\n    }\n  };\n\n  Selection.prototype.setRange = function(range, source) {\n    var endNode, endOffset, startNode, startOffset, _ref, _ref1, _ref2;\n    if (range != null) {\n      _ref = this._indexToPosition(range.start), startNode = _ref[0], startOffset = _ref[1];\n      if (range.isCollapsed()) {\n        _ref1 = [startNode, startOffset], endNode = _ref1[0], endOffset = _ref1[1];\n      } else {\n        _ref2 = this._indexToPosition(range.end), endNode = _ref2[0], endOffset = _ref2[1];\n      }\n      this._setNativeRange(startNode, startOffset, endNode, endOffset);\n    } else {\n      this._setNativeRange(null);\n    }\n    return this.update(source);\n  };\n\n  Selection.prototype.shiftAfter = function(index, length, fn) {\n    var range;\n    range = this.getRange();\n    fn();\n    if (range != null) {\n      range.shift(index, length);\n      return this.setRange(range, 'silent');\n    }\n  };\n\n  Selection.prototype.update = function(source) {\n    var emit, focus, range, toEmit;\n    focus = this.checkFocus();\n    range = this.getRange(true);\n    emit = source !== 'silent' && (!Range.compare(range, this.range) || focus !== this.focus);\n    toEmit = focus ? range : null;\n    if (toEmit === null && source === 'user' && !this.nullDelay) {\n      return this.nullDelay = true;\n    } else {\n      this.nullDelay = false;\n      this.range = range;\n      this.focus = focus;\n      if (emit) {\n        return this.emitter.emit(this.emitter.constructor.events.SELECTION_CHANGE, toEmit, source);\n      }\n    }\n  };\n\n  Selection.prototype._decodePosition = function(node, offset) {\n    var childIndex;\n    if (dom(node).isElement()) {\n      childIndex = _.indexOf(dom(node.parentNode).childNodes(), node);\n      offset += childIndex;\n      node = node.parentNode;\n    }\n    return [node, offset];\n  };\n\n  Selection.prototype._encodePosition = function(node, offset) {\n    var text;\n    while (true) {\n      if (dom(node).isTextNode() || node.tagName === dom.DEFAULT_BREAK_TAG || (dom.EMBED_TAGS[node.tagName] != null)) {\n        return [node, offset];\n      } else if (offset < node.childNodes.length) {\n        node = node.childNodes[offset];\n        offset = 0;\n      } else if (node.childNodes.length === 0) {\n        if (Normalizer.TAGS[node.tagName] == null) {\n          text = node.ownerDocument.createTextNode('');\n          node.appendChild(text);\n          node = text;\n        }\n        return [node, 0];\n      } else {\n        node = node.lastChild;\n        if (dom(node).isElement()) {\n          if (node.tagName === dom.DEFAULT_BREAK_TAG || (dom.EMBED_TAGS[node.tagName] != null)) {\n            return [node, 1];\n          } else {\n            offset = node.childNodes.length;\n          }\n        } else {\n          return [node, dom(node).length()];\n        }\n      }\n    }\n  };\n\n  Selection.prototype._getNativeRange = function() {\n    var range, selection;\n    selection = this.document.getSelection();\n    if ((selection != null ? selection.rangeCount : void 0) > 0) {\n      range = selection.getRangeAt(0);\n      if (dom(range.startContainer).isAncestor(this.doc.root, true)) {\n        if (range.startContainer === range.endContainer || dom(range.endContainer).isAncestor(this.doc.root, true)) {\n          return range;\n        }\n      }\n    }\n    return null;\n  };\n\n  Selection.prototype._indexToPosition = function(index) {\n    var leaf, offset, _ref;\n    if (this.doc.lines.length === 0) {\n      return [this.doc.root, 0];\n    }\n    _ref = this.doc.findLeafAt(index, true), leaf = _ref[0], offset = _ref[1];\n    return this._decodePosition(leaf.node, offset);\n  };\n\n  Selection.prototype._positionToIndex = function(node, offset) {\n    var leaf, leafNode, leafOffset, line, lineOffset, _ref;\n    _ref = this._encodePosition(node, offset), leafNode = _ref[0], offset = _ref[1];\n    line = this.doc.findLine(leafNode);\n    if (line == null) {\n      return 0;\n    }\n    leaf = line.findLeaf(leafNode);\n    lineOffset = 0;\n    while (line.prev != null) {\n      line = line.prev;\n      lineOffset += line.length;\n    }\n    if (leaf == null) {\n      return lineOffset;\n    }\n    leafOffset = 0;\n    while (leaf.prev != null) {\n      leaf = leaf.prev;\n      leafOffset += leaf.length;\n    }\n    return lineOffset + leafOffset + offset;\n  };\n\n  Selection.prototype._setNativeRange = function(startNode, startOffset, endNode, endOffset) {\n    var nativeRange, selection;\n    selection = this.document.getSelection();\n    if (!selection) {\n      return;\n    }\n    if (startNode != null) {\n      if (!this.checkFocus()) {\n        this.doc.root.focus();\n      }\n      nativeRange = this._getNativeRange();\n      if ((nativeRange == null) || startNode !== nativeRange.startContainer || startOffset !== nativeRange.startOffset || endNode !== nativeRange.endContainer || endOffset !== nativeRange.endOffset) {\n        selection.removeAllRanges();\n        nativeRange = this.document.createRange();\n        nativeRange.setStart(startNode, startOffset);\n        nativeRange.setEnd(endNode, endOffset);\n        selection.addRange(nativeRange);\n        if (!this.checkFocus()) {\n          return this.doc.root.focus();\n        }\n      }\n    } else {\n      selection.removeAllRanges();\n      return this.doc.root.blur();\n    }\n  };\n\n  return Selection;\n\n})();\n\nmodule.exports = Selection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/core/selection.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/quilljs/lib/index.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__(/*! ./modules/authorship */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/authorship.js\");\n\n__webpack_require__(/*! ./modules/image-tooltip */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/image-tooltip.js\");\n\n__webpack_require__(/*! ./modules/keyboard */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/keyboard.js\");\n\n__webpack_require__(/*! ./modules/link-tooltip */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/link-tooltip.js\");\n\n__webpack_require__(/*! ./modules/multi-cursor */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/multi-cursor.js\");\n\n__webpack_require__(/*! ./modules/paste-manager */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/paste-manager.js\");\n\n__webpack_require__(/*! ./modules/toolbar */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/toolbar.js\");\n\n__webpack_require__(/*! ./modules/tooltip */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/tooltip.js\");\n\n__webpack_require__(/*! ./modules/undo-manager */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/undo-manager.js\");\n\nmodule.exports = __webpack_require__(/*! ./quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBTyxDQUFDLGtHQUFzQjs7QUFFOUIsbUJBQU8sQ0FBQyx3R0FBeUI7O0FBRWpDLG1CQUFPLENBQUMsOEZBQW9COztBQUU1QixtQkFBTyxDQUFDLHNHQUF3Qjs7QUFFaEMsbUJBQU8sQ0FBQyxzR0FBd0I7O0FBRWhDLG1CQUFPLENBQUMsd0dBQXlCOztBQUVqQyxtQkFBTyxDQUFDLDRGQUFtQjs7QUFFM0IsbUJBQU8sQ0FBQyw0RkFBbUI7O0FBRTNCLG1CQUFPLENBQUMsc0dBQXdCOztBQUVoQyw4R0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3F1aWxsanMvbGliL2luZGV4LmpzP2YwYzUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9tb2R1bGVzL2F1dGhvcnNoaXAnKTtcblxucmVxdWlyZSgnLi9tb2R1bGVzL2ltYWdlLXRvb2x0aXAnKTtcblxucmVxdWlyZSgnLi9tb2R1bGVzL2tleWJvYXJkJyk7XG5cbnJlcXVpcmUoJy4vbW9kdWxlcy9saW5rLXRvb2x0aXAnKTtcblxucmVxdWlyZSgnLi9tb2R1bGVzL211bHRpLWN1cnNvcicpO1xuXG5yZXF1aXJlKCcuL21vZHVsZXMvcGFzdGUtbWFuYWdlcicpO1xuXG5yZXF1aXJlKCcuL21vZHVsZXMvdG9vbGJhcicpO1xuXG5yZXF1aXJlKCcuL21vZHVsZXMvdG9vbHRpcCcpO1xuXG5yZXF1aXJlKCcuL21vZHVsZXMvdW5kby1tYW5hZ2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9xdWlsbCcpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/color-picker.js":
/*!******************************************************!*\
  !*** ./node_modules/quilljs/lib/lib/color-picker.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var ColorPicker, Picker, dom,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\ndom = __webpack_require__(/*! ./dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nPicker = __webpack_require__(/*! ./picker */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/picker.js\");\n\nColorPicker = (function(_super) {\n  __extends(ColorPicker, _super);\n\n  function ColorPicker() {\n    ColorPicker.__super__.constructor.apply(this, arguments);\n    dom(this.container).addClass('ql-color-picker');\n  }\n\n  ColorPicker.prototype.buildItem = function(picker, option, index) {\n    var item;\n    item = ColorPicker.__super__.buildItem.call(this, picker, option, index);\n    item.style.backgroundColor = option.value;\n    return item;\n  };\n\n  return ColorPicker;\n\n})(Picker);\n\nmodule.exports = ColorPicker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvY29sb3ItcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0JBQWdCO0FBQ2hCLHdDQUF3QywwQkFBMEIsNkRBQTZELGtCQUFrQiw0QkFBNEIsbUNBQW1DLDhCQUE4QixvQ0FBb0M7O0FBRWxSLE1BQU0sbUJBQU8sQ0FBQyx3RUFBTzs7QUFFckIsU0FBUyxtQkFBTyxDQUFDLDhFQUFVOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvY29sb3ItcGlja2VyLmpzPzA0YWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIENvbG9yUGlja2VyLCBQaWNrZXIsIGRvbSxcbiAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG5kb20gPSByZXF1aXJlKCcuL2RvbScpO1xuXG5QaWNrZXIgPSByZXF1aXJlKCcuL3BpY2tlcicpO1xuXG5Db2xvclBpY2tlciA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgX19leHRlbmRzKENvbG9yUGlja2VyLCBfc3VwZXIpO1xuXG4gIGZ1bmN0aW9uIENvbG9yUGlja2VyKCkge1xuICAgIENvbG9yUGlja2VyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGRvbSh0aGlzLmNvbnRhaW5lcikuYWRkQ2xhc3MoJ3FsLWNvbG9yLXBpY2tlcicpO1xuICB9XG5cbiAgQ29sb3JQaWNrZXIucHJvdG90eXBlLmJ1aWxkSXRlbSA9IGZ1bmN0aW9uKHBpY2tlciwgb3B0aW9uLCBpbmRleCkge1xuICAgIHZhciBpdGVtO1xuICAgIGl0ZW0gPSBDb2xvclBpY2tlci5fX3N1cGVyX18uYnVpbGRJdGVtLmNhbGwodGhpcywgcGlja2VyLCBvcHRpb24sIGluZGV4KTtcbiAgICBpdGVtLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbi52YWx1ZTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfTtcblxuICByZXR1cm4gQ29sb3JQaWNrZXI7XG5cbn0pKFBpY2tlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sb3JQaWNrZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/color-picker.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js":
/*!*********************************************!*\
  !*** ./node_modules/quilljs/lib/lib/dom.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var SelectWrapper, Wrapper, dom, lastKeyEvent, _,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\nlastKeyEvent = null;\n\nWrapper = (function() {\n  function Wrapper(node) {\n    this.node = node;\n    this.trigger = __bind(this.trigger, this);\n  }\n\n  Wrapper.prototype.addClass = function(cssClass) {\n    if (this.hasClass(cssClass)) {\n      return;\n    }\n    if (this.node.classList != null) {\n      this.node.classList.add(cssClass);\n    } else if (this.node.className != null) {\n      this.node.className = (this.node.className + ' ' + cssClass).trim();\n    }\n    return this;\n  };\n\n  Wrapper.prototype.attributes = function(attributes) {\n    var attr, i, value, _i, _len, _ref;\n    if (attributes) {\n      _.each(attributes, (function(_this) {\n        return function(value, name) {\n          return _this.node.setAttribute(name, value);\n        };\n      })(this));\n      return this;\n    } else {\n      if (this.node.attributes == null) {\n        return {};\n      }\n      attributes = {};\n      _ref = this.node.attributes;\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        value = _ref[i];\n        attr = this.node.attributes[i];\n        attributes[attr.name] = attr.value;\n      }\n      return attributes;\n    }\n  };\n\n  Wrapper.prototype.child = function(offset) {\n    var child, length;\n    child = this.node.firstChild;\n    length = dom(child).length();\n    while (child != null) {\n      if (offset < length) {\n        break;\n      }\n      offset -= length;\n      child = child.nextSibling;\n      length = dom(child).length();\n    }\n    if (child == null) {\n      child = this.node.lastChild;\n      offset = dom(child).length();\n    }\n    return [child, offset];\n  };\n\n  Wrapper.prototype.childNodes = function() {\n    return _.map(this.node.childNodes);\n  };\n\n  Wrapper.prototype.classes = function() {\n    return this.node.className.split(/\\s+/);\n  };\n\n  Wrapper.prototype.descendants = function() {\n    return _.map(this.node.getElementsByTagName('*'));\n  };\n\n  Wrapper.prototype.get = function() {\n    return this.node;\n  };\n\n  Wrapper.prototype.hasClass = function(cssClass) {\n    if (this.node.classList != null) {\n      return this.node.classList.contains(cssClass);\n    } else if (this.node.className != null) {\n      return _.indexOf(this.classes(), cssClass) > -1;\n    }\n    return false;\n  };\n\n  Wrapper.prototype.isAncestor = function(ancestor, inclusive) {\n    var node;\n    if (inclusive == null) {\n      inclusive = false;\n    }\n    if (ancestor === this.node) {\n      return inclusive;\n    }\n    node = this.node;\n    while (node) {\n      if (node === ancestor) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  };\n\n  Wrapper.prototype.isElement = function() {\n    var _ref;\n    return ((_ref = this.node) != null ? _ref.nodeType : void 0) === dom.ELEMENT_NODE;\n  };\n\n  Wrapper.prototype.isTextNode = function() {\n    var _ref;\n    return ((_ref = this.node) != null ? _ref.nodeType : void 0) === dom.TEXT_NODE;\n  };\n\n  Wrapper.prototype.length = function() {\n    var length;\n    if (this.node == null) {\n      return 0;\n    }\n    length = this.text().length;\n    if (this.isElement()) {\n      length += this.node.querySelectorAll(_.keys(dom.EMBED_TAGS).join(',')).length;\n    }\n    return length;\n  };\n\n  Wrapper.prototype.merge = function(node) {\n    var $node;\n    $node = dom(node);\n    if (this.isElement()) {\n      $node.moveChildren(this.node);\n      this.normalize();\n    } else {\n      this.text(this.text() + $node.text());\n    }\n    $node.remove();\n    return this;\n  };\n\n  Wrapper.prototype.moveChildren = function(newParent) {\n    _.each(this.childNodes(), function(child) {\n      return newParent.appendChild(child);\n    });\n    return this;\n  };\n\n  Wrapper.prototype.nextLineNode = function(root) {\n    var nextNode;\n    nextNode = this.node.nextSibling;\n    if ((nextNode == null) && this.node.parentNode !== root) {\n      nextNode = this.node.parentNode.nextSibling;\n    }\n    if ((nextNode != null) && (dom.LIST_TAGS[nextNode.tagName] != null)) {\n      nextNode = nextNode.firstChild;\n    }\n    return nextNode;\n  };\n\n  Wrapper.prototype.normalize = function() {\n    var $node, curNode, followingNode, nextNode;\n    curNode = this.node.firstChild;\n    while (curNode != null) {\n      nextNode = curNode.nextSibling;\n      $node = dom(curNode);\n      if ((nextNode != null) && dom(nextNode).isTextNode()) {\n        if ($node.text().length === 0) {\n          $node.remove();\n        } else if ($node.isTextNode()) {\n          followingNode = nextNode.nextSibling;\n          $node.merge(nextNode);\n          nextNode = followingNode;\n        }\n      }\n      curNode = nextNode;\n    }\n    return this;\n  };\n\n  Wrapper.prototype.on = function(eventName, listener) {\n    this.node.addEventListener(eventName, (function(_this) {\n      return function(event) {\n        var arg, propagate;\n        arg = lastKeyEvent && (eventName === 'keydown' || eventName === 'keyup') ? lastKeyEvent : event;\n        propagate = listener.call(_this.node, arg);\n        if (!propagate) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        return propagate;\n      };\n    })(this));\n    return this;\n  };\n\n  Wrapper.prototype.remove = function() {\n    var _ref;\n    if ((_ref = this.node.parentNode) != null) {\n      _ref.removeChild(this.node);\n    }\n    this.node = null;\n    return null;\n  };\n\n  Wrapper.prototype.removeClass = function(cssClass) {\n    var classArray;\n    if (!this.hasClass(cssClass)) {\n      return;\n    }\n    if (this.node.classList != null) {\n      return this.node.classList.remove(cssClass);\n    } else if (this.node.className != null) {\n      classArray = this.classes();\n      classArray.splice(_.indexOf(classArray, cssClass), 1);\n      this.node.className = classArray.join(' ');\n    }\n    return this;\n  };\n\n  Wrapper.prototype.replace = function(newNode) {\n    this.node.parentNode.replaceChild(newNode, this.node);\n    this.node = newNode;\n    return newNode;\n  };\n\n  Wrapper.prototype.splitAncestors = function(root, force) {\n    var nextNode, parentClone, parentNode, refNode;\n    if (force == null) {\n      force = false;\n    }\n    if (this.node === root || this.node.parentNode === root) {\n      return this;\n    }\n    if ((this.node.previousSibling != null) || force) {\n      parentNode = this.node.parentNode;\n      parentClone = parentNode.cloneNode(false);\n      parentNode.parentNode.insertBefore(parentClone, parentNode.nextSibling);\n      refNode = this.node;\n      while (refNode != null) {\n        nextNode = refNode.nextSibling;\n        parentClone.appendChild(refNode);\n        refNode = nextNode;\n      }\n      return dom(parentClone).splitAncestors(root);\n    } else {\n      return dom(this.node.parentNode).splitAncestors(root);\n    }\n  };\n\n  Wrapper.prototype.split = function(offset, force) {\n    var after, child, childLeft, childRight, left, nextRight, nodeLength, right, _ref, _ref1;\n    if (force == null) {\n      force = false;\n    }\n    nodeLength = this.length();\n    offset = Math.max(0, offset);\n    offset = Math.min(offset, nodeLength);\n    if (!(force || offset !== 0)) {\n      return [this.node.previousSibling, this.node, false];\n    }\n    if (!(force || offset !== nodeLength)) {\n      return [this.node, this.node.nextSibling, false];\n    }\n    if (this.node.nodeType === dom.TEXT_NODE) {\n      after = this.node.splitText(offset);\n      return [this.node, after, true];\n    } else {\n      left = this.node;\n      right = this.node.cloneNode(false);\n      this.node.parentNode.insertBefore(right, left.nextSibling);\n      _ref = this.child(offset), child = _ref[0], offset = _ref[1];\n      _ref1 = dom(child).split(offset), childLeft = _ref1[0], childRight = _ref1[1];\n      while (childRight !== null) {\n        nextRight = childRight.nextSibling;\n        right.appendChild(childRight);\n        childRight = nextRight;\n      }\n      return [left, right, true];\n    }\n  };\n\n  Wrapper.prototype.styles = function(styles, overwrite) {\n    var obj, styleString;\n    if (overwrite == null) {\n      overwrite = false;\n    }\n    if (styles) {\n      if (!overwrite) {\n        styles = _.defaults(styles, this.styles());\n      }\n      styleString = _.map(styles, function(style, name) {\n        return \"\" + name + \": \" + style;\n      }).join('; ') + ';';\n      this.node.setAttribute('style', styleString);\n      return this;\n    } else {\n      styleString = this.node.getAttribute('style') || '';\n      obj = _.reduce(styleString.split(';'), function(styles, str) {\n        var name, value, _ref;\n        _ref = str.split(':'), name = _ref[0], value = _ref[1];\n        if (name && value) {\n          name = name.trim();\n          value = value.trim();\n          styles[name.toLowerCase()] = value;\n        }\n        return styles;\n      }, {});\n      return obj;\n    }\n  };\n\n  Wrapper.prototype.switchTag = function(newTag) {\n    var attributes, newNode;\n    newTag = newTag.toUpperCase();\n    if (this.node.tagName === newTag) {\n      return this;\n    }\n    newNode = this.node.ownerDocument.createElement(newTag);\n    attributes = this.attributes();\n    if (dom.VOID_TAGS[newTag] == null) {\n      this.moveChildren(newNode);\n    }\n    this.replace(newNode);\n    return this.attributes(attributes).get();\n  };\n\n  Wrapper.prototype.text = function(text) {\n    if (text != null) {\n      switch (this.node.nodeType) {\n        case dom.ELEMENT_NODE:\n          this.node.textContent = text;\n          break;\n        case dom.TEXT_NODE:\n          this.node.data = text;\n      }\n      return this;\n    } else {\n      switch (this.node.nodeType) {\n        case dom.ELEMENT_NODE:\n          if (this.node.tagName === dom.DEFAULT_BREAK_TAG) {\n            return \"\";\n          }\n          if (dom.EMBED_TAGS[this.node.tagName] != null) {\n            return dom.EMBED_TEXT;\n          }\n          if (this.node.textContent != null) {\n            return this.node.textContent;\n          }\n          return \"\";\n        case dom.TEXT_NODE:\n          return this.node.data || \"\";\n        default:\n          return \"\";\n      }\n    }\n  };\n\n  Wrapper.prototype.textNodes = function() {\n    var textNode, textNodes, walker;\n    walker = this.node.ownerDocument.createTreeWalker(this.node, NodeFilter.SHOW_TEXT, null, false);\n    textNodes = [];\n    while (textNode = walker.nextNode()) {\n      textNodes.push(textNode);\n    }\n    return textNodes;\n  };\n\n  Wrapper.prototype.toggleClass = function(className, state) {\n    if (state == null) {\n      state = !this.hasClass(className);\n    }\n    if (state) {\n      this.addClass(className);\n    } else {\n      this.removeClass(className);\n    }\n    return this;\n  };\n\n  Wrapper.prototype.trigger = function(eventName, options) {\n    var event, initFn, modifiers;\n    if (options == null) {\n      options = {};\n    }\n    if (_.indexOf(['keypress', 'keydown', 'keyup'], eventName) < 0) {\n      event = this.node.ownerDocument.createEvent('Event');\n      event.initEvent(eventName, options.bubbles, options.cancelable);\n    } else {\n      event = this.node.ownerDocument.createEvent('KeyboardEvent');\n      lastKeyEvent = _.clone(options);\n      if (_.isNumber(options.key)) {\n        lastKeyEvent.which = options.key;\n      } else if (_.isString(options.key)) {\n        lastKeyEvent.which = options.key.toUpperCase().charCodeAt(0);\n      } else {\n        lastKeyEvent.which = 0;\n      }\n      if (dom.isIE(10)) {\n        modifiers = [];\n        if (options.altKey) {\n          modifiers.push('Alt');\n        }\n        if (options.ctrlKey) {\n          modifiers.push('Control');\n        }\n        if (options.metaKey) {\n          modifiers.push('Meta');\n        }\n        if (options.shiftKey) {\n          modifiers.push('Shift');\n        }\n        event.initKeyboardEvent(eventName, options.bubbles, options.cancelable, this.window(), 0, 0, modifiers.join(' '), null, null);\n      } else {\n        initFn = _.isFunction(event.initKeyboardEvent) ? 'initKeyboardEvent' : 'initKeyEvent';\n        event[initFn](eventName, options.bubbles, options.cancelable, this.window(), options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, 0, 0);\n      }\n    }\n    this.node.dispatchEvent(event);\n    lastKeyEvent = null;\n    return this;\n  };\n\n  Wrapper.prototype.unwrap = function() {\n    var next, ret;\n    ret = this.node.firstChild;\n    next = this.node.nextSibling;\n    _.each(this.childNodes(), (function(_this) {\n      return function(child) {\n        return _this.node.parentNode.insertBefore(child, next);\n      };\n    })(this));\n    this.remove();\n    return ret;\n  };\n\n  Wrapper.prototype.window = function() {\n    return this.node.ownerDocument.defaultView || this.node.ownerDocument.parentWindow;\n  };\n\n  Wrapper.prototype.wrap = function(wrapper) {\n    var parent;\n    if (this.node.parentNode != null) {\n      this.node.parentNode.insertBefore(wrapper, this.node);\n    }\n    parent = wrapper;\n    while (parent.firstChild != null) {\n      parent = wrapper.firstChild;\n    }\n    parent.appendChild(this.node);\n    return this;\n  };\n\n  return Wrapper;\n\n})();\n\nSelectWrapper = (function(_super) {\n  __extends(SelectWrapper, _super);\n\n  function SelectWrapper() {\n    return SelectWrapper.__super__.constructor.apply(this, arguments);\n  }\n\n  SelectWrapper.prototype[\"default\"] = function() {\n    return this.node.querySelector('option[selected]');\n  };\n\n  SelectWrapper.prototype.option = function(option, trigger) {\n    var child, i, value, _i, _len, _ref;\n    if (trigger == null) {\n      trigger = true;\n    }\n    value = _.isElement(option) ? option.value : option;\n    if (value) {\n      value = value.replace(/[^\\w]+/g, '');\n      _ref = this.node.children;\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        child = _ref[i];\n        if (child.value.replace(/[^\\w]+/g, '') === value) {\n          this.node.selectedIndex = i;\n          break;\n        }\n      }\n    } else {\n      this.node.selectedIndex = -1;\n    }\n    if (trigger) {\n      this.trigger('change');\n    }\n    return this;\n  };\n\n  SelectWrapper.prototype.reset = function(trigger) {\n    var option;\n    if (trigger == null) {\n      trigger = true;\n    }\n    option = this[\"default\"]();\n    if (option != null) {\n      option.selected = true;\n    } else {\n      this.node.selectedIndex = 0;\n    }\n    if (trigger) {\n      this.trigger('change');\n    }\n    return this;\n  };\n\n  SelectWrapper.prototype.value = function() {\n    if (this.node.selectedIndex > -1) {\n      return this.node.options[this.node.selectedIndex].value;\n    } else {\n      return '';\n    }\n  };\n\n  return SelectWrapper;\n\n})(Wrapper);\n\ndom = function(node) {\n  if ((node != null ? node.tagName : void 0) === 'SELECT') {\n    return new SelectWrapper(node);\n  } else {\n    return new Wrapper(node);\n  }\n};\n\ndom = _.extend(dom, {\n  ELEMENT_NODE: 1,\n  NOBREAK_SPACE: \"&nbsp;\",\n  TEXT_NODE: 3,\n  ZERO_WIDTH_NOBREAK_SPACE: \"\\uFEFF\",\n  DEFAULT_BLOCK_TAG: 'DIV',\n  DEFAULT_BREAK_TAG: 'BR',\n  DEFAULT_INLINE_TAG: 'SPAN',\n  EMBED_TEXT: '!',\n  FONT_SIZES: {\n    '10px': 1,\n    '13px': 2,\n    '16px': 3,\n    '18px': 4,\n    '24px': 5,\n    '32px': 6,\n    '48px': 7\n  },\n  KEYS: {\n    BACKSPACE: 8,\n    TAB: 9,\n    ENTER: 13,\n    ESCAPE: 27,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    DELETE: 46\n  },\n  BLOCK_TAGS: {\n    'ADDRESS': 'ADDRESS',\n    'ARTICLE': 'ARTICLE',\n    'ASIDE': 'ASIDE',\n    'AUDIO': 'AUDIO',\n    'BLOCKQUOTE': 'BLOCKQUOTE',\n    'CANVAS': 'CANVAS',\n    'DD': 'DD',\n    'DIV': 'DIV',\n    'DL': 'DL',\n    'FIGCAPTION': 'FIGCAPTION',\n    'FIGURE': 'FIGURE',\n    'FOOTER': 'FOOTER',\n    'FORM': 'FORM',\n    'H1': 'H1',\n    'H2': 'H2',\n    'H3': 'H3',\n    'H4': 'H4',\n    'H5': 'H5',\n    'H6': 'H6',\n    'HEADER': 'HEADER',\n    'HGROUP': 'HGROUP',\n    'LI': 'LI',\n    'OL': 'OL',\n    'OUTPUT': 'OUTPUT',\n    'P': 'P',\n    'PRE': 'PRE',\n    'SECTION': 'SECTION',\n    'TABLE': 'TABLE',\n    'TBODY': 'TBODY',\n    'TD': 'TD',\n    'TFOOT': 'TFOOT',\n    'TH': 'TH',\n    'THEAD': 'THEAD',\n    'TR': 'TR',\n    'UL': 'UL',\n    'VIDEO': 'VIDEO'\n  },\n  EMBED_TAGS: {\n    'IMG': 'IMG'\n  },\n  LINE_TAGS: {\n    'DIV': 'DIV',\n    'LI': 'LI'\n  },\n  LIST_TAGS: {\n    'OL': 'OL',\n    'UL': 'UL'\n  },\n  VOID_TAGS: {\n    'AREA': 'AREA',\n    'BASE': 'BASE',\n    'BR': 'BR',\n    'COL': 'COL',\n    'COMMAND': 'COMMAND',\n    'EMBED': 'EMBED',\n    'HR': 'HR',\n    'IMG': 'IMG',\n    'INPUT': 'INPUT',\n    'KEYGEN': 'KEYGEN',\n    'LINK': 'LINK',\n    'META': 'META',\n    'PARAM': 'PARAM',\n    'SOURCE': 'SOURCE',\n    'TRACK': 'TRACK',\n    'WBR': 'WBR'\n  },\n  convertFontSize: function(size) {\n    var i, s, sources, targets;\n    if (_.isString(size) && size.indexOf('px') > -1) {\n      sources = _.keys(dom.FONT_SIZES);\n      targets = _.values(dom.FONT_SIZES);\n    } else {\n      targets = _.keys(dom.FONT_SIZES);\n      sources = _.values(dom.FONT_SIZES);\n    }\n    for (i in sources) {\n      s = sources[i];\n      if (parseInt(size) <= parseInt(s)) {\n        return targets[i];\n      }\n    }\n    return _.last(targets);\n  },\n  isIE: function(maxVersion) {\n    var version;\n    version = document.documentMode;\n    return version && maxVersion >= version;\n  },\n  isIOS: function() {\n    return /iPhone|iPad/i.test(navigator.userAgent);\n  },\n  isMac: function() {\n    return /Mac/i.test(navigator.platform);\n  }\n});\n\nmodule.exports = dom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/linked-list.js":
/*!*****************************************************!*\
  !*** ./node_modules/quilljs/lib/lib/linked-list.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var LinkedList, Node;\n\nNode = (function() {\n  function Node(data) {\n    this.data = data;\n    this.prev = this.next = null;\n  }\n\n  return Node;\n\n})();\n\nLinkedList = (function() {\n  LinkedList.Node = Node;\n\n  function LinkedList() {\n    this.length = 0;\n    this.first = this.last = null;\n  }\n\n  LinkedList.prototype.append = function(node) {\n    if (this.first != null) {\n      node.next = null;\n      this.last.next = node;\n    } else {\n      this.first = node;\n    }\n    node.prev = this.last;\n    this.last = node;\n    return this.length += 1;\n  };\n\n  LinkedList.prototype.insertAfter = function(refNode, newNode) {\n    newNode.prev = refNode;\n    if (refNode != null) {\n      newNode.next = refNode.next;\n      if (refNode.next != null) {\n        refNode.next.prev = newNode;\n      }\n      refNode.next = newNode;\n      if (refNode === this.last) {\n        this.last = newNode;\n      }\n    } else {\n      newNode.next = this.first;\n      this.first.prev = newNode;\n      this.first = newNode;\n    }\n    return this.length += 1;\n  };\n\n  LinkedList.prototype.remove = function(node) {\n    if (this.length > 1) {\n      if (node.prev != null) {\n        node.prev.next = node.next;\n      }\n      if (node.next != null) {\n        node.next.prev = node.prev;\n      }\n      if (node === this.first) {\n        this.first = node.next;\n      }\n      if (node === this.last) {\n        this.last = node.prev;\n      }\n    } else {\n      this.first = this.last = null;\n    }\n    node.prev = node.next = null;\n    return this.length -= 1;\n  };\n\n  LinkedList.prototype.toArray = function() {\n    var arr, cur;\n    arr = [];\n    cur = this.first;\n    while (cur != null) {\n      arr.push(cur);\n      cur = cur.next;\n    }\n    return arr;\n  };\n\n  return LinkedList;\n\n})();\n\nmodule.exports = LinkedList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvbGlua2VkLWxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvbGlua2VkLWxpc3QuanM/NDM5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTGlua2VkTGlzdCwgTm9kZTtcblxuTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnByZXYgPSB0aGlzLm5leHQgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIE5vZGU7XG5cbn0pKCk7XG5cbkxpbmtlZExpc3QgPSAoZnVuY3Rpb24oKSB7XG4gIExpbmtlZExpc3QuTm9kZSA9IE5vZGU7XG5cbiAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5maXJzdCA9IHRoaXMubGFzdCA9IG51bGw7XG4gIH1cblxuICBMaW5rZWRMaXN0LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKHRoaXMuZmlyc3QgIT0gbnVsbCkge1xuICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMubGFzdC5uZXh0ID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5maXJzdCA9IG5vZGU7XG4gICAgfVxuICAgIG5vZGUucHJldiA9IHRoaXMubGFzdDtcbiAgICB0aGlzLmxhc3QgPSBub2RlO1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCArPSAxO1xuICB9O1xuXG4gIExpbmtlZExpc3QucHJvdG90eXBlLmluc2VydEFmdGVyID0gZnVuY3Rpb24ocmVmTm9kZSwgbmV3Tm9kZSkge1xuICAgIG5ld05vZGUucHJldiA9IHJlZk5vZGU7XG4gICAgaWYgKHJlZk5vZGUgIT0gbnVsbCkge1xuICAgICAgbmV3Tm9kZS5uZXh0ID0gcmVmTm9kZS5uZXh0O1xuICAgICAgaWYgKHJlZk5vZGUubmV4dCAhPSBudWxsKSB7XG4gICAgICAgIHJlZk5vZGUubmV4dC5wcmV2ID0gbmV3Tm9kZTtcbiAgICAgIH1cbiAgICAgIHJlZk5vZGUubmV4dCA9IG5ld05vZGU7XG4gICAgICBpZiAocmVmTm9kZSA9PT0gdGhpcy5sYXN0KSB7XG4gICAgICAgIHRoaXMubGFzdCA9IG5ld05vZGU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld05vZGUubmV4dCA9IHRoaXMuZmlyc3Q7XG4gICAgICB0aGlzLmZpcnN0LnByZXYgPSBuZXdOb2RlO1xuICAgICAgdGhpcy5maXJzdCA9IG5ld05vZGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxlbmd0aCArPSAxO1xuICB9O1xuXG4gIExpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAobm9kZS5wcmV2ICE9IG51bGwpIHtcbiAgICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5uZXh0ICE9IG51bGwpIHtcbiAgICAgICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgICB9XG4gICAgICBpZiAobm9kZSA9PT0gdGhpcy5maXJzdCkge1xuICAgICAgICB0aGlzLmZpcnN0ID0gbm9kZS5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IHRoaXMubGFzdCkge1xuICAgICAgICB0aGlzLmxhc3QgPSBub2RlLnByZXY7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmlyc3QgPSB0aGlzLmxhc3QgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLnByZXYgPSBub2RlLm5leHQgPSBudWxsO1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCAtPSAxO1xuICB9O1xuXG4gIExpbmtlZExpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJyLCBjdXI7XG4gICAgYXJyID0gW107XG4gICAgY3VyID0gdGhpcy5maXJzdDtcbiAgICB3aGlsZSAoY3VyICE9IG51bGwpIHtcbiAgICAgIGFyci5wdXNoKGN1cik7XG4gICAgICBjdXIgPSBjdXIubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfTtcblxuICByZXR1cm4gTGlua2VkTGlzdDtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRMaXN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/linked-list.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js":
/*!****************************************************!*\
  !*** ./node_modules/quilljs/lib/lib/normalizer.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Normalizer, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ./dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nNormalizer = {\n  ALIASES: {\n    'STRONG': 'B',\n    'EM': 'I',\n    'DEL': 'S',\n    'STRIKE': 'S'\n  },\n  ATTRIBUTES: {\n    'color': 'color',\n    'face': 'fontFamily',\n    'size': 'fontSize'\n  },\n  STYLES: {\n    'background-color': 'background-color',\n    'color': 'color',\n    'font-family': 'font-family',\n    'font-size': 'font-size',\n    'text-align': 'text-align'\n  },\n  TAGS: {\n    'DIV': 'DIV',\n    'BR': 'BR',\n    'SPAN': 'SPAN',\n    'B': 'B',\n    'I': 'I',\n    'S': 'S',\n    'U': 'U',\n    'A': 'A',\n    'IMG': 'IMG',\n    'OL': 'OL',\n    'UL': 'UL',\n    'LI': 'LI'\n  },\n  handleBreaks: function(lineNode) {\n    var breaks;\n    breaks = _.map(lineNode.querySelectorAll(dom.DEFAULT_BREAK_TAG));\n    _.each(breaks, (function(_this) {\n      return function(br) {\n        if ((br.nextSibling != null) && (!dom.isIE(10) || (br.previousSibling != null))) {\n          return dom(br.nextSibling).splitAncestors(lineNode.parentNode);\n        }\n      };\n    })(this));\n    return lineNode;\n  },\n  normalizeLine: function(lineNode) {\n    lineNode = Normalizer.wrapInline(lineNode);\n    lineNode = Normalizer.handleBreaks(lineNode);\n    lineNode = Normalizer.pullBlocks(lineNode);\n    lineNode = Normalizer.normalizeNode(lineNode);\n    Normalizer.unwrapText(lineNode);\n    if ((lineNode != null) && (dom.LIST_TAGS[lineNode.tagName] != null)) {\n      lineNode = lineNode.firstChild;\n    }\n    return lineNode;\n  },\n  normalizeNode: function(node) {\n    if (dom(node).isTextNode()) {\n      return node;\n    }\n    _.each(Normalizer.ATTRIBUTES, function(style, attribute) {\n      var value;\n      if (node.hasAttribute(attribute)) {\n        value = node.getAttribute(attribute);\n        if (attribute === 'size') {\n          value = dom.convertFontSize(value);\n        }\n        node.style[style] = value;\n        return node.removeAttribute(attribute);\n      }\n    });\n    Normalizer.whitelistStyles(node);\n    return Normalizer.whitelistTags(node);\n  },\n  optimizeLine: function(lineNode) {\n    var lineNodeLength, node, nodes, _results;\n    lineNodeLength = dom(lineNode).length();\n    nodes = dom(lineNode).descendants();\n    _results = [];\n    while (nodes.length > 0) {\n      node = nodes.pop();\n      if ((node != null ? node.parentNode : void 0) == null) {\n        continue;\n      }\n      if (dom.EMBED_TAGS[node.tagName] != null) {\n        continue;\n      }\n      if (node.tagName === dom.DEFAULT_BREAK_TAG) {\n        if (lineNodeLength !== 0) {\n          _results.push(dom(node).remove());\n        } else {\n          _results.push(void 0);\n        }\n      } else if (dom(node).length() === 0) {\n        nodes.push(node.nextSibling);\n        _results.push(dom(node).unwrap());\n      } else if ((node.previousSibling != null) && node.tagName === node.previousSibling.tagName) {\n        if (_.isEqual(dom(node).attributes(), dom(node.previousSibling).attributes())) {\n          nodes.push(node.firstChild);\n          _results.push(dom(node.previousSibling).merge(node));\n        } else {\n          _results.push(void 0);\n        }\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  },\n  pullBlocks: function(lineNode) {\n    var curNode;\n    curNode = lineNode.firstChild;\n    while (curNode != null) {\n      if ((dom.BLOCK_TAGS[curNode.tagName] != null) && curNode.tagName !== 'LI') {\n        if (curNode.previousSibling != null) {\n          dom(curNode).splitAncestors(lineNode.parentNode);\n        }\n        if (curNode.nextSibling != null) {\n          dom(curNode.nextSibling).splitAncestors(lineNode.parentNode);\n        }\n        if ((dom.LIST_TAGS[curNode.tagName] == null) || !curNode.firstChild) {\n          dom(curNode).unwrap();\n          Normalizer.pullBlocks(lineNode);\n        } else {\n          dom(curNode.parentNode).unwrap();\n          if (lineNode.parentNode == null) {\n            lineNode = curNode;\n          }\n        }\n        break;\n      }\n      curNode = curNode.nextSibling;\n    }\n    return lineNode;\n  },\n  stripComments: function(html) {\n    return html.replace(/<!--[\\s\\S]*?-->/g, '');\n  },\n  stripWhitespace: function(html) {\n    html = html.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    html = html.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    html = html.replace(/(\\r?\\n|\\r)+/g, ' ');\n    html = html.replace(/\\>\\s+\\</g, '><');\n    return html;\n  },\n  whitelistStyles: function(node) {\n    var original, styles;\n    original = dom(node).styles();\n    styles = _.omit(original, function(value, key) {\n      return Normalizer.STYLES[key] == null;\n    });\n    if (_.keys(styles).length < _.keys(original).length) {\n      if (_.keys(styles).length > 0) {\n        return dom(node).styles(styles, true);\n      } else {\n        return node.removeAttribute('style');\n      }\n    }\n  },\n  whitelistTags: function(node) {\n    if (!dom(node).isElement()) {\n      return node;\n    }\n    if (Normalizer.ALIASES[node.tagName] != null) {\n      node = dom(node).switchTag(Normalizer.ALIASES[node.tagName]);\n    } else if (Normalizer.TAGS[node.tagName] == null) {\n      if (dom.BLOCK_TAGS[node.tagName] != null) {\n        node = dom(node).switchTag(dom.DEFAULT_BLOCK_TAG);\n      } else if (!node.hasAttributes() && (node.firstChild != null)) {\n        node = dom(node).unwrap();\n      } else {\n        node = dom(node).switchTag(dom.DEFAULT_INLINE_TAG);\n      }\n    }\n    return node;\n  },\n  wrapInline: function(lineNode) {\n    var blockNode, nextNode;\n    if (dom.BLOCK_TAGS[lineNode.tagName] != null) {\n      return lineNode;\n    }\n    blockNode = lineNode.ownerDocument.createElement(dom.DEFAULT_BLOCK_TAG);\n    lineNode.parentNode.insertBefore(blockNode, lineNode);\n    while ((lineNode != null) && (dom.BLOCK_TAGS[lineNode.tagName] == null)) {\n      nextNode = lineNode.nextSibling;\n      blockNode.appendChild(lineNode);\n      lineNode = nextNode;\n    }\n    return blockNode;\n  },\n  unwrapText: function(lineNode) {\n    var spans;\n    spans = _.map(lineNode.querySelectorAll(dom.DEFAULT_INLINE_TAG));\n    return _.each(spans, function(span) {\n      if (!span.hasAttributes()) {\n        return dom(span).unwrap();\n      }\n    });\n  }\n};\n\nmodule.exports = Normalizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/picker.js":
/*!************************************************!*\
  !*** ./node_modules/quilljs/lib/lib/picker.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Normalizer, Picker, dom, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\ndom = __webpack_require__(/*! ./dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nNormalizer = __webpack_require__(/*! ./normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\nPicker = (function() {\n  Picker.TEMPLATE = '<span class=\"ql-picker-label\"></span><span class=\"ql-picker-options\"></span>';\n\n  function Picker(select) {\n    this.select = select;\n    this.container = this.select.ownerDocument.createElement('span');\n    this.buildPicker();\n    dom(this.container).addClass('ql-picker');\n    this.select.style.display = 'none';\n    this.select.parentNode.insertBefore(this.container, this.select);\n    dom(this.select.ownerDocument).on('click', (function(_this) {\n      return function() {\n        _this.close();\n        return true;\n      };\n    })(this));\n    dom(this.label).on('click', (function(_this) {\n      return function() {\n        _.defer(function() {\n          return dom(_this.container).toggleClass('ql-expanded');\n        });\n        return false;\n      };\n    })(this));\n    dom(this.select).on('change', (function(_this) {\n      return function() {\n        var item, option;\n        if (_this.select.selectedIndex > -1) {\n          item = _this.container.querySelectorAll('.ql-picker-item')[_this.select.selectedIndex];\n          option = _this.select.options[_this.select.selectedIndex];\n        }\n        _this.selectItem(item, false);\n        return dom(_this.label).toggleClass('ql-active', option !== dom(_this.select)[\"default\"]());\n      };\n    })(this));\n  }\n\n  Picker.prototype.buildItem = function(picker, option, index) {\n    var item;\n    item = this.select.ownerDocument.createElement('span');\n    item.setAttribute('data-value', option.getAttribute('value'));\n    dom(item).addClass('ql-picker-item').text(dom(option).text()).on('click', (function(_this) {\n      return function() {\n        _this.selectItem(item, true);\n        return _this.close();\n      };\n    })(this));\n    if (this.select.selectedIndex === index) {\n      this.selectItem(item, false);\n    }\n    return item;\n  };\n\n  Picker.prototype.buildPicker = function() {\n    var picker;\n    _.each(dom(this.select).attributes(), (function(_this) {\n      return function(value, name) {\n        return _this.container.setAttribute(name, value);\n      };\n    })(this));\n    this.container.innerHTML = Normalizer.stripWhitespace(Picker.TEMPLATE);\n    this.label = this.container.querySelector('.ql-picker-label');\n    picker = this.container.querySelector('.ql-picker-options');\n    return _.each(this.select.options, (function(_this) {\n      return function(option, i) {\n        var item;\n        item = _this.buildItem(picker, option, i);\n        return picker.appendChild(item);\n      };\n    })(this));\n  };\n\n  Picker.prototype.close = function() {\n    return dom(this.container).removeClass('ql-expanded');\n  };\n\n  Picker.prototype.selectItem = function(item, trigger) {\n    var selected, value;\n    selected = this.container.querySelector('.ql-selected');\n    if (selected != null) {\n      dom(selected).removeClass('ql-selected');\n    }\n    if (item != null) {\n      value = item.getAttribute('data-value');\n      dom(item).addClass('ql-selected');\n      dom(this.label).text(dom(item).text());\n      dom(this.select).option(value, trigger);\n      return this.label.setAttribute('data-value', value);\n    } else {\n      this.label.innerHTML = '&nbsp;';\n      return this.label.removeAttribute('data-value');\n    }\n  };\n\n  return Picker;\n\n})();\n\nmodule.exports = Picker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUksbUJBQU8sQ0FBQyx3RUFBUTs7QUFFcEIsTUFBTSxtQkFBTyxDQUFDLHdFQUFPOztBQUVyQixhQUFhLG1CQUFPLENBQUMsc0ZBQWM7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpbGxqcy9saWIvbGliL3BpY2tlci5qcz84NjVhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBOb3JtYWxpemVyLCBQaWNrZXIsIGRvbSwgXztcblxuXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5kb20gPSByZXF1aXJlKCcuL2RvbScpO1xuXG5Ob3JtYWxpemVyID0gcmVxdWlyZSgnLi9ub3JtYWxpemVyJyk7XG5cblBpY2tlciA9IChmdW5jdGlvbigpIHtcbiAgUGlja2VyLlRFTVBMQVRFID0gJzxzcGFuIGNsYXNzPVwicWwtcGlja2VyLWxhYmVsXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwicWwtcGlja2VyLW9wdGlvbnNcIj48L3NwYW4+JztcblxuICBmdW5jdGlvbiBQaWNrZXIoc2VsZWN0KSB7XG4gICAgdGhpcy5zZWxlY3QgPSBzZWxlY3Q7XG4gICAgdGhpcy5jb250YWluZXIgPSB0aGlzLnNlbGVjdC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0aGlzLmJ1aWxkUGlja2VyKCk7XG4gICAgZG9tKHRoaXMuY29udGFpbmVyKS5hZGRDbGFzcygncWwtcGlja2VyJyk7XG4gICAgdGhpcy5zZWxlY3Quc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB0aGlzLnNlbGVjdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNvbnRhaW5lciwgdGhpcy5zZWxlY3QpO1xuICAgIGRvbSh0aGlzLnNlbGVjdC5vd25lckRvY3VtZW50KS5vbignY2xpY2snLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICBkb20odGhpcy5sYWJlbCkub24oJ2NsaWNrJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIF8uZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbShfdGhpcy5jb250YWluZXIpLnRvZ2dsZUNsYXNzKCdxbC1leHBhbmRlZCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgZG9tKHRoaXMuc2VsZWN0KS5vbignY2hhbmdlJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpdGVtLCBvcHRpb247XG4gICAgICAgIGlmIChfdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA+IC0xKSB7XG4gICAgICAgICAgaXRlbSA9IF90aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucWwtcGlja2VyLWl0ZW0nKVtfdGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleF07XG4gICAgICAgICAgb3B0aW9uID0gX3RoaXMuc2VsZWN0Lm9wdGlvbnNbX3RoaXMuc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnNlbGVjdEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gZG9tKF90aGlzLmxhYmVsKS50b2dnbGVDbGFzcygncWwtYWN0aXZlJywgb3B0aW9uICE9PSBkb20oX3RoaXMuc2VsZWN0KVtcImRlZmF1bHRcIl0oKSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfVxuXG4gIFBpY2tlci5wcm90b3R5cGUuYnVpbGRJdGVtID0gZnVuY3Rpb24ocGlja2VyLCBvcHRpb24sIGluZGV4KSB7XG4gICAgdmFyIGl0ZW07XG4gICAgaXRlbSA9IHRoaXMuc2VsZWN0Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgb3B0aW9uLmdldEF0dHJpYnV0ZSgndmFsdWUnKSk7XG4gICAgZG9tKGl0ZW0pLmFkZENsYXNzKCdxbC1waWNrZXItaXRlbScpLnRleHQoZG9tKG9wdGlvbikudGV4dCgpKS5vbignY2xpY2snLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuc2VsZWN0SXRlbShpdGVtLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNsb3NlKCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICBpZiAodGhpcy5zZWxlY3Quc2VsZWN0ZWRJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIHRoaXMuc2VsZWN0SXRlbShpdGVtLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9O1xuXG4gIFBpY2tlci5wcm90b3R5cGUuYnVpbGRQaWNrZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGlja2VyO1xuICAgIF8uZWFjaChkb20odGhpcy5zZWxlY3QpLmF0dHJpYnV0ZXMoKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gTm9ybWFsaXplci5zdHJpcFdoaXRlc3BhY2UoUGlja2VyLlRFTVBMQVRFKTtcbiAgICB0aGlzLmxhYmVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLnFsLXBpY2tlci1sYWJlbCcpO1xuICAgIHBpY2tlciA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1waWNrZXItb3B0aW9ucycpO1xuICAgIHJldHVybiBfLmVhY2godGhpcy5zZWxlY3Qub3B0aW9ucywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob3B0aW9uLCBpKSB7XG4gICAgICAgIHZhciBpdGVtO1xuICAgICAgICBpdGVtID0gX3RoaXMuYnVpbGRJdGVtKHBpY2tlciwgb3B0aW9uLCBpKTtcbiAgICAgICAgcmV0dXJuIHBpY2tlci5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFBpY2tlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9tKHRoaXMuY29udGFpbmVyKS5yZW1vdmVDbGFzcygncWwtZXhwYW5kZWQnKTtcbiAgfTtcblxuICBQaWNrZXIucHJvdG90eXBlLnNlbGVjdEl0ZW0gPSBmdW5jdGlvbihpdGVtLCB0cmlnZ2VyKSB7XG4gICAgdmFyIHNlbGVjdGVkLCB2YWx1ZTtcbiAgICBzZWxlY3RlZCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5xbC1zZWxlY3RlZCcpO1xuICAgIGlmIChzZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICBkb20oc2VsZWN0ZWQpLnJlbW92ZUNsYXNzKCdxbC1zZWxlY3RlZCcpO1xuICAgIH1cbiAgICBpZiAoaXRlbSAhPSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJyk7XG4gICAgICBkb20oaXRlbSkuYWRkQ2xhc3MoJ3FsLXNlbGVjdGVkJyk7XG4gICAgICBkb20odGhpcy5sYWJlbCkudGV4dChkb20oaXRlbSkudGV4dCgpKTtcbiAgICAgIGRvbSh0aGlzLnNlbGVjdCkub3B0aW9uKHZhbHVlLCB0cmlnZ2VyKTtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYWJlbC5pbm5lckhUTUwgPSAnJm5ic3A7JztcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUGlja2VyO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBpY2tlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/picker.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/lib/range.js":
/*!***********************************************!*\
  !*** ./node_modules/quilljs/lib/lib/range.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Range, _;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\nRange = (function() {\n  Range.compare = function(r1, r2) {\n    if (r1 === r2) {\n      return true;\n    }\n    if (!((r1 != null) && (r2 != null))) {\n      return false;\n    }\n    return r1.equals(r2);\n  };\n\n  function Range(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n  Range.prototype.equals = function(range) {\n    if (range == null) {\n      return false;\n    }\n    return this.start === range.start && this.end === range.end;\n  };\n\n  Range.prototype.shift = function(index, length) {\n    var _ref;\n    return _ref = _.map([this.start, this.end], function(pos) {\n      if (index > pos) {\n        return pos;\n      }\n      if (length >= 0) {\n        return pos + length;\n      } else {\n        return Math.max(index, pos + length);\n      }\n    }), this.start = _ref[0], this.end = _ref[1], _ref;\n  };\n\n  Range.prototype.isCollapsed = function() {\n    return this.start === this.end;\n  };\n\n  return Range;\n\n})();\n\nmodule.exports = Range;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvcmFuZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSSxtQkFBTyxDQUFDLHdFQUFROztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9saWIvcmFuZ2UuanM/OWU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUmFuZ2UsIF87XG5cbl8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxuUmFuZ2UgPSAoZnVuY3Rpb24oKSB7XG4gIFJhbmdlLmNvbXBhcmUgPSBmdW5jdGlvbihyMSwgcjIpIHtcbiAgICBpZiAocjEgPT09IHIyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEoKHIxICE9IG51bGwpICYmIChyMiAhPSBudWxsKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHIxLmVxdWFscyhyMik7XG4gIH07XG5cbiAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCkge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgfVxuXG4gIFJhbmdlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIGlmIChyYW5nZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0YXJ0ID09PSByYW5nZS5zdGFydCAmJiB0aGlzLmVuZCA9PT0gcmFuZ2UuZW5kO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpIHtcbiAgICB2YXIgX3JlZjtcbiAgICByZXR1cm4gX3JlZiA9IF8ubWFwKFt0aGlzLnN0YXJ0LCB0aGlzLmVuZF0sIGZ1bmN0aW9uKHBvcykge1xuICAgICAgaWYgKGluZGV4ID4gcG9zKSB7XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IDApIHtcbiAgICAgICAgcmV0dXJuIHBvcyArIGxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChpbmRleCwgcG9zICsgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9KSwgdGhpcy5zdGFydCA9IF9yZWZbMF0sIHRoaXMuZW5kID0gX3JlZlsxXSwgX3JlZjtcbiAgfTtcblxuICBSYW5nZS5wcm90b3R5cGUuaXNDb2xsYXBzZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFydCA9PT0gdGhpcy5lbmQ7XG4gIH07XG5cbiAgcmV0dXJuIFJhbmdlO1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/lib/range.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/authorship.js":
/*!********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/authorship.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Authorship, Delta, Quill, dom, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nDelta = Quill.require('delta');\n\nAuthorship = (function() {\n  Authorship.DEFAULTS = {\n    authorId: null,\n    color: 'transparent',\n    enabled: false\n  };\n\n  function Authorship(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    if (this.options.button != null) {\n      this.attachButton(this.options.button);\n    }\n    if (this.options.enabled) {\n      this.enable();\n    }\n    this.quill.addFormat('author', {\n      \"class\": 'author-'\n    });\n    if (this.options.authorId == null) {\n      return;\n    }\n    this.quill.on(this.quill.constructor.events.PRE_EVENT, (function(_this) {\n      return function(eventName, delta, origin) {\n        var authorDelta, authorFormat;\n        if (eventName === _this.quill.constructor.events.TEXT_CHANGE && origin === 'user') {\n          authorDelta = new Delta();\n          authorFormat = {\n            author: _this.options.authorId\n          };\n          _.each(delta.ops, function(op) {\n            if (op[\"delete\"] != null) {\n              return;\n            }\n            if ((op.insert != null) || ((op.retain != null) && (op.attributes != null))) {\n              op.attributes || (op.attributes = {});\n              op.attributes.author = _this.options.authorId;\n              return authorDelta.retain(op.retain || op.insert.length || 1, authorFormat);\n            } else {\n              return authorDelta.retain(op.retain);\n            }\n          });\n          return _this.quill.updateContents(authorDelta, Quill.sources.SILENT);\n        }\n      };\n    })(this));\n    this.addAuthor(this.options.authorId, this.options.color);\n  }\n\n  Authorship.prototype.addAuthor = function(id, color) {\n    var styles;\n    styles = {};\n    styles[\".authorship .author-\" + id] = {\n      \"background-color\": \"\" + color\n    };\n    return this.quill.addStyles(styles);\n  };\n\n  Authorship.prototype.attachButton = function(button) {\n    var $button;\n    $button = dom(button);\n    return $button.on('click', (function(_this) {\n      return function() {\n        $button.toggleClass('ql-on');\n        return _this.enable($dom.hasClass('ql-on'));\n      };\n    })(this));\n  };\n\n  Authorship.prototype.enable = function(enabled) {\n    if (enabled == null) {\n      enabled = true;\n    }\n    return dom(this.quill.root).toggleClass('authorship', enabled);\n  };\n\n  Authorship.prototype.disable = function() {\n    return this.enable(false);\n  };\n\n  return Authorship;\n\n})();\n\nQuill.registerModule('authorship', Authorship);\n\nmodule.exports = Authorship;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL2F1dGhvcnNoaXAuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsUUFBUSxtQkFBTyxDQUFDLHlFQUFVOztBQUUxQjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpbGxqcy9saWIvbW9kdWxlcy9hdXRob3JzaGlwLmpzP2YxNzUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEF1dGhvcnNoaXAsIERlbHRhLCBRdWlsbCwgZG9tLCBfO1xuXG5RdWlsbCA9IHJlcXVpcmUoJy4uL3F1aWxsJyk7XG5cbl8gPSBRdWlsbC5yZXF1aXJlKCdsb2Rhc2gnKTtcblxuZG9tID0gUXVpbGwucmVxdWlyZSgnZG9tJyk7XG5cbkRlbHRhID0gUXVpbGwucmVxdWlyZSgnZGVsdGEnKTtcblxuQXV0aG9yc2hpcCA9IChmdW5jdGlvbigpIHtcbiAgQXV0aG9yc2hpcC5ERUZBVUxUUyA9IHtcbiAgICBhdXRob3JJZDogbnVsbCxcbiAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIEF1dGhvcnNoaXAocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAodGhpcy5vcHRpb25zLmJ1dHRvbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLmF0dGFjaEJ1dHRvbih0aGlzLm9wdGlvbnMuYnV0dG9uKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICB0aGlzLmVuYWJsZSgpO1xuICAgIH1cbiAgICB0aGlzLnF1aWxsLmFkZEZvcm1hdCgnYXV0aG9yJywge1xuICAgICAgXCJjbGFzc1wiOiAnYXV0aG9yLSdcbiAgICB9KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dGhvcklkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5xdWlsbC5vbih0aGlzLnF1aWxsLmNvbnN0cnVjdG9yLmV2ZW50cy5QUkVfRVZFTlQsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50TmFtZSwgZGVsdGEsIG9yaWdpbikge1xuICAgICAgICB2YXIgYXV0aG9yRGVsdGEsIGF1dGhvckZvcm1hdDtcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gX3RoaXMucXVpbGwuY29uc3RydWN0b3IuZXZlbnRzLlRFWFRfQ0hBTkdFICYmIG9yaWdpbiA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgYXV0aG9yRGVsdGEgPSBuZXcgRGVsdGEoKTtcbiAgICAgICAgICBhdXRob3JGb3JtYXQgPSB7XG4gICAgICAgICAgICBhdXRob3I6IF90aGlzLm9wdGlvbnMuYXV0aG9ySWRcbiAgICAgICAgICB9O1xuICAgICAgICAgIF8uZWFjaChkZWx0YS5vcHMsIGZ1bmN0aW9uKG9wKSB7XG4gICAgICAgICAgICBpZiAob3BbXCJkZWxldGVcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG9wLmluc2VydCAhPSBudWxsKSB8fCAoKG9wLnJldGFpbiAhPSBudWxsKSAmJiAob3AuYXR0cmlidXRlcyAhPSBudWxsKSkpIHtcbiAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcyB8fCAob3AuYXR0cmlidXRlcyA9IHt9KTtcbiAgICAgICAgICAgICAgb3AuYXR0cmlidXRlcy5hdXRob3IgPSBfdGhpcy5vcHRpb25zLmF1dGhvcklkO1xuICAgICAgICAgICAgICByZXR1cm4gYXV0aG9yRGVsdGEucmV0YWluKG9wLnJldGFpbiB8fCBvcC5pbnNlcnQubGVuZ3RoIHx8IDEsIGF1dGhvckZvcm1hdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gYXV0aG9yRGVsdGEucmV0YWluKG9wLnJldGFpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnF1aWxsLnVwZGF0ZUNvbnRlbnRzKGF1dGhvckRlbHRhLCBRdWlsbC5zb3VyY2VzLlNJTEVOVCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMuYWRkQXV0aG9yKHRoaXMub3B0aW9ucy5hdXRob3JJZCwgdGhpcy5vcHRpb25zLmNvbG9yKTtcbiAgfVxuXG4gIEF1dGhvcnNoaXAucHJvdG90eXBlLmFkZEF1dGhvciA9IGZ1bmN0aW9uKGlkLCBjb2xvcikge1xuICAgIHZhciBzdHlsZXM7XG4gICAgc3R5bGVzID0ge307XG4gICAgc3R5bGVzW1wiLmF1dGhvcnNoaXAgLmF1dGhvci1cIiArIGlkXSA9IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcIlwiICsgY29sb3JcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnF1aWxsLmFkZFN0eWxlcyhzdHlsZXMpO1xuICB9O1xuXG4gIEF1dGhvcnNoaXAucHJvdG90eXBlLmF0dGFjaEJ1dHRvbiA9IGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgIHZhciAkYnV0dG9uO1xuICAgICRidXR0b24gPSBkb20oYnV0dG9uKTtcbiAgICByZXR1cm4gJGJ1dHRvbi5vbignY2xpY2snLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgJGJ1dHRvbi50b2dnbGVDbGFzcygncWwtb24nKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmVuYWJsZSgkZG9tLmhhc0NsYXNzKCdxbC1vbicpKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIEF1dGhvcnNoaXAucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBpZiAoZW5hYmxlZCA9PSBudWxsKSB7XG4gICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbSh0aGlzLnF1aWxsLnJvb3QpLnRvZ2dsZUNsYXNzKCdhdXRob3JzaGlwJywgZW5hYmxlZCk7XG4gIH07XG5cbiAgQXV0aG9yc2hpcC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVuYWJsZShmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIEF1dGhvcnNoaXA7XG5cbn0pKCk7XG5cblF1aWxsLnJlZ2lzdGVyTW9kdWxlKCdhdXRob3JzaGlwJywgQXV0aG9yc2hpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aG9yc2hpcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/authorship.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/image-tooltip.js":
/*!***********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/image-tooltip.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, ImageTooltip, Quill, Tooltip, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\nTooltip = __webpack_require__(/*! ./tooltip */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/tooltip.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nDelta = Quill.require('delta');\n\nImageTooltip = (function(_super) {\n  __extends(ImageTooltip, _super);\n\n  ImageTooltip.DEFAULTS = {\n    styles: {\n      '.image-tooltip-container': {\n        'margin': '25px',\n        'padding': '10px',\n        'width': '300px'\n      },\n      '.image-tooltip-container:after': {\n        'clear': 'both',\n        'content': '\"\"',\n        'display': 'table'\n      },\n      '.image-tooltip-container .preview': {\n        'margin': '10px 0px',\n        'position': 'relative',\n        'border': '1px dashed #000',\n        'height': '200px'\n      },\n      '.image-tooltip-container .preview span': {\n        'display': 'inline-block',\n        'position': 'absolute',\n        'text-align': 'center',\n        'top': '40%',\n        'width': '100%'\n      },\n      '.image-tooltip-container img': {\n        'bottom': '0',\n        'left': '0',\n        'margin': 'auto',\n        'max-height': '100%',\n        'max-width': '100%',\n        'position': 'absolute',\n        'right': '0',\n        'top': '0'\n      },\n      '.image-tooltip-container .input': {\n        'box-sizing': 'border-box',\n        'width': '100%'\n      },\n      '.image-tooltip-container a': {\n        'border': '1px solid black',\n        'box-sizing': 'border-box',\n        'display': 'inline-block',\n        'float': 'left',\n        'padding': '5px',\n        'text-align': 'center',\n        'width': '50%'\n      }\n    },\n    template: '<input class=\"input\" type=\"textbox\"> <div class=\"preview\"> <span>Preview</span> </div> <a href=\"javascript:;\" class=\"cancel\">Cancel</a> <a href=\"javascript:;\" class=\"insert\">Insert</a>'\n  };\n\n  function ImageTooltip(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.options.styles = _.defaults(this.options.styles, Tooltip.DEFAULTS.styles);\n    this.options = _.defaults(this.options, Tooltip.DEFAULTS);\n    ImageTooltip.__super__.constructor.call(this, this.quill, this.options);\n    this.preview = this.container.querySelector('.preview');\n    this.textbox = this.container.querySelector('.input');\n    dom(this.container).addClass('image-tooltip-container');\n    this.initListeners();\n  }\n\n  ImageTooltip.prototype.initListeners = function() {\n    dom(this.container.querySelector('.insert')).on('click', _.bind(this.insertImage, this));\n    dom(this.container.querySelector('.cancel')).on('click', _.bind(this.hide, this));\n    dom(this.textbox).on('input', _.bind(this._preview, this));\n    this.initTextbox(this.textbox, this.insertImage, this.hide);\n    return this.quill.onModuleLoad('toolbar', (function(_this) {\n      return function(toolbar) {\n        return toolbar.initFormat('image', _.bind(_this._onToolbar, _this));\n      };\n    })(this));\n  };\n\n  ImageTooltip.prototype.insertImage = function() {\n    var index, url;\n    url = this._normalizeURL(this.textbox.value);\n    if (this.range == null) {\n      this.range = new Range(0, 0);\n    }\n    if (this.range) {\n      this.preview.innerHTML = '<span>Preview</span>';\n      this.textbox.value = '';\n      index = this.range.end;\n      this.quill.insertEmbed(index, 'image', url, 'user');\n      this.quill.setSelection(index + 1, index + 1);\n    }\n    return this.hide();\n  };\n\n  ImageTooltip.prototype._onToolbar = function(range, value) {\n    if (value) {\n      if (!this.textbox.value) {\n        this.textbox.value = 'http://';\n      }\n      this.show();\n      this.textbox.focus();\n      return _.defer((function(_this) {\n        return function() {\n          return _this.textbox.setSelectionRange(_this.textbox.value.length, _this.textbox.value.length);\n        };\n      })(this));\n    } else {\n      return this.quill.deleteText(range, 'user');\n    }\n  };\n\n  ImageTooltip.prototype._preview = function() {\n    var img;\n    if (!this._matchImageURL(this.textbox.value)) {\n      return;\n    }\n    if (this.preview.firstChild.tagName === 'IMG') {\n      return this.preview.firstChild.setAttribute('src', this.textbox.value);\n    } else {\n      img = this.preview.ownerDocument.createElement('img');\n      img.setAttribute('src', this.textbox.value);\n      return this.preview.replaceChild(img, this.preview.firstChild);\n    }\n  };\n\n  ImageTooltip.prototype._matchImageURL = function(url) {\n    return /^https?:\\/\\/.+\\.(jp?g|gif|png)$/.test(url);\n  };\n\n  ImageTooltip.prototype._normalizeURL = function(url) {\n    if (!/^https?:\\/\\//.test(url)) {\n      url = 'http://' + url;\n    }\n    return url;\n  };\n\n  return ImageTooltip;\n\n})(Tooltip);\n\nQuill.registerModule('image-tooltip', ImageTooltip);\n\nmodule.exports = ImageTooltip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/image-tooltip.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/keyboard.js":
/*!******************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/keyboard.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Keyboard, Quill, dom, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nDelta = Quill.require('delta');\n\nKeyboard = (function() {\n  Keyboard.hotkeys = {\n    BOLD: {\n      key: 'B',\n      metaKey: true\n    },\n    INDENT: {\n      key: dom.KEYS.TAB\n    },\n    ITALIC: {\n      key: 'I',\n      metaKey: true\n    },\n    OUTDENT: {\n      key: dom.KEYS.TAB,\n      shiftKey: true\n    },\n    UNDERLINE: {\n      key: 'U',\n      metaKey: true\n    }\n  };\n\n  function Keyboard(quill, options) {\n    this.quill = quill;\n    this.hotkeys = {};\n    this._initListeners();\n    this._initHotkeys();\n    this._initDeletes();\n  }\n\n  Keyboard.prototype.addHotkey = function(hotkeys, callback) {\n    if (!_.isArray(hotkeys)) {\n      hotkeys = [hotkeys];\n    }\n    return _.each(hotkeys, (function(_this) {\n      return function(hotkey) {\n        var which, _base;\n        hotkey = _.isObject(hotkey) ? _.clone(hotkey) : {\n          key: hotkey\n        };\n        hotkey.callback = callback;\n        which = _.isNumber(hotkey.key) ? hotkey.key : hotkey.key.toUpperCase().charCodeAt(0);\n        if ((_base = _this.hotkeys)[which] == null) {\n          _base[which] = [];\n        }\n        return _this.hotkeys[which].push(hotkey);\n      };\n    })(this));\n  };\n\n  Keyboard.prototype.toggleFormat = function(range, format) {\n    var delta, toolbar, value;\n    if (range.isCollapsed()) {\n      delta = this.quill.getContents(Math.max(0, range.start - 1), range.end);\n    } else {\n      delta = this.quill.getContents(range);\n    }\n    value = delta.ops.length === 0 || !_.all(delta.ops, function(op) {\n      var _ref;\n      return (_ref = op.attributes) != null ? _ref[format] : void 0;\n    });\n    if (range.isCollapsed()) {\n      this.quill.prepareFormat(format, value);\n    } else {\n      this.quill.formatText(range, format, value, 'user');\n    }\n    toolbar = this.quill.getModule('toolbar');\n    if (toolbar != null) {\n      return toolbar.setActive(format, value);\n    }\n  };\n\n  Keyboard.prototype._initDeletes = function() {\n    return this.addHotkey([dom.KEYS.DELETE, dom.KEYS.BACKSPACE], (function(_this) {\n      return function() {\n        return _this.quill.getLength() > 1;\n      };\n    })(this));\n  };\n\n  Keyboard.prototype._initHotkeys = function() {\n    this.addHotkey(Keyboard.hotkeys.INDENT, (function(_this) {\n      return function(range) {\n        _this._onTab(range, false);\n        return false;\n      };\n    })(this));\n    this.addHotkey(Keyboard.hotkeys.OUTDENT, (function(_this) {\n      return function(range) {\n        return false;\n      };\n    })(this));\n    return _.each(['bold', 'italic', 'underline'], (function(_this) {\n      return function(format) {\n        return _this.addHotkey(Keyboard.hotkeys[format.toUpperCase()], function(range) {\n          _this.toggleFormat(range, format);\n          return false;\n        });\n      };\n    })(this));\n  };\n\n  Keyboard.prototype._initListeners = function() {\n    return dom(this.quill.root).on('keydown', (function(_this) {\n      return function(event) {\n        var prevent;\n        prevent = false;\n        _.each(_this.hotkeys[event.which], function(hotkey) {\n          var metaKey;\n          metaKey = dom.isMac() ? event.metaKey : event.metaKey || event.ctrlKey;\n          if (!!hotkey.metaKey !== !!metaKey) {\n            return;\n          }\n          if (!!hotkey.shiftKey !== !!event.shiftKey) {\n            return;\n          }\n          if (!!hotkey.altKey !== !!event.altKey) {\n            return;\n          }\n          prevent = hotkey.callback(_this.quill.getSelection()) === false || prevent;\n          return true;\n        });\n        return !prevent;\n      };\n    })(this));\n  };\n\n  Keyboard.prototype._onTab = function(range, shift) {\n    var delta;\n    if (shift == null) {\n      shift = false;\n    }\n    delta = new Delta().retain(range.start).insert(\"\\t\")[\"delete\"](range.end - range.start).retain(this.quill.getLength() - range.end);\n    this.quill.updateContents(delta);\n    return this.quill.setSelection(range.start + 1, range.start + 1);\n  };\n\n  return Keyboard;\n\n})();\n\nQuill.registerModule('keyboard', Keyboard);\n\nmodule.exports = Keyboard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL2tleWJvYXJkLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFFBQVEsbUJBQU8sQ0FBQyx5RUFBVTs7QUFFMUI7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUM7O0FBRUQ7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3F1aWxsanMvbGliL21vZHVsZXMva2V5Ym9hcmQuanM/NjkyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGVsdGEsIEtleWJvYXJkLCBRdWlsbCwgZG9tLCBfO1xuXG5RdWlsbCA9IHJlcXVpcmUoJy4uL3F1aWxsJyk7XG5cbl8gPSBRdWlsbC5yZXF1aXJlKCdsb2Rhc2gnKTtcblxuZG9tID0gUXVpbGwucmVxdWlyZSgnZG9tJyk7XG5cbkRlbHRhID0gUXVpbGwucmVxdWlyZSgnZGVsdGEnKTtcblxuS2V5Ym9hcmQgPSAoZnVuY3Rpb24oKSB7XG4gIEtleWJvYXJkLmhvdGtleXMgPSB7XG4gICAgQk9MRDoge1xuICAgICAga2V5OiAnQicsXG4gICAgICBtZXRhS2V5OiB0cnVlXG4gICAgfSxcbiAgICBJTkRFTlQ6IHtcbiAgICAgIGtleTogZG9tLktFWVMuVEFCXG4gICAgfSxcbiAgICBJVEFMSUM6IHtcbiAgICAgIGtleTogJ0knLFxuICAgICAgbWV0YUtleTogdHJ1ZVxuICAgIH0sXG4gICAgT1VUREVOVDoge1xuICAgICAga2V5OiBkb20uS0VZUy5UQUIsXG4gICAgICBzaGlmdEtleTogdHJ1ZVxuICAgIH0sXG4gICAgVU5ERVJMSU5FOiB7XG4gICAgICBrZXk6ICdVJyxcbiAgICAgIG1ldGFLZXk6IHRydWVcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gS2V5Ym9hcmQocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5ob3RrZXlzID0ge307XG4gICAgdGhpcy5faW5pdExpc3RlbmVycygpO1xuICAgIHRoaXMuX2luaXRIb3RrZXlzKCk7XG4gICAgdGhpcy5faW5pdERlbGV0ZXMoKTtcbiAgfVxuXG4gIEtleWJvYXJkLnByb3RvdHlwZS5hZGRIb3RrZXkgPSBmdW5jdGlvbihob3RrZXlzLCBjYWxsYmFjaykge1xuICAgIGlmICghXy5pc0FycmF5KGhvdGtleXMpKSB7XG4gICAgICBob3RrZXlzID0gW2hvdGtleXNdO1xuICAgIH1cbiAgICByZXR1cm4gXy5lYWNoKGhvdGtleXMsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGhvdGtleSkge1xuICAgICAgICB2YXIgd2hpY2gsIF9iYXNlO1xuICAgICAgICBob3RrZXkgPSBfLmlzT2JqZWN0KGhvdGtleSkgPyBfLmNsb25lKGhvdGtleSkgOiB7XG4gICAgICAgICAga2V5OiBob3RrZXlcbiAgICAgICAgfTtcbiAgICAgICAgaG90a2V5LmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHdoaWNoID0gXy5pc051bWJlcihob3RrZXkua2V5KSA/IGhvdGtleS5rZXkgOiBob3RrZXkua2V5LnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKChfYmFzZSA9IF90aGlzLmhvdGtleXMpW3doaWNoXSA9PSBudWxsKSB7XG4gICAgICAgICAgX2Jhc2Vbd2hpY2hdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzLmhvdGtleXNbd2hpY2hdLnB1c2goaG90a2V5KTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIEtleWJvYXJkLnByb3RvdHlwZS50b2dnbGVGb3JtYXQgPSBmdW5jdGlvbihyYW5nZSwgZm9ybWF0KSB7XG4gICAgdmFyIGRlbHRhLCB0b29sYmFyLCB2YWx1ZTtcbiAgICBpZiAocmFuZ2UuaXNDb2xsYXBzZWQoKSkge1xuICAgICAgZGVsdGEgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKE1hdGgubWF4KDAsIHJhbmdlLnN0YXJ0IC0gMSksIHJhbmdlLmVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gdGhpcy5xdWlsbC5nZXRDb250ZW50cyhyYW5nZSk7XG4gICAgfVxuICAgIHZhbHVlID0gZGVsdGEub3BzLmxlbmd0aCA9PT0gMCB8fCAhXy5hbGwoZGVsdGEub3BzLCBmdW5jdGlvbihvcCkge1xuICAgICAgdmFyIF9yZWY7XG4gICAgICByZXR1cm4gKF9yZWYgPSBvcC5hdHRyaWJ1dGVzKSAhPSBudWxsID8gX3JlZltmb3JtYXRdIDogdm9pZCAwO1xuICAgIH0pO1xuICAgIGlmIChyYW5nZS5pc0NvbGxhcHNlZCgpKSB7XG4gICAgICB0aGlzLnF1aWxsLnByZXBhcmVGb3JtYXQoZm9ybWF0LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucXVpbGwuZm9ybWF0VGV4dChyYW5nZSwgZm9ybWF0LCB2YWx1ZSwgJ3VzZXInKTtcbiAgICB9XG4gICAgdG9vbGJhciA9IHRoaXMucXVpbGwuZ2V0TW9kdWxlKCd0b29sYmFyJyk7XG4gICAgaWYgKHRvb2xiYXIgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRvb2xiYXIuc2V0QWN0aXZlKGZvcm1hdCwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBLZXlib2FyZC5wcm90b3R5cGUuX2luaXREZWxldGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkSG90a2V5KFtkb20uS0VZUy5ERUxFVEUsIGRvbS5LRVlTLkJBQ0tTUEFDRV0sIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgPiAxO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgS2V5Ym9hcmQucHJvdG90eXBlLl9pbml0SG90a2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYWRkSG90a2V5KEtleWJvYXJkLmhvdGtleXMuSU5ERU5ULCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICBfdGhpcy5fb25UYWIocmFuZ2UsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5hZGRIb3RrZXkoS2V5Ym9hcmQuaG90a2V5cy5PVVRERU5ULCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gXy5lYWNoKFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJ10sIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuYWRkSG90a2V5KEtleWJvYXJkLmhvdGtleXNbZm9ybWF0LnRvVXBwZXJDYXNlKCldLCBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgIF90aGlzLnRvZ2dsZUZvcm1hdChyYW5nZSwgZm9ybWF0KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgS2V5Ym9hcmQucHJvdG90eXBlLl9pbml0TGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvbSh0aGlzLnF1aWxsLnJvb3QpLm9uKCdrZXlkb3duJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHByZXZlbnQ7XG4gICAgICAgIHByZXZlbnQgPSBmYWxzZTtcbiAgICAgICAgXy5lYWNoKF90aGlzLmhvdGtleXNbZXZlbnQud2hpY2hdLCBmdW5jdGlvbihob3RrZXkpIHtcbiAgICAgICAgICB2YXIgbWV0YUtleTtcbiAgICAgICAgICBtZXRhS2V5ID0gZG9tLmlzTWFjKCkgPyBldmVudC5tZXRhS2V5IDogZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5O1xuICAgICAgICAgIGlmICghIWhvdGtleS5tZXRhS2V5ICE9PSAhIW1ldGFLZXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEhaG90a2V5LnNoaWZ0S2V5ICE9PSAhIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghIWhvdGtleS5hbHRLZXkgIT09ICEhZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZlbnQgPSBob3RrZXkuY2FsbGJhY2soX3RoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCkpID09PSBmYWxzZSB8fCBwcmV2ZW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICFwcmV2ZW50O1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgS2V5Ym9hcmQucHJvdG90eXBlLl9vblRhYiA9IGZ1bmN0aW9uKHJhbmdlLCBzaGlmdCkge1xuICAgIHZhciBkZWx0YTtcbiAgICBpZiAoc2hpZnQgPT0gbnVsbCkge1xuICAgICAgc2hpZnQgPSBmYWxzZTtcbiAgICB9XG4gICAgZGVsdGEgPSBuZXcgRGVsdGEoKS5yZXRhaW4ocmFuZ2Uuc3RhcnQpLmluc2VydChcIlxcdFwiKVtcImRlbGV0ZVwiXShyYW5nZS5lbmQgLSByYW5nZS5zdGFydCkucmV0YWluKHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCkgLSByYW5nZS5lbmQpO1xuICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEpO1xuICAgIHJldHVybiB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5zdGFydCArIDEsIHJhbmdlLnN0YXJ0ICsgMSk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWJvYXJkO1xuXG59KSgpO1xuXG5RdWlsbC5yZWdpc3Rlck1vZHVsZSgna2V5Ym9hcmQnLCBLZXlib2FyZCk7XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5Ym9hcmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/keyboard.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/link-tooltip.js":
/*!**********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/link-tooltip.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var LinkTooltip, Quill, Tooltip, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\nTooltip = __webpack_require__(/*! ./tooltip */ \"(app-pages-browser)/./node_modules/quilljs/lib/modules/tooltip.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nLinkTooltip = (function(_super) {\n  __extends(LinkTooltip, _super);\n\n  LinkTooltip.DEFAULTS = {\n    maxLength: 50,\n    styles: {\n      '.link-tooltip-container': {\n        'padding': '5px 10px'\n      },\n      '.link-tooltip-container input.input': {\n        'width': '170px'\n      },\n      '.link-tooltip-container input.input, .link-tooltip-container a.done, .link-tooltip-container.editing a.url, .link-tooltip-container.editing a.change': {\n        'display': 'none'\n      },\n      '.link-tooltip-container.editing input.input, .link-tooltip-container.editing a.done': {\n        'display': 'inline-block'\n      }\n    },\n    template: '<span class=\"title\">Visit URL:&nbsp;</span> <a href=\"#\" class=\"url\" target=\"_blank\" href=\"about:blank\"></a> <input class=\"input\" type=\"text\"> <span>&nbsp;&#45;&nbsp;</span> <a href=\"javascript:;\" class=\"change\">Change</a> <a href=\"javascript:;\" class=\"done\">Done</a>'\n  };\n\n  function LinkTooltip(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.options.styles = _.defaults(this.options.styles, Tooltip.DEFAULTS.styles);\n    this.options = _.defaults(this.options, Tooltip.DEFAULTS);\n    LinkTooltip.__super__.constructor.call(this, this.quill, this.options);\n    dom(this.container).addClass('link-tooltip-container');\n    this.textbox = this.container.querySelector('.input');\n    this.link = this.container.querySelector('.url');\n    this.initListeners();\n  }\n\n  LinkTooltip.prototype.initListeners = function() {\n    this.quill.on(this.quill.constructor.events.SELECTION_CHANGE, (function(_this) {\n      return function(range) {\n        var anchor;\n        if (!((range != null) && range.isCollapsed())) {\n          return;\n        }\n        anchor = _this._findAnchor(range);\n        if (anchor) {\n          _this.setMode(anchor.href, false);\n          return _this.show(anchor);\n        } else {\n          _this.range = null;\n          return _this.hide();\n        }\n      };\n    })(this));\n    dom(this.container.querySelector('.done')).on('click', _.bind(this.saveLink, this));\n    dom(this.container.querySelector('.change')).on('click', (function(_this) {\n      return function() {\n        return _this.setMode(_this.link.href, true);\n      };\n    })(this));\n    this.initTextbox(this.textbox, this.saveLink, this.hide);\n    return this.quill.onModuleLoad('toolbar', (function(_this) {\n      return function(toolbar) {\n        return toolbar.initFormat('link', _.bind(_this._onToolbar, _this));\n      };\n    })(this));\n  };\n\n  LinkTooltip.prototype.saveLink = function() {\n    var anchor, url;\n    url = this._normalizeURL(this.textbox.value);\n    if (this.range != null) {\n      if (this.range.isCollapsed()) {\n        anchor = this._findAnchor(this.range);\n        if (anchor != null) {\n          anchor.href = url;\n        }\n      } else {\n        this.quill.formatText(this.range, 'link', url, 'user');\n      }\n    }\n    return this.setMode(url, false);\n  };\n\n  LinkTooltip.prototype.setMode = function(url, edit) {\n    var text;\n    if (edit == null) {\n      edit = false;\n    }\n    if (edit) {\n      this.textbox.value = url;\n      _.defer((function(_this) {\n        return function() {\n          _this.textbox.focus();\n          return _this.textbox.setSelectionRange(url.length, url.length);\n        };\n      })(this));\n    } else {\n      this.link.href = url;\n      text = url.length > this.options.maxLength ? url.slice(0, this.options.maxLength) + '...' : url;\n      dom(this.link).text(text);\n    }\n    return dom(this.container).toggleClass('editing', edit);\n  };\n\n  LinkTooltip.prototype._findAnchor = function(range) {\n    var leaf, node, offset, _ref;\n    _ref = this.quill.editor.doc.findLeafAt(range.start, true), leaf = _ref[0], offset = _ref[1];\n    if (leaf != null) {\n      node = leaf.node;\n    }\n    while (node != null) {\n      if (node.tagName === 'A') {\n        return node;\n      }\n      node = node.parentNode;\n    }\n    return null;\n  };\n\n  LinkTooltip.prototype._onToolbar = function(range, value) {\n    var nativeRange;\n    if (!(range && !range.isCollapsed())) {\n      return;\n    }\n    if (value) {\n      this.setMode(this._suggestURL(range), true);\n      nativeRange = this.quill.editor.selection._getNativeRange();\n      return this.show(nativeRange);\n    } else {\n      return this.quill.formatText(range, 'link', false, 'user');\n    }\n  };\n\n  LinkTooltip.prototype._normalizeURL = function(url) {\n    if (!/^(https?:\\/\\/|mailto:)/.test(url)) {\n      url = 'http://' + url;\n    }\n    return url;\n  };\n\n  LinkTooltip.prototype._suggestURL = function(range) {\n    var text;\n    text = this.quill.getText(range);\n    return this._normalizeURL(text);\n  };\n\n  return LinkTooltip;\n\n})(Tooltip);\n\nQuill.registerModule('link-tooltip', LinkTooltip);\n\nmodule.exports = LinkTooltip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/link-tooltip.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/multi-cursor.js":
/*!**********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/multi-cursor.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var EventEmitter2, MultiCursor, Quill, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\nEventEmitter2 = (__webpack_require__(/*! eventemitter2 */ \"(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js\").EventEmitter2);\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nMultiCursor = (function(_super) {\n  __extends(MultiCursor, _super);\n\n  MultiCursor.DEFAULTS = {\n    template: '<span class=\"cursor-flag\"> <span class=\"cursor-name\"></span> </span> <span class=\"cursor-caret\"></span>',\n    timeout: 2500\n  };\n\n  MultiCursor.events = {\n    CURSOR_ADDED: 'cursor-addded',\n    CURSOR_MOVED: 'cursor-moved',\n    CURSOR_REMOVED: 'cursor-removed'\n  };\n\n  function MultiCursor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.cursors = {};\n    this.container = this.quill.addContainer('cursor-container', true);\n    this.quill.addStyles({\n      '.cursor-container': {\n        'position': 'absolute',\n        'left': '0',\n        'top': '0',\n        'z-index': '1000'\n      },\n      '.cursor': {\n        'margin-left': '-1px',\n        'position': 'absolute'\n      },\n      '.cursor-flag': {\n        'bottom': '100%',\n        'position': 'absolute',\n        'white-space': 'nowrap'\n      },\n      '.cursor-name': {\n        'display': 'inline-block',\n        'color': 'white',\n        'padding': '2px 8px'\n      },\n      '.cursor-caret': {\n        'height': '100%',\n        'position': 'absolute',\n        'width': '2px'\n      },\n      '.cursor.hidden .cursor-flag': {\n        'display': 'none'\n      },\n      '.cursor.top > .cursor-flag': {\n        'bottom': 'auto',\n        'top': '100%'\n      },\n      '.cursor.right > .cursor-flag': {\n        'right': '-2px'\n      }\n    });\n    this.quill.on(this.quill.constructor.events.TEXT_CHANGE, _.bind(this._applyDelta, this));\n  }\n\n  MultiCursor.prototype.clearCursors = function() {\n    _.each(_.keys(this.cursors), _.bind(this.removeCursor, this));\n    return this.cursors = {};\n  };\n\n  MultiCursor.prototype.moveCursor = function(userId, index) {\n    var cursor;\n    cursor = this.cursors[userId];\n    cursor.index = index;\n    dom(cursor.elem).removeClass('hidden');\n    clearTimeout(cursor.timer);\n    cursor.timer = setTimeout((function(_this) {\n      return function() {\n        dom(cursor.elem).addClass('hidden');\n        return cursor.timer = null;\n      };\n    })(this), this.options.timeout);\n    this._updateCursor(cursor);\n    return cursor;\n  };\n\n  MultiCursor.prototype.removeCursor = function(userId) {\n    var cursor;\n    cursor = this.cursors[userId];\n    this.emit(MultiCursor.events.CURSOR_REMOVED, cursor);\n    if (cursor != null) {\n      cursor.elem.parentNode.removeChild(cursor.elem);\n    }\n    return delete this.cursors[userId];\n  };\n\n  MultiCursor.prototype.setCursor = function(userId, index, name, color) {\n    var cursor;\n    if (this.cursors[userId] == null) {\n      this.cursors[userId] = cursor = {\n        userId: userId,\n        index: index,\n        color: color,\n        elem: this._buildCursor(name, color)\n      };\n      this.emit(MultiCursor.events.CURSOR_ADDED, cursor);\n    }\n    _.defer((function(_this) {\n      return function() {\n        return _this.moveCursor(userId, index);\n      };\n    })(this));\n    return this.cursors[userId];\n  };\n\n  MultiCursor.prototype.shiftCursors = function(index, length, authorId) {\n    if (authorId == null) {\n      authorId = null;\n    }\n    return _.each(this.cursors, (function(_this) {\n      return function(cursor, id) {\n        if (!(cursor && (cursor.index > index || cursor.userId === authorId))) {\n          return;\n        }\n        return cursor.index += Math.max(length, index - cursor.index);\n      };\n    })(this));\n  };\n\n  MultiCursor.prototype.update = function() {\n    return _.each(this.cursors, (function(_this) {\n      return function(cursor, id) {\n        if (cursor == null) {\n          return;\n        }\n        _this._updateCursor(cursor);\n        return true;\n      };\n    })(this));\n  };\n\n  MultiCursor.prototype._applyDelta = function(delta) {\n    var index;\n    index = 0;\n    _.each(delta.ops, (function(_this) {\n      return function(op) {\n        var length, _ref;\n        length = 0;\n        if (op.insert != null) {\n          length = op.insert.length || 1;\n          _this.shiftCursors(index, length, (_ref = op.attributes) != null ? _ref['author'] : void 0);\n        } else if (op[\"delete\"] != null) {\n          _this.shiftCursors(index, -1 * op[\"delete\"], null);\n        } else if (op.retain != null) {\n          _this.shiftCursors(index, 0, null);\n          length = op.retain;\n        }\n        return index += length;\n      };\n    })(this));\n    return this.update();\n  };\n\n  MultiCursor.prototype._buildCursor = function(name, color) {\n    var cursor, cursorCaret, cursorFlag, cursorName;\n    cursor = this.container.ownerDocument.createElement('span');\n    dom(cursor).addClass('cursor');\n    cursor.innerHTML = this.options.template;\n    cursorFlag = cursor.querySelector('.cursor-flag');\n    cursorName = cursor.querySelector('.cursor-name');\n    dom(cursorName).text(name);\n    cursorCaret = cursor.querySelector('.cursor-caret');\n    cursorCaret.style.backgroundColor = cursorName.style.backgroundColor = color;\n    this.container.appendChild(cursor);\n    return cursor;\n  };\n\n  MultiCursor.prototype._moveCursor = function(cursor, reference, side) {\n    var bounds, flag, win;\n    if (side == null) {\n      side = 'left';\n    }\n    win = dom(reference).window();\n    bounds = reference.getBoundingClientRect();\n    cursor.elem.style.top = bounds.top + win.pageYOffset + 'px';\n    cursor.elem.style.left = bounds[side] + 'px';\n    cursor.elem.style.height = bounds.height + 'px';\n    flag = cursor.elem.querySelector('.cursor-flag');\n    dom(cursor.elem).toggleClass('top', parseInt(cursor.elem.style.top) <= flag.offsetHeight).toggleClass('left', parseInt(cursor.elem.style.left) <= flag.offsetWidth).toggleClass('right', this.quill.root.offsetWidth - parseInt(cursor.elem.style.left) <= flag.offsetWidth);\n    return this.emit(MultiCursor.events.CURSOR_MOVED, cursor);\n  };\n\n  MultiCursor.prototype._updateCursor = function(cursor) {\n    var didSplit, guide, leaf, leftNode, offset, rightNode, _ref, _ref1;\n    this.quill.editor.checkUpdate();\n    _ref = this.quill.editor.doc.findLeafAt(cursor.index, true), leaf = _ref[0], offset = _ref[1];\n    guide = this.container.ownerDocument.createElement('span');\n    if (leaf != null) {\n      _ref1 = dom(leaf.node).split(offset), leftNode = _ref1[0], rightNode = _ref1[1], didSplit = _ref1[2];\n      dom(guide).text(dom.ZERO_WIDTH_NOBREAK_SPACE);\n      leaf.node.parentNode.insertBefore(guide, rightNode);\n    } else {\n      dom(guide).text(dom.NOBREAK_SPACE);\n      this.quill.root.appendChild(guide);\n    }\n    this._moveCursor(cursor, guide);\n    dom(guide).remove();\n    if (didSplit) {\n      dom(leaf.node.parentNode).normalize();\n    }\n    return this.quill.editor.selection.update(Quill.sources.SILENT);\n  };\n\n  return MultiCursor;\n\n})(EventEmitter2);\n\nQuill.registerModule('multi-cursor', MultiCursor);\n\nmodule.exports = MultiCursor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/multi-cursor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/paste-manager.js":
/*!***********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/paste-manager.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Document, PasteManager, Quill, dom, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\nDocument = __webpack_require__(/*! ../core/document */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/document.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nDelta = Quill.require('delta');\n\nPasteManager = (function() {\n  function PasteManager(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.container = this.quill.addContainer('paste-container');\n    this.container.setAttribute('contenteditable', true);\n    this.quill.addStyles({\n      '.paste-container': {\n        'left': '-10000px',\n        'position': 'absolute',\n        'top': '50%'\n      }\n    });\n    dom(this.quill.root).on('paste', _.bind(this._paste, this));\n  }\n\n  PasteManager.prototype._paste = function() {\n    var iframe, iframeScrollY, oldDocLength, range, windowScrollX, windowScrollY;\n    oldDocLength = this.quill.getLength();\n    range = this.quill.getSelection();\n    if (range == null) {\n      return;\n    }\n    this.container.innerHTML = \"\";\n    iframe = dom(this.quill.root).window();\n    iframeScrollY = iframe.scrollY;\n    windowScrollX = window.scrollX;\n    windowScrollY = window.scrollY;\n    this.container.focus();\n    return _.defer((function(_this) {\n      return function() {\n        var delta, doc, lengthAdded, line, lineBottom, offset, _ref;\n        doc = new Document(_this.container, _this.quill.options);\n        delta = doc.toDelta();\n        lengthAdded = delta.length() - 1;\n        delta.compose(new Delta().retain(lengthAdded)[\"delete\"](1));\n        if (range.start > 0) {\n          delta.ops.unshift({\n            retain: range.start\n          });\n        }\n        delta[\"delete\"](range.end - range.start);\n        _this.quill.updateContents(delta, 'user');\n        _this.quill.setSelection(range.start + lengthAdded, range.start + lengthAdded);\n        _ref = _this.quill.editor.doc.findLineAt(range.start + lengthAdded), line = _ref[0], offset = _ref[1];\n        lineBottom = line.node.offsetTop + line.node.offsetHeight;\n        if (lineBottom > iframeScrollY + _this.quill.root.offsetHeight) {\n          iframeScrollY = line.node.offsetTop - _this.quill.root.offsetHeight / 2;\n        }\n        iframe.scrollTo(0, iframeScrollY);\n        return window.scrollTo(windowScrollX, windowScrollY);\n      };\n    })(this));\n  };\n\n  return PasteManager;\n\n})();\n\nQuill.registerModule('paste-manager', PasteManager);\n\nmodule.exports = PasteManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3Bhc3RlLW1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsUUFBUSxtQkFBTyxDQUFDLHlFQUFVOztBQUUxQixXQUFXLG1CQUFPLENBQUMseUZBQWtCOztBQUVyQzs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3Bhc3RlLW1hbmFnZXIuanM/YmUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGVsdGEsIERvY3VtZW50LCBQYXN0ZU1hbmFnZXIsIFF1aWxsLCBkb20sIF87XG5cblF1aWxsID0gcmVxdWlyZSgnLi4vcXVpbGwnKTtcblxuRG9jdW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2RvY3VtZW50Jyk7XG5cbl8gPSBRdWlsbC5yZXF1aXJlKCdsb2Rhc2gnKTtcblxuZG9tID0gUXVpbGwucmVxdWlyZSgnZG9tJyk7XG5cbkRlbHRhID0gUXVpbGwucmVxdWlyZSgnZGVsdGEnKTtcblxuUGFzdGVNYW5hZ2VyID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBQYXN0ZU1hbmFnZXIocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMucXVpbGwuYWRkQ29udGFpbmVyKCdwYXN0ZS1jb250YWluZXInKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xuICAgIHRoaXMucXVpbGwuYWRkU3R5bGVzKHtcbiAgICAgICcucGFzdGUtY29udGFpbmVyJzoge1xuICAgICAgICAnbGVmdCc6ICctMTAwMDBweCcsXG4gICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsXG4gICAgICAgICd0b3AnOiAnNTAlJ1xuICAgICAgfVxuICAgIH0pO1xuICAgIGRvbSh0aGlzLnF1aWxsLnJvb3QpLm9uKCdwYXN0ZScsIF8uYmluZCh0aGlzLl9wYXN0ZSwgdGhpcykpO1xuICB9XG5cbiAgUGFzdGVNYW5hZ2VyLnByb3RvdHlwZS5fcGFzdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWZyYW1lLCBpZnJhbWVTY3JvbGxZLCBvbGREb2NMZW5ndGgsIHJhbmdlLCB3aW5kb3dTY3JvbGxYLCB3aW5kb3dTY3JvbGxZO1xuICAgIG9sZERvY0xlbmd0aCA9IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCk7XG4gICAgcmFuZ2UgPSB0aGlzLnF1aWxsLmdldFNlbGVjdGlvbigpO1xuICAgIGlmIChyYW5nZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgaWZyYW1lID0gZG9tKHRoaXMucXVpbGwucm9vdCkud2luZG93KCk7XG4gICAgaWZyYW1lU2Nyb2xsWSA9IGlmcmFtZS5zY3JvbGxZO1xuICAgIHdpbmRvd1Njcm9sbFggPSB3aW5kb3cuc2Nyb2xsWDtcbiAgICB3aW5kb3dTY3JvbGxZID0gd2luZG93LnNjcm9sbFk7XG4gICAgdGhpcy5jb250YWluZXIuZm9jdXMoKTtcbiAgICByZXR1cm4gXy5kZWZlcigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRlbHRhLCBkb2MsIGxlbmd0aEFkZGVkLCBsaW5lLCBsaW5lQm90dG9tLCBvZmZzZXQsIF9yZWY7XG4gICAgICAgIGRvYyA9IG5ldyBEb2N1bWVudChfdGhpcy5jb250YWluZXIsIF90aGlzLnF1aWxsLm9wdGlvbnMpO1xuICAgICAgICBkZWx0YSA9IGRvYy50b0RlbHRhKCk7XG4gICAgICAgIGxlbmd0aEFkZGVkID0gZGVsdGEubGVuZ3RoKCkgLSAxO1xuICAgICAgICBkZWx0YS5jb21wb3NlKG5ldyBEZWx0YSgpLnJldGFpbihsZW5ndGhBZGRlZClbXCJkZWxldGVcIl0oMSkpO1xuICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgPiAwKSB7XG4gICAgICAgICAgZGVsdGEub3BzLnVuc2hpZnQoe1xuICAgICAgICAgICAgcmV0YWluOiByYW5nZS5zdGFydFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRlbHRhW1wiZGVsZXRlXCJdKHJhbmdlLmVuZCAtIHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgX3RoaXMucXVpbGwudXBkYXRlQ29udGVudHMoZGVsdGEsICd1c2VyJyk7XG4gICAgICAgIF90aGlzLnF1aWxsLnNldFNlbGVjdGlvbihyYW5nZS5zdGFydCArIGxlbmd0aEFkZGVkLCByYW5nZS5zdGFydCArIGxlbmd0aEFkZGVkKTtcbiAgICAgICAgX3JlZiA9IF90aGlzLnF1aWxsLmVkaXRvci5kb2MuZmluZExpbmVBdChyYW5nZS5zdGFydCArIGxlbmd0aEFkZGVkKSwgbGluZSA9IF9yZWZbMF0sIG9mZnNldCA9IF9yZWZbMV07XG4gICAgICAgIGxpbmVCb3R0b20gPSBsaW5lLm5vZGUub2Zmc2V0VG9wICsgbGluZS5ub2RlLm9mZnNldEhlaWdodDtcbiAgICAgICAgaWYgKGxpbmVCb3R0b20gPiBpZnJhbWVTY3JvbGxZICsgX3RoaXMucXVpbGwucm9vdC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgICBpZnJhbWVTY3JvbGxZID0gbGluZS5ub2RlLm9mZnNldFRvcCAtIF90aGlzLnF1aWxsLnJvb3Qub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgfVxuICAgICAgICBpZnJhbWUuc2Nyb2xsVG8oMCwgaWZyYW1lU2Nyb2xsWSk7XG4gICAgICAgIHJldHVybiB3aW5kb3cuc2Nyb2xsVG8od2luZG93U2Nyb2xsWCwgd2luZG93U2Nyb2xsWSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICByZXR1cm4gUGFzdGVNYW5hZ2VyO1xuXG59KSgpO1xuXG5RdWlsbC5yZWdpc3Rlck1vZHVsZSgncGFzdGUtbWFuYWdlcicsIFBhc3RlTWFuYWdlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzdGVNYW5hZ2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/paste-manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/toolbar.js":
/*!*****************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/toolbar.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Quill, Toolbar, dom, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nToolbar = (function() {\n  Toolbar.DEFAULTS = {\n    container: null\n  };\n\n  Toolbar.formats = {\n    LINE: {\n      'align': 'align',\n      'bullet': 'bullet',\n      'list': 'list'\n    },\n    SELECT: {\n      'align': 'align',\n      'background': 'background',\n      'color': 'color',\n      'font': 'font',\n      'size': 'size'\n    },\n    TOGGLE: {\n      'bold': 'bold',\n      'bullet': 'bullet',\n      'image': 'image',\n      'italic': 'italic',\n      'link': 'link',\n      'list': 'list',\n      'strike': 'strike',\n      'underline': 'underline'\n    },\n    TOOLTIP: {\n      'image': 'image',\n      'link': 'link'\n    }\n  };\n\n  function Toolbar(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    if (this.options.container == null) {\n      throw new Error('container required for toolbar', this.options);\n    }\n    this.container = _.isString(this.options.container) ? document.querySelector(this.options.container) : this.options.container;\n    this.inputs = {};\n    this.preventUpdate = false;\n    this.triggering = false;\n    _.each(this.quill.options.formats, (function(_this) {\n      return function(format) {\n        if (Toolbar.formats.TOOLTIP[format] != null) {\n          return;\n        }\n        return _this.initFormat(format, function(range, value) {\n          if (_this.triggering) {\n            return;\n          }\n          if (range.isCollapsed()) {\n            _this.quill.prepareFormat(format, value);\n          } else if (Toolbar.formats.LINE[format] != null) {\n            _this.quill.formatLine(range, format, value, 'user');\n          } else {\n            _this.quill.formatText(range, format, value, 'user');\n          }\n          return _.defer(function() {\n            _this.updateActive(range, ['bullet', 'list']);\n            return _this.setActive(format, value);\n          });\n        });\n      };\n    })(this));\n    this.quill.on(this.quill.constructor.events.SELECTION_CHANGE, (function(_this) {\n      return function(range) {\n        if (range != null) {\n          return _this.updateActive(range);\n        }\n      };\n    })(this));\n    this.quill.onModuleLoad('keyboard', (function(_this) {\n      return function(keyboard) {\n        return keyboard.addHotkey([dom.KEYS.BACKSPACE, dom.KEYS.DELETE, dom.KEYS.ENTER], function() {\n          return _.defer(_.bind(_this.updateActive, _this));\n        });\n      };\n    })(this));\n    dom(this.container).addClass('ql-toolbar-container');\n    if (dom.isIOS()) {\n      dom(this.container).addClass('ios');\n    }\n    if (dom.isIE(11)) {\n      dom(this.container).on('mousedown', (function(_this) {\n        return function() {\n          return false;\n        };\n      })(this));\n    }\n  }\n\n  Toolbar.prototype.initFormat = function(format, callback) {\n    var eventName, input, selector;\n    selector = \".ql-\" + format;\n    if (Toolbar.formats.SELECT[format] != null) {\n      selector = \"select\" + selector;\n      eventName = 'change';\n    } else {\n      eventName = 'click';\n    }\n    input = this.container.querySelector(selector);\n    if (input == null) {\n      return;\n    }\n    this.inputs[format] = input;\n    return dom(input).on(eventName, (function(_this) {\n      return function() {\n        var range, value;\n        value = eventName === 'change' ? dom(input).value() : !dom(input).hasClass('ql-active');\n        _this.preventUpdate = true;\n        _this.quill.focus();\n        range = _this.quill.getSelection();\n        if (range != null) {\n          callback(range, value);\n        }\n        _this.preventUpdate = false;\n        return true;\n      };\n    })(this));\n  };\n\n  Toolbar.prototype.setActive = function(format, value) {\n    var $input, input, selectValue, _ref;\n    input = this.inputs[format];\n    if (input == null) {\n      return;\n    }\n    $input = dom(input);\n    if (input.tagName === 'SELECT') {\n      this.triggering = true;\n      selectValue = $input.value(input);\n      if (value == null) {\n        value = (_ref = $input[\"default\"]()) != null ? _ref.value : void 0;\n      }\n      if (_.isArray(value)) {\n        value = '';\n      }\n      if (value !== selectValue) {\n        if (value != null) {\n          $input.option(value, false);\n        } else {\n          $input.reset(false);\n        }\n      }\n      return this.triggering = false;\n    } else {\n      return $input.toggleClass('ql-active', value || false);\n    }\n  };\n\n  Toolbar.prototype.updateActive = function(range, formats) {\n    var activeFormats;\n    if (formats == null) {\n      formats = null;\n    }\n    range || (range = this.quill.getSelection());\n    if (!((range != null) && !this.preventUpdate)) {\n      return;\n    }\n    activeFormats = this._getActive(range);\n    return _.each(this.inputs, (function(_this) {\n      return function(input, format) {\n        if (!_.isArray(formats) || formats.indexOf(format) > -1) {\n          _this.setActive(format, activeFormats[format]);\n        }\n        return true;\n      };\n    })(this));\n  };\n\n  Toolbar.prototype._getActive = function(range) {\n    var leafFormats, lineFormats;\n    leafFormats = this._getLeafActive(range);\n    lineFormats = this._getLineActive(range);\n    return _.defaults({}, leafFormats, lineFormats);\n  };\n\n  Toolbar.prototype._getLeafActive = function(range) {\n    var contents, formatsArr, line, offset, _ref;\n    if (range.isCollapsed()) {\n      _ref = this.quill.editor.doc.findLineAt(range.start), line = _ref[0], offset = _ref[1];\n      if (offset === 0) {\n        contents = this.quill.getContents(range.start, range.end + 1);\n      } else {\n        contents = this.quill.getContents(range.start - 1, range.end);\n      }\n    } else {\n      contents = this.quill.getContents(range);\n    }\n    formatsArr = _.map(contents.ops, 'attributes');\n    return this._intersectFormats(formatsArr);\n  };\n\n  Toolbar.prototype._getLineActive = function(range) {\n    var firstLine, formatsArr, lastLine, offset, _ref, _ref1;\n    formatsArr = [];\n    _ref = this.quill.editor.doc.findLineAt(range.start), firstLine = _ref[0], offset = _ref[1];\n    _ref1 = this.quill.editor.doc.findLineAt(range.end), lastLine = _ref1[0], offset = _ref1[1];\n    if ((lastLine != null) && lastLine === firstLine) {\n      lastLine = lastLine.next;\n    }\n    while ((firstLine != null) && firstLine !== lastLine) {\n      formatsArr.push(_.clone(firstLine.formats));\n      firstLine = firstLine.next;\n    }\n    return this._intersectFormats(formatsArr);\n  };\n\n  Toolbar.prototype._intersectFormats = function(formatsArr) {\n    return _.reduce(formatsArr.slice(1), function(activeFormats, formats) {\n      var activeKeys, added, formatKeys, intersection, missing;\n      activeKeys = _.keys(activeFormats);\n      formatKeys = _.keys(formats);\n      intersection = _.intersection(activeKeys, formatKeys);\n      missing = _.difference(activeKeys, formatKeys);\n      added = _.difference(formatKeys, activeKeys);\n      _.each(intersection, function(name) {\n        if (Toolbar.formats.SELECT[name] != null) {\n          if (_.isArray(activeFormats[name])) {\n            if (_.indexOf(activeFormats[name], formats[name]) < 0) {\n              return activeFormats[name].push(formats[name]);\n            }\n          } else if (activeFormats[name] !== formats[name]) {\n            return activeFormats[name] = [activeFormats[name], formats[name]];\n          }\n        }\n      });\n      _.each(missing, function(name) {\n        if (Toolbar.formats.TOGGLE[name] != null) {\n          return delete activeFormats[name];\n        } else if ((Toolbar.formats.SELECT[name] != null) && !_.isArray(activeFormats[name])) {\n          return activeFormats[name] = [activeFormats[name]];\n        }\n      });\n      _.each(added, function(name) {\n        if (Toolbar.formats.SELECT[name] != null) {\n          return activeFormats[name] = [formats[name]];\n        }\n      });\n      return activeFormats;\n    }, formatsArr[0] || {});\n  };\n\n  return Toolbar;\n\n})();\n\nQuill.registerModule('toolbar', Toolbar);\n\nmodule.exports = Toolbar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3Rvb2xiYXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsUUFBUSxtQkFBTyxDQUFDLHlFQUFVOztBQUUxQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUsscUJBQXFCO0FBQzFCOztBQUVBOztBQUVBLENBQUM7O0FBRUQ7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3F1aWxsanMvbGliL21vZHVsZXMvdG9vbGJhci5qcz8yZWQxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBRdWlsbCwgVG9vbGJhciwgZG9tLCBfO1xuXG5RdWlsbCA9IHJlcXVpcmUoJy4uL3F1aWxsJyk7XG5cbl8gPSBRdWlsbC5yZXF1aXJlKCdsb2Rhc2gnKTtcblxuZG9tID0gUXVpbGwucmVxdWlyZSgnZG9tJyk7XG5cblRvb2xiYXIgPSAoZnVuY3Rpb24oKSB7XG4gIFRvb2xiYXIuREVGQVVMVFMgPSB7XG4gICAgY29udGFpbmVyOiBudWxsXG4gIH07XG5cbiAgVG9vbGJhci5mb3JtYXRzID0ge1xuICAgIExJTkU6IHtcbiAgICAgICdhbGlnbic6ICdhbGlnbicsXG4gICAgICAnYnVsbGV0JzogJ2J1bGxldCcsXG4gICAgICAnbGlzdCc6ICdsaXN0J1xuICAgIH0sXG4gICAgU0VMRUNUOiB7XG4gICAgICAnYWxpZ24nOiAnYWxpZ24nLFxuICAgICAgJ2JhY2tncm91bmQnOiAnYmFja2dyb3VuZCcsXG4gICAgICAnY29sb3InOiAnY29sb3InLFxuICAgICAgJ2ZvbnQnOiAnZm9udCcsXG4gICAgICAnc2l6ZSc6ICdzaXplJ1xuICAgIH0sXG4gICAgVE9HR0xFOiB7XG4gICAgICAnYm9sZCc6ICdib2xkJyxcbiAgICAgICdidWxsZXQnOiAnYnVsbGV0JyxcbiAgICAgICdpbWFnZSc6ICdpbWFnZScsXG4gICAgICAnaXRhbGljJzogJ2l0YWxpYycsXG4gICAgICAnbGluayc6ICdsaW5rJyxcbiAgICAgICdsaXN0JzogJ2xpc3QnLFxuICAgICAgJ3N0cmlrZSc6ICdzdHJpa2UnLFxuICAgICAgJ3VuZGVybGluZSc6ICd1bmRlcmxpbmUnXG4gICAgfSxcbiAgICBUT09MVElQOiB7XG4gICAgICAnaW1hZ2UnOiAnaW1hZ2UnLFxuICAgICAgJ2xpbmsnOiAnbGluaydcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gVG9vbGJhcihxdWlsbCwgb3B0aW9ucykge1xuICAgIHRoaXMucXVpbGwgPSBxdWlsbDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGFpbmVyID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY29udGFpbmVyIHJlcXVpcmVkIGZvciB0b29sYmFyJywgdGhpcy5vcHRpb25zKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIgPSBfLmlzU3RyaW5nKHRoaXMub3B0aW9ucy5jb250YWluZXIpID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6IHRoaXMub3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5pbnB1dHMgPSB7fTtcbiAgICB0aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICB0aGlzLnRyaWdnZXJpbmcgPSBmYWxzZTtcbiAgICBfLmVhY2godGhpcy5xdWlsbC5vcHRpb25zLmZvcm1hdHMsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICBpZiAoVG9vbGJhci5mb3JtYXRzLlRPT0xUSVBbZm9ybWF0XSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcy5pbml0Rm9ybWF0KGZvcm1hdCwgZnVuY3Rpb24ocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnRyaWdnZXJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJhbmdlLmlzQ29sbGFwc2VkKCkpIHtcbiAgICAgICAgICAgIF90aGlzLnF1aWxsLnByZXBhcmVGb3JtYXQoZm9ybWF0LCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChUb29sYmFyLmZvcm1hdHMuTElORVtmb3JtYXRdICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzLnF1aWxsLmZvcm1hdExpbmUocmFuZ2UsIGZvcm1hdCwgdmFsdWUsICd1c2VyJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLnF1aWxsLmZvcm1hdFRleHQocmFuZ2UsIGZvcm1hdCwgdmFsdWUsICd1c2VyJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlQWN0aXZlKHJhbmdlLCBbJ2J1bGxldCcsICdsaXN0J10pO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldEFjdGl2ZShmb3JtYXQsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICB0aGlzLnF1aWxsLm9uKHRoaXMucXVpbGwuY29uc3RydWN0b3IuZXZlbnRzLlNFTEVDVElPTl9DSEFOR0UsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUFjdGl2ZShyYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMucXVpbGwub25Nb2R1bGVMb2FkKCdrZXlib2FyZCcsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGtleWJvYXJkKSB7XG4gICAgICAgIHJldHVybiBrZXlib2FyZC5hZGRIb3RrZXkoW2RvbS5LRVlTLkJBQ0tTUEFDRSwgZG9tLktFWVMuREVMRVRFLCBkb20uS0VZUy5FTlRFUl0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfLmRlZmVyKF8uYmluZChfdGhpcy51cGRhdGVBY3RpdmUsIF90aGlzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgZG9tKHRoaXMuY29udGFpbmVyKS5hZGRDbGFzcygncWwtdG9vbGJhci1jb250YWluZXInKTtcbiAgICBpZiAoZG9tLmlzSU9TKCkpIHtcbiAgICAgIGRvbSh0aGlzLmNvbnRhaW5lcikuYWRkQ2xhc3MoJ2lvcycpO1xuICAgIH1cbiAgICBpZiAoZG9tLmlzSUUoMTEpKSB7XG4gICAgICBkb20odGhpcy5jb250YWluZXIpLm9uKCdtb3VzZWRvd24nLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBUb29sYmFyLnByb3RvdHlwZS5pbml0Rm9ybWF0ID0gZnVuY3Rpb24oZm9ybWF0LCBjYWxsYmFjaykge1xuICAgIHZhciBldmVudE5hbWUsIGlucHV0LCBzZWxlY3RvcjtcbiAgICBzZWxlY3RvciA9IFwiLnFsLVwiICsgZm9ybWF0O1xuICAgIGlmIChUb29sYmFyLmZvcm1hdHMuU0VMRUNUW2Zvcm1hdF0gIT0gbnVsbCkge1xuICAgICAgc2VsZWN0b3IgPSBcInNlbGVjdFwiICsgc2VsZWN0b3I7XG4gICAgICBldmVudE5hbWUgPSAnY2hhbmdlJztcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnROYW1lID0gJ2NsaWNrJztcbiAgICB9XG4gICAgaW5wdXQgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlucHV0c1tmb3JtYXRdID0gaW5wdXQ7XG4gICAgcmV0dXJuIGRvbShpbnB1dCkub24oZXZlbnROYW1lLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJhbmdlLCB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBldmVudE5hbWUgPT09ICdjaGFuZ2UnID8gZG9tKGlucHV0KS52YWx1ZSgpIDogIWRvbShpbnB1dCkuaGFzQ2xhc3MoJ3FsLWFjdGl2ZScpO1xuICAgICAgICBfdGhpcy5wcmV2ZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMucXVpbGwuZm9jdXMoKTtcbiAgICAgICAgcmFuZ2UgPSBfdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHJhbmdlICE9IG51bGwpIHtcbiAgICAgICAgICBjYWxsYmFjayhyYW5nZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnByZXZlbnRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBUb29sYmFyLnByb3RvdHlwZS5zZXRBY3RpdmUgPSBmdW5jdGlvbihmb3JtYXQsIHZhbHVlKSB7XG4gICAgdmFyICRpbnB1dCwgaW5wdXQsIHNlbGVjdFZhbHVlLCBfcmVmO1xuICAgIGlucHV0ID0gdGhpcy5pbnB1dHNbZm9ybWF0XTtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAkaW5wdXQgPSBkb20oaW5wdXQpO1xuICAgIGlmIChpbnB1dC50YWdOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgdGhpcy50cmlnZ2VyaW5nID0gdHJ1ZTtcbiAgICAgIHNlbGVjdFZhbHVlID0gJGlucHV0LnZhbHVlKGlucHV0KTtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gKF9yZWYgPSAkaW5wdXRbXCJkZWZhdWx0XCJdKCkpICE9IG51bGwgPyBfcmVmLnZhbHVlIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPT0gc2VsZWN0VmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAkaW5wdXQub3B0aW9uKHZhbHVlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGlucHV0LnJlc2V0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJGlucHV0LnRvZ2dsZUNsYXNzKCdxbC1hY3RpdmUnLCB2YWx1ZSB8fCBmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZUFjdGl2ZSA9IGZ1bmN0aW9uKHJhbmdlLCBmb3JtYXRzKSB7XG4gICAgdmFyIGFjdGl2ZUZvcm1hdHM7XG4gICAgaWYgKGZvcm1hdHMgPT0gbnVsbCkge1xuICAgICAgZm9ybWF0cyA9IG51bGw7XG4gICAgfVxuICAgIHJhbmdlIHx8IChyYW5nZSA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCkpO1xuICAgIGlmICghKChyYW5nZSAhPSBudWxsKSAmJiAhdGhpcy5wcmV2ZW50VXBkYXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmVGb3JtYXRzID0gdGhpcy5fZ2V0QWN0aXZlKHJhbmdlKTtcbiAgICByZXR1cm4gXy5lYWNoKHRoaXMuaW5wdXRzLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghXy5pc0FycmF5KGZvcm1hdHMpIHx8IGZvcm1hdHMuaW5kZXhPZihmb3JtYXQpID4gLTEpIHtcbiAgICAgICAgICBfdGhpcy5zZXRBY3RpdmUoZm9ybWF0LCBhY3RpdmVGb3JtYXRzW2Zvcm1hdF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgVG9vbGJhci5wcm90b3R5cGUuX2dldEFjdGl2ZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgdmFyIGxlYWZGb3JtYXRzLCBsaW5lRm9ybWF0cztcbiAgICBsZWFmRm9ybWF0cyA9IHRoaXMuX2dldExlYWZBY3RpdmUocmFuZ2UpO1xuICAgIGxpbmVGb3JtYXRzID0gdGhpcy5fZ2V0TGluZUFjdGl2ZShyYW5nZSk7XG4gICAgcmV0dXJuIF8uZGVmYXVsdHMoe30sIGxlYWZGb3JtYXRzLCBsaW5lRm9ybWF0cyk7XG4gIH07XG5cbiAgVG9vbGJhci5wcm90b3R5cGUuX2dldExlYWZBY3RpdmUgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIHZhciBjb250ZW50cywgZm9ybWF0c0FyciwgbGluZSwgb2Zmc2V0LCBfcmVmO1xuICAgIGlmIChyYW5nZS5pc0NvbGxhcHNlZCgpKSB7XG4gICAgICBfcmVmID0gdGhpcy5xdWlsbC5lZGl0b3IuZG9jLmZpbmRMaW5lQXQocmFuZ2Uuc3RhcnQpLCBsaW5lID0gX3JlZlswXSwgb2Zmc2V0ID0gX3JlZlsxXTtcbiAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgICAgY29udGVudHMgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnRzID0gdGhpcy5xdWlsbC5nZXRDb250ZW50cyhyYW5nZS5zdGFydCAtIDEsIHJhbmdlLmVuZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRzID0gdGhpcy5xdWlsbC5nZXRDb250ZW50cyhyYW5nZSk7XG4gICAgfVxuICAgIGZvcm1hdHNBcnIgPSBfLm1hcChjb250ZW50cy5vcHMsICdhdHRyaWJ1dGVzJyk7XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdEZvcm1hdHMoZm9ybWF0c0Fycik7XG4gIH07XG5cbiAgVG9vbGJhci5wcm90b3R5cGUuX2dldExpbmVBY3RpdmUgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIHZhciBmaXJzdExpbmUsIGZvcm1hdHNBcnIsIGxhc3RMaW5lLCBvZmZzZXQsIF9yZWYsIF9yZWYxO1xuICAgIGZvcm1hdHNBcnIgPSBbXTtcbiAgICBfcmVmID0gdGhpcy5xdWlsbC5lZGl0b3IuZG9jLmZpbmRMaW5lQXQocmFuZ2Uuc3RhcnQpLCBmaXJzdExpbmUgPSBfcmVmWzBdLCBvZmZzZXQgPSBfcmVmWzFdO1xuICAgIF9yZWYxID0gdGhpcy5xdWlsbC5lZGl0b3IuZG9jLmZpbmRMaW5lQXQocmFuZ2UuZW5kKSwgbGFzdExpbmUgPSBfcmVmMVswXSwgb2Zmc2V0ID0gX3JlZjFbMV07XG4gICAgaWYgKChsYXN0TGluZSAhPSBudWxsKSAmJiBsYXN0TGluZSA9PT0gZmlyc3RMaW5lKSB7XG4gICAgICBsYXN0TGluZSA9IGxhc3RMaW5lLm5leHQ7XG4gICAgfVxuICAgIHdoaWxlICgoZmlyc3RMaW5lICE9IG51bGwpICYmIGZpcnN0TGluZSAhPT0gbGFzdExpbmUpIHtcbiAgICAgIGZvcm1hdHNBcnIucHVzaChfLmNsb25lKGZpcnN0TGluZS5mb3JtYXRzKSk7XG4gICAgICBmaXJzdExpbmUgPSBmaXJzdExpbmUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2ludGVyc2VjdEZvcm1hdHMoZm9ybWF0c0Fycik7XG4gIH07XG5cbiAgVG9vbGJhci5wcm90b3R5cGUuX2ludGVyc2VjdEZvcm1hdHMgPSBmdW5jdGlvbihmb3JtYXRzQXJyKSB7XG4gICAgcmV0dXJuIF8ucmVkdWNlKGZvcm1hdHNBcnIuc2xpY2UoMSksIGZ1bmN0aW9uKGFjdGl2ZUZvcm1hdHMsIGZvcm1hdHMpIHtcbiAgICAgIHZhciBhY3RpdmVLZXlzLCBhZGRlZCwgZm9ybWF0S2V5cywgaW50ZXJzZWN0aW9uLCBtaXNzaW5nO1xuICAgICAgYWN0aXZlS2V5cyA9IF8ua2V5cyhhY3RpdmVGb3JtYXRzKTtcbiAgICAgIGZvcm1hdEtleXMgPSBfLmtleXMoZm9ybWF0cyk7XG4gICAgICBpbnRlcnNlY3Rpb24gPSBfLmludGVyc2VjdGlvbihhY3RpdmVLZXlzLCBmb3JtYXRLZXlzKTtcbiAgICAgIG1pc3NpbmcgPSBfLmRpZmZlcmVuY2UoYWN0aXZlS2V5cywgZm9ybWF0S2V5cyk7XG4gICAgICBhZGRlZCA9IF8uZGlmZmVyZW5jZShmb3JtYXRLZXlzLCBhY3RpdmVLZXlzKTtcbiAgICAgIF8uZWFjaChpbnRlcnNlY3Rpb24sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYgKFRvb2xiYXIuZm9ybWF0cy5TRUxFQ1RbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChfLmlzQXJyYXkoYWN0aXZlRm9ybWF0c1tuYW1lXSkpIHtcbiAgICAgICAgICAgIGlmIChfLmluZGV4T2YoYWN0aXZlRm9ybWF0c1tuYW1lXSwgZm9ybWF0c1tuYW1lXSkgPCAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhY3RpdmVGb3JtYXRzW25hbWVdLnB1c2goZm9ybWF0c1tuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVGb3JtYXRzW25hbWVdICE9PSBmb3JtYXRzW25hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlRm9ybWF0c1tuYW1lXSA9IFthY3RpdmVGb3JtYXRzW25hbWVdLCBmb3JtYXRzW25hbWVdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXy5lYWNoKG1pc3NpbmcsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYgKFRvb2xiYXIuZm9ybWF0cy5UT0dHTEVbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBkZWxldGUgYWN0aXZlRm9ybWF0c1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIGlmICgoVG9vbGJhci5mb3JtYXRzLlNFTEVDVFtuYW1lXSAhPSBudWxsKSAmJiAhXy5pc0FycmF5KGFjdGl2ZUZvcm1hdHNbbmFtZV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZUZvcm1hdHNbbmFtZV0gPSBbYWN0aXZlRm9ybWF0c1tuYW1lXV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXy5lYWNoKGFkZGVkLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGlmIChUb29sYmFyLmZvcm1hdHMuU0VMRUNUW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlRm9ybWF0c1tuYW1lXSA9IFtmb3JtYXRzW25hbWVdXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWN0aXZlRm9ybWF0cztcbiAgICB9LCBmb3JtYXRzQXJyWzBdIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gVG9vbGJhcjtcblxufSkoKTtcblxuUXVpbGwucmVnaXN0ZXJNb2R1bGUoJ3Rvb2xiYXInLCBUb29sYmFyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/toolbar.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/tooltip.js":
/*!*****************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/tooltip.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Normalizer, Quill, Tooltip, dom, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\nNormalizer = __webpack_require__(/*! ../lib/normalizer */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/normalizer.js\");\n\n_ = Quill.require('lodash');\n\ndom = Quill.require('dom');\n\nTooltip = (function() {\n  Tooltip.DEFAULTS = {\n    offset: 10,\n    styles: {\n      '.tooltip': {\n        'background-color': '#fff',\n        'border': '1px solid #000',\n        'top': '0px',\n        'white-space': 'nowrap',\n        'z-index': '2000'\n      },\n      '.tooltip a': {\n        'cursor': 'pointer',\n        'text-decoration': 'none'\n      }\n    },\n    template: ''\n  };\n\n  Tooltip.HIDE_MARGIN = '-10000px';\n\n  function Tooltip(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.quill.addStyles(this.options.styles);\n    this.container = this.quill.addContainer('tooltip');\n    this.container.innerHTML = Normalizer.stripWhitespace(this.options.template);\n    this.container.style.position = 'absolute';\n    dom(this.quill.root).on('focus', _.bind(this.hide, this));\n    this.hide();\n    this.quill.on(this.quill.constructor.events.TEXT_CHANGE, (function(_this) {\n      return function(delta, source) {\n        if (source === 'user' && _this.container.style.left !== Tooltip.HIDE_MARGIN) {\n          _this.range = null;\n          return _this.hide();\n        }\n      };\n    })(this));\n  }\n\n  Tooltip.prototype.initTextbox = function(textbox, enterCallback, escapeCallback) {\n    return dom(textbox).on('keyup', (function(_this) {\n      return function(event) {\n        switch (event.which) {\n          case dom.KEYS.ENTER:\n            return enterCallback.call(_this);\n          case dom.KEYS.ESCAPE:\n            return escapeCallback.call(_this);\n          default:\n            return true;\n        }\n      };\n    })(this));\n  };\n\n  Tooltip.prototype.hide = function() {\n    this.container.style.left = Tooltip.HIDE_MARGIN;\n    if (this.range) {\n      this.quill.setSelection(this.range);\n    }\n    return this.range = null;\n  };\n\n  Tooltip.prototype.show = function(reference) {\n    var left, top, win, _ref, _ref1;\n    this.range = this.quill.getSelection();\n    _ref = this._position(reference), left = _ref[0], top = _ref[1];\n    _ref1 = this._limit(left, top), left = _ref1[0], top = _ref1[1];\n    win = dom(this.quill.root).window();\n    left += win.pageXOffset;\n    top += win.pageYOffset;\n    this.container.style.left = \"\" + left + \"px\";\n    this.container.style.top = \"\" + top + \"px\";\n    return this.container.focus();\n  };\n\n  Tooltip.prototype._getBounds = function() {\n    var bounds, scrollX, scrollY, win;\n    bounds = this.quill.root.getBoundingClientRect();\n    win = dom(this.quill.root).window();\n    scrollX = win.pageXOffset;\n    scrollY = win.pageYOffset;\n    return {\n      left: bounds.left + scrollX,\n      right: bounds.right + scrollX,\n      top: bounds.top + scrollY,\n      bottom: bounds.bottom + scrollY,\n      width: bounds.width,\n      height: bounds.height\n    };\n  };\n\n  Tooltip.prototype._limit = function(left, top) {\n    var editorRect, toolbarRect;\n    editorRect = this._getBounds();\n    toolbarRect = this.container.getBoundingClientRect();\n    left = Math.min(editorRect.right - toolbarRect.width, left);\n    left = Math.max(editorRect.left, left);\n    top = Math.min(editorRect.bottom - toolbarRect.height, top);\n    top = Math.max(editorRect.top, top);\n    return [left, top];\n  };\n\n  Tooltip.prototype._position = function(reference) {\n    var editorRect, left, referenceBounds, toolbarRect, top;\n    toolbarRect = this.container.getBoundingClientRect();\n    editorRect = this._getBounds();\n    if (reference != null) {\n      referenceBounds = reference.getBoundingClientRect();\n      left = referenceBounds.left + referenceBounds.width / 2 - toolbarRect.width / 2;\n      top = referenceBounds.top + referenceBounds.height + this.options.offset;\n      if (top + toolbarRect.height > editorRect.bottom) {\n        top = referenceBounds.top - toolbarRect.height - this.options.offset;\n      }\n    } else {\n      left = editorRect.left + editorRect.width / 2 - toolbarRect.width / 2;\n      top = editorRect.top + editorRect.height / 2 - toolbarRect.height / 2;\n    }\n    return [left, top];\n  };\n\n  return Tooltip;\n\n})();\n\nQuill.registerModule('tooltip', Tooltip);\n\nmodule.exports = Tooltip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3Rvb2x0aXAuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsUUFBUSxtQkFBTyxDQUFDLHlFQUFVOztBQUUxQixhQUFhLG1CQUFPLENBQUMsMkZBQW1COztBQUV4Qzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3Rvb2x0aXAuanM/OGU4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTm9ybWFsaXplciwgUXVpbGwsIFRvb2x0aXAsIGRvbSwgXztcblxuUXVpbGwgPSByZXF1aXJlKCcuLi9xdWlsbCcpO1xuXG5Ob3JtYWxpemVyID0gcmVxdWlyZSgnLi4vbGliL25vcm1hbGl6ZXInKTtcblxuXyA9IFF1aWxsLnJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5kb20gPSBRdWlsbC5yZXF1aXJlKCdkb20nKTtcblxuVG9vbHRpcCA9IChmdW5jdGlvbigpIHtcbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwLFxuICAgIHN0eWxlczoge1xuICAgICAgJy50b29sdGlwJzoge1xuICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6ICcjZmZmJyxcbiAgICAgICAgJ2JvcmRlcic6ICcxcHggc29saWQgIzAwMCcsXG4gICAgICAgICd0b3AnOiAnMHB4JyxcbiAgICAgICAgJ3doaXRlLXNwYWNlJzogJ25vd3JhcCcsXG4gICAgICAgICd6LWluZGV4JzogJzIwMDAnXG4gICAgICB9LFxuICAgICAgJy50b29sdGlwIGEnOiB7XG4gICAgICAgICdjdXJzb3InOiAncG9pbnRlcicsXG4gICAgICAgICd0ZXh0LWRlY29yYXRpb24nOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIHRlbXBsYXRlOiAnJ1xuICB9O1xuXG4gIFRvb2x0aXAuSElERV9NQVJHSU4gPSAnLTEwMDAwcHgnO1xuXG4gIGZ1bmN0aW9uIFRvb2x0aXAocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnF1aWxsLmFkZFN0eWxlcyh0aGlzLm9wdGlvbnMuc3R5bGVzKTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMucXVpbGwuYWRkQ29udGFpbmVyKCd0b29sdGlwJyk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gTm9ybWFsaXplci5zdHJpcFdoaXRlc3BhY2UodGhpcy5vcHRpb25zLnRlbXBsYXRlKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZG9tKHRoaXMucXVpbGwucm9vdCkub24oJ2ZvY3VzJywgXy5iaW5kKHRoaXMuaGlkZSwgdGhpcykpO1xuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMucXVpbGwub24odGhpcy5xdWlsbC5jb25zdHJ1Y3Rvci5ldmVudHMuVEVYVF9DSEFOR0UsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRlbHRhLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJ3VzZXInICYmIF90aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ICE9PSBUb29sdGlwLkhJREVfTUFSR0lOKSB7XG4gICAgICAgICAgX3RoaXMucmFuZ2UgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaW5pdFRleHRib3ggPSBmdW5jdGlvbih0ZXh0Ym94LCBlbnRlckNhbGxiYWNrLCBlc2NhcGVDYWxsYmFjaykge1xuICAgIHJldHVybiBkb20odGV4dGJveCkub24oJ2tleXVwJywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICAgIGNhc2UgZG9tLktFWVMuRU5URVI6XG4gICAgICAgICAgICByZXR1cm4gZW50ZXJDYWxsYmFjay5jYWxsKF90aGlzKTtcbiAgICAgICAgICBjYXNlIGRvbS5LRVlTLkVTQ0FQRTpcbiAgICAgICAgICAgIHJldHVybiBlc2NhcGVDYWxsYmFjay5jYWxsKF90aGlzKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gVG9vbHRpcC5ISURFX01BUkdJTjtcbiAgICBpZiAodGhpcy5yYW5nZSkge1xuICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24odGhpcy5yYW5nZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJhbmdlID0gbnVsbDtcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24ocmVmZXJlbmNlKSB7XG4gICAgdmFyIGxlZnQsIHRvcCwgd2luLCBfcmVmLCBfcmVmMTtcbiAgICB0aGlzLnJhbmdlID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcbiAgICBfcmVmID0gdGhpcy5fcG9zaXRpb24ocmVmZXJlbmNlKSwgbGVmdCA9IF9yZWZbMF0sIHRvcCA9IF9yZWZbMV07XG4gICAgX3JlZjEgPSB0aGlzLl9saW1pdChsZWZ0LCB0b3ApLCBsZWZ0ID0gX3JlZjFbMF0sIHRvcCA9IF9yZWYxWzFdO1xuICAgIHdpbiA9IGRvbSh0aGlzLnF1aWxsLnJvb3QpLndpbmRvdygpO1xuICAgIGxlZnQgKz0gd2luLnBhZ2VYT2Zmc2V0O1xuICAgIHRvcCArPSB3aW4ucGFnZVlPZmZzZXQ7XG4gICAgdGhpcy5jb250YWluZXIuc3R5bGUubGVmdCA9IFwiXCIgKyBsZWZ0ICsgXCJweFwiO1xuICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRvcCA9IFwiXCIgKyB0b3AgKyBcInB4XCI7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmZvY3VzKCk7XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuX2dldEJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib3VuZHMsIHNjcm9sbFgsIHNjcm9sbFksIHdpbjtcbiAgICBib3VuZHMgPSB0aGlzLnF1aWxsLnJvb3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgd2luID0gZG9tKHRoaXMucXVpbGwucm9vdCkud2luZG93KCk7XG4gICAgc2Nyb2xsWCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgICBzY3JvbGxZID0gd2luLnBhZ2VZT2Zmc2V0O1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBib3VuZHMubGVmdCArIHNjcm9sbFgsXG4gICAgICByaWdodDogYm91bmRzLnJpZ2h0ICsgc2Nyb2xsWCxcbiAgICAgIHRvcDogYm91bmRzLnRvcCArIHNjcm9sbFksXG4gICAgICBib3R0b206IGJvdW5kcy5ib3R0b20gKyBzY3JvbGxZLFxuICAgICAgd2lkdGg6IGJvdW5kcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRzLmhlaWdodFxuICAgIH07XG4gIH07XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuX2xpbWl0ID0gZnVuY3Rpb24obGVmdCwgdG9wKSB7XG4gICAgdmFyIGVkaXRvclJlY3QsIHRvb2xiYXJSZWN0O1xuICAgIGVkaXRvclJlY3QgPSB0aGlzLl9nZXRCb3VuZHMoKTtcbiAgICB0b29sYmFyUmVjdCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxlZnQgPSBNYXRoLm1pbihlZGl0b3JSZWN0LnJpZ2h0IC0gdG9vbGJhclJlY3Qud2lkdGgsIGxlZnQpO1xuICAgIGxlZnQgPSBNYXRoLm1heChlZGl0b3JSZWN0LmxlZnQsIGxlZnQpO1xuICAgIHRvcCA9IE1hdGgubWluKGVkaXRvclJlY3QuYm90dG9tIC0gdG9vbGJhclJlY3QuaGVpZ2h0LCB0b3ApO1xuICAgIHRvcCA9IE1hdGgubWF4KGVkaXRvclJlY3QudG9wLCB0b3ApO1xuICAgIHJldHVybiBbbGVmdCwgdG9wXTtcbiAgfTtcblxuICBUb29sdGlwLnByb3RvdHlwZS5fcG9zaXRpb24gPSBmdW5jdGlvbihyZWZlcmVuY2UpIHtcbiAgICB2YXIgZWRpdG9yUmVjdCwgbGVmdCwgcmVmZXJlbmNlQm91bmRzLCB0b29sYmFyUmVjdCwgdG9wO1xuICAgIHRvb2xiYXJSZWN0ID0gdGhpcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZWRpdG9yUmVjdCA9IHRoaXMuX2dldEJvdW5kcygpO1xuICAgIGlmIChyZWZlcmVuY2UgIT0gbnVsbCkge1xuICAgICAgcmVmZXJlbmNlQm91bmRzID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgbGVmdCA9IHJlZmVyZW5jZUJvdW5kcy5sZWZ0ICsgcmVmZXJlbmNlQm91bmRzLndpZHRoIC8gMiAtIHRvb2xiYXJSZWN0LndpZHRoIC8gMjtcbiAgICAgIHRvcCA9IHJlZmVyZW5jZUJvdW5kcy50b3AgKyByZWZlcmVuY2VCb3VuZHMuaGVpZ2h0ICsgdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgIGlmICh0b3AgKyB0b29sYmFyUmVjdC5oZWlnaHQgPiBlZGl0b3JSZWN0LmJvdHRvbSkge1xuICAgICAgICB0b3AgPSByZWZlcmVuY2VCb3VuZHMudG9wIC0gdG9vbGJhclJlY3QuaGVpZ2h0IC0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IGVkaXRvclJlY3QubGVmdCArIGVkaXRvclJlY3Qud2lkdGggLyAyIC0gdG9vbGJhclJlY3Qud2lkdGggLyAyO1xuICAgICAgdG9wID0gZWRpdG9yUmVjdC50b3AgKyBlZGl0b3JSZWN0LmhlaWdodCAvIDIgLSB0b29sYmFyUmVjdC5oZWlnaHQgLyAyO1xuICAgIH1cbiAgICByZXR1cm4gW2xlZnQsIHRvcF07XG4gIH07XG5cbiAgcmV0dXJuIFRvb2x0aXA7XG5cbn0pKCk7XG5cblF1aWxsLnJlZ2lzdGVyTW9kdWxlKCd0b29sdGlwJywgVG9vbHRpcCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbHRpcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/tooltip.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/modules/undo-manager.js":
/*!**********************************************************!*\
  !*** ./node_modules/quilljs/lib/modules/undo-manager.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Quill, UndoManager, _;\n\nQuill = __webpack_require__(/*! ../quill */ \"(app-pages-browser)/./node_modules/quilljs/lib/quill.js\");\n\n_ = Quill.require('lodash');\n\nDelta = Quill.require('delta');\n\nUndoManager = (function() {\n  UndoManager.DEFAULTS = {\n    delay: 1000,\n    maxStack: 100\n  };\n\n  UndoManager.hotkeys = {\n    UNDO: {\n      key: 'Z',\n      metaKey: true\n    },\n    REDO: {\n      key: 'Z',\n      metaKey: true,\n      shiftKey: true\n    }\n  };\n\n  function UndoManager(quill, options) {\n    this.quill = quill;\n    this.options = options != null ? options : {};\n    this.lastRecorded = 0;\n    this.emittedDelta = null;\n    this.clear();\n    this.initListeners();\n  }\n\n  UndoManager.prototype.initListeners = function() {\n    this.quill.onModuleLoad('keyboard', (function(_this) {\n      return function(keyboard) {\n        keyboard.addHotkey(UndoManager.hotkeys.UNDO, function() {\n          _this.undo();\n          return false;\n        });\n        return keyboard.addHotkey(UndoManager.hotkeys.REDO, function() {\n          _this.redo();\n          return false;\n        });\n      };\n    })(this));\n    return this.quill.on(this.quill.constructor.events.TEXT_CHANGE, (function(_this) {\n      return function(delta, origin) {\n        if (_.isEqual(delta, _this.emittedDelta)) {\n          return;\n        }\n        _this.record(delta, _this.oldDelta);\n        return _this.oldDelta = _this.quill.getContents();\n      };\n    })(this));\n  };\n\n  UndoManager.prototype.clear = function() {\n    this.stack = {\n      undo: [],\n      redo: []\n    };\n    return this.oldDelta = this.quill.getContents();\n  };\n\n  UndoManager.prototype.record = function(changeDelta, oldDelta) {\n    var change, ignored, timestamp, undoDelta;\n    if (!(changeDelta.ops.length > 0)) {\n      return;\n    }\n    this.stack.redo = [];\n    try {\n      undoDelta = this.quill.getContents().diff(this.oldDelta);\n      timestamp = new Date().getTime();\n      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n        change = this.stack.undo.pop();\n        undoDelta = undoDelta.compose(change.undo);\n        changeDelta = change.redo.compose(changeDelta);\n      } else {\n        this.lastRecorded = timestamp;\n      }\n      this.stack.undo.push({\n        redo: changeDelta,\n        undo: undoDelta\n      });\n      if (this.stack.undo.length > this.options.maxStack) {\n        return this.stack.undo.unshift();\n      }\n    } catch (_error) {\n      ignored = _error;\n      return this.clear();\n    }\n  };\n\n  UndoManager.prototype.redo = function() {\n    return this._change('redo', 'undo');\n  };\n\n  UndoManager.prototype.undo = function() {\n    return this._change('undo', 'redo');\n  };\n\n  UndoManager.prototype._getLastChangeIndex = function(delta) {\n    var index, lastIndex;\n    lastIndex = 0;\n    index = 0;\n    delta.ops.forEach(function(op) {\n      if (op.insert != null) {\n        return lastIndex = Math.max(index + (op.insert.length || 1), lastIndex);\n      } else if (op[\"delete\"] != null) {\n        return lastIndex = Math.max(index, lastIndex);\n      } else if (op.retain != null) {\n        if (op.attributes != null) {\n          lastIndex = Math.max(index + op.retain, lastIndex);\n        }\n        return index += op.retain;\n      }\n    });\n    return lastIndex;\n  };\n\n  UndoManager.prototype._change = function(source, dest) {\n    var change, index;\n    if (this.stack[source].length > 0) {\n      change = this.stack[source].pop();\n      this.lastRecorded = 0;\n      this.emittedDelta = change[source];\n      this.quill.updateContents(change[source], 'user');\n      this.emittedDelta = null;\n      index = this._getLastChangeIndex(change[source]);\n      this.quill.setSelection(index, index);\n      this.oldDelta = this.quill.getContents();\n      return this.stack[dest].push(change);\n    }\n  };\n\n  return UndoManager;\n\n})();\n\nQuill.registerModule('undo-manager', UndoManager);\n\nmodule.exports = UndoManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi9tb2R1bGVzL3VuZG8tbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxRQUFRLG1CQUFPLENBQUMseUVBQVU7O0FBRTFCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpbGxqcy9saWIvbW9kdWxlcy91bmRvLW1hbmFnZXIuanM/OTUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGVsdGEsIFF1aWxsLCBVbmRvTWFuYWdlciwgXztcblxuUXVpbGwgPSByZXF1aXJlKCcuLi9xdWlsbCcpO1xuXG5fID0gUXVpbGwucmVxdWlyZSgnbG9kYXNoJyk7XG5cbkRlbHRhID0gUXVpbGwucmVxdWlyZSgnZGVsdGEnKTtcblxuVW5kb01hbmFnZXIgPSAoZnVuY3Rpb24oKSB7XG4gIFVuZG9NYW5hZ2VyLkRFRkFVTFRTID0ge1xuICAgIGRlbGF5OiAxMDAwLFxuICAgIG1heFN0YWNrOiAxMDBcbiAgfTtcblxuICBVbmRvTWFuYWdlci5ob3RrZXlzID0ge1xuICAgIFVORE86IHtcbiAgICAgIGtleTogJ1onLFxuICAgICAgbWV0YUtleTogdHJ1ZVxuICAgIH0sXG4gICAgUkVETzoge1xuICAgICAga2V5OiAnWicsXG4gICAgICBtZXRhS2V5OiB0cnVlLFxuICAgICAgc2hpZnRLZXk6IHRydWVcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gVW5kb01hbmFnZXIocXVpbGwsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnF1aWxsID0gcXVpbGw7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucyA6IHt9O1xuICAgIHRoaXMubGFzdFJlY29yZGVkID0gMDtcbiAgICB0aGlzLmVtaXR0ZWREZWx0YSA9IG51bGw7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycygpO1xuICB9XG5cbiAgVW5kb01hbmFnZXIucHJvdG90eXBlLmluaXRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnF1aWxsLm9uTW9kdWxlTG9hZCgna2V5Ym9hcmQnLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihrZXlib2FyZCkge1xuICAgICAgICBrZXlib2FyZC5hZGRIb3RrZXkoVW5kb01hbmFnZXIuaG90a2V5cy5VTkRPLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy51bmRvKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGtleWJvYXJkLmFkZEhvdGtleShVbmRvTWFuYWdlci5ob3RrZXlzLlJFRE8sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLnJlZG8oKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgcmV0dXJuIHRoaXMucXVpbGwub24odGhpcy5xdWlsbC5jb25zdHJ1Y3Rvci5ldmVudHMuVEVYVF9DSEFOR0UsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRlbHRhLCBvcmlnaW4pIHtcbiAgICAgICAgaWYgKF8uaXNFcXVhbChkZWx0YSwgX3RoaXMuZW1pdHRlZERlbHRhKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5yZWNvcmQoZGVsdGEsIF90aGlzLm9sZERlbHRhKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9sZERlbHRhID0gX3RoaXMucXVpbGwuZ2V0Q29udGVudHMoKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFVuZG9NYW5hZ2VyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3RhY2sgPSB7XG4gICAgICB1bmRvOiBbXSxcbiAgICAgIHJlZG86IFtdXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5vbGREZWx0YSA9IHRoaXMucXVpbGwuZ2V0Q29udGVudHMoKTtcbiAgfTtcblxuICBVbmRvTWFuYWdlci5wcm90b3R5cGUucmVjb3JkID0gZnVuY3Rpb24oY2hhbmdlRGVsdGEsIG9sZERlbHRhKSB7XG4gICAgdmFyIGNoYW5nZSwgaWdub3JlZCwgdGltZXN0YW1wLCB1bmRvRGVsdGE7XG4gICAgaWYgKCEoY2hhbmdlRGVsdGEub3BzLmxlbmd0aCA+IDApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhY2sucmVkbyA9IFtdO1xuICAgIHRyeSB7XG4gICAgICB1bmRvRGVsdGEgPSB0aGlzLnF1aWxsLmdldENvbnRlbnRzKCkuZGlmZih0aGlzLm9sZERlbHRhKTtcbiAgICAgIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgaWYgKHRoaXMubGFzdFJlY29yZGVkICsgdGhpcy5vcHRpb25zLmRlbGF5ID4gdGltZXN0YW1wICYmIHRoaXMuc3RhY2sudW5kby5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNoYW5nZSA9IHRoaXMuc3RhY2sudW5kby5wb3AoKTtcbiAgICAgICAgdW5kb0RlbHRhID0gdW5kb0RlbHRhLmNvbXBvc2UoY2hhbmdlLnVuZG8pO1xuICAgICAgICBjaGFuZ2VEZWx0YSA9IGNoYW5nZS5yZWRvLmNvbXBvc2UoY2hhbmdlRGVsdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXN0UmVjb3JkZWQgPSB0aW1lc3RhbXA7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YWNrLnVuZG8ucHVzaCh7XG4gICAgICAgIHJlZG86IGNoYW5nZURlbHRhLFxuICAgICAgICB1bmRvOiB1bmRvRGVsdGFcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuc3RhY2sudW5kby5sZW5ndGggPiB0aGlzLm9wdGlvbnMubWF4U3RhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2sudW5kby51bnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICBpZ25vcmVkID0gX2Vycm9yO1xuICAgICAgcmV0dXJuIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gIH07XG5cbiAgVW5kb01hbmFnZXIucHJvdG90eXBlLnJlZG8gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbmdlKCdyZWRvJywgJ3VuZG8nKTtcbiAgfTtcblxuICBVbmRvTWFuYWdlci5wcm90b3R5cGUudW5kbyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFuZ2UoJ3VuZG8nLCAncmVkbycpO1xuICB9O1xuXG4gIFVuZG9NYW5hZ2VyLnByb3RvdHlwZS5fZ2V0TGFzdENoYW5nZUluZGV4ID0gZnVuY3Rpb24oZGVsdGEpIHtcbiAgICB2YXIgaW5kZXgsIGxhc3RJbmRleDtcbiAgICBsYXN0SW5kZXggPSAwO1xuICAgIGluZGV4ID0gMDtcbiAgICBkZWx0YS5vcHMuZm9yRWFjaChmdW5jdGlvbihvcCkge1xuICAgICAgaWYgKG9wLmluc2VydCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBsYXN0SW5kZXggPSBNYXRoLm1heChpbmRleCArIChvcC5pbnNlcnQubGVuZ3RoIHx8IDEpLCBsYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChvcFtcImRlbGV0ZVwiXSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBsYXN0SW5kZXggPSBNYXRoLm1heChpbmRleCwgbGFzdEluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAob3AucmV0YWluICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG9wLmF0dHJpYnV0ZXMgIT0gbnVsbCkge1xuICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KGluZGV4ICsgb3AucmV0YWluLCBsYXN0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleCArPSBvcC5yZXRhaW47XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxhc3RJbmRleDtcbiAgfTtcblxuICBVbmRvTWFuYWdlci5wcm90b3R5cGUuX2NoYW5nZSA9IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdCkge1xuICAgIHZhciBjaGFuZ2UsIGluZGV4O1xuICAgIGlmICh0aGlzLnN0YWNrW3NvdXJjZV0ubGVuZ3RoID4gMCkge1xuICAgICAgY2hhbmdlID0gdGhpcy5zdGFja1tzb3VyY2VdLnBvcCgpO1xuICAgICAgdGhpcy5sYXN0UmVjb3JkZWQgPSAwO1xuICAgICAgdGhpcy5lbWl0dGVkRGVsdGEgPSBjaGFuZ2Vbc291cmNlXTtcbiAgICAgIHRoaXMucXVpbGwudXBkYXRlQ29udGVudHMoY2hhbmdlW3NvdXJjZV0sICd1c2VyJyk7XG4gICAgICB0aGlzLmVtaXR0ZWREZWx0YSA9IG51bGw7XG4gICAgICBpbmRleCA9IHRoaXMuX2dldExhc3RDaGFuZ2VJbmRleChjaGFuZ2Vbc291cmNlXSk7XG4gICAgICB0aGlzLnF1aWxsLnNldFNlbGVjdGlvbihpbmRleCwgaW5kZXgpO1xuICAgICAgdGhpcy5vbGREZWx0YSA9IHRoaXMucXVpbGwuZ2V0Q29udGVudHMoKTtcbiAgICAgIHJldHVybiB0aGlzLnN0YWNrW2Rlc3RdLnB1c2goY2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFVuZG9NYW5hZ2VyO1xuXG59KSgpO1xuXG5RdWlsbC5yZWdpc3Rlck1vZHVsZSgndW5kby1tYW5hZ2VyJywgVW5kb01hbmFnZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuZG9NYW5hZ2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/modules/undo-manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/quill.js":
/*!*******************************************!*\
  !*** ./node_modules/quilljs/lib/quill.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta, Editor, EventEmitter2, Format, Quill, Range, dom, pkg, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __slice = [].slice;\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\npkg = __webpack_require__(/*! ../package.json */ \"(app-pages-browser)/./node_modules/quilljs/package.json\");\n\nDelta = (__webpack_require__(/*! rich-text */ \"(app-pages-browser)/./node_modules/rich-text/index.js\").Delta);\n\nEventEmitter2 = (__webpack_require__(/*! eventemitter2 */ \"(app-pages-browser)/./node_modules/eventemitter2/lib/eventemitter2.js\").EventEmitter2);\n\ndom = __webpack_require__(/*! ./lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nEditor = __webpack_require__(/*! ./core/editor */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/editor.js\");\n\nFormat = __webpack_require__(/*! ./core/format */ \"(app-pages-browser)/./node_modules/quilljs/lib/core/format.js\");\n\nRange = __webpack_require__(/*! ./lib/range */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/range.js\");\n\nQuill = (function(_super) {\n  __extends(Quill, _super);\n\n  Quill.version = pkg.version;\n\n  Quill.editors = [];\n\n  Quill.modules = [];\n\n  Quill.themes = [];\n\n  Quill.DEFAULTS = {\n    formats: ['align', 'bold', 'italic', 'strike', 'underline', 'color', 'background', 'font', 'size', 'link', 'image', 'bullet', 'list'],\n    modules: {\n      'keyboard': true,\n      'paste-manager': true,\n      'undo-manager': true\n    },\n    pollInterval: 100,\n    readOnly: false,\n    theme: 'default'\n  };\n\n  Quill.events = {\n    MODULE_INIT: 'module-init',\n    POST_EVENT: 'post-event',\n    PRE_EVENT: 'pre-event',\n    SELECTION_CHANGE: 'selection-change',\n    TEXT_CHANGE: 'text-change'\n  };\n\n  Quill.sources = Editor.sources;\n\n  Quill.registerModule = function(name, module) {\n    if (Quill.modules[name] != null) {\n      console.warn(\"Overwriting \" + name + \" module\");\n    }\n    return Quill.modules[name] = module;\n  };\n\n  Quill.registerTheme = function(name, theme) {\n    if (Quill.themes[name] != null) {\n      console.warn(\"Overwriting \" + name + \" theme\");\n    }\n    return Quill.themes[name] = theme;\n  };\n\n  Quill.require = function(name) {\n    switch (name) {\n      case 'lodash':\n        return _;\n      case 'delta':\n        return Delta;\n      case 'dom':\n        return dom;\n      default:\n        return null;\n    }\n  };\n\n  function Quill(container, options) {\n    var html, moduleOptions, themeClass;\n    if (options == null) {\n      options = {};\n    }\n    if (_.isString(container)) {\n      container = document.querySelector(container);\n    }\n    if (container == null) {\n      throw new Error('Invalid Quill container');\n    }\n    moduleOptions = _.defaults(options.modules || {}, Quill.DEFAULTS.modules);\n    html = container.innerHTML;\n    this.options = _.defaults(options, Quill.DEFAULTS);\n    this.options.modules = moduleOptions;\n    this.options.id = this.id = \"quill-\" + (Quill.editors.length + 1);\n    this.options.emitter = this;\n    this.modules = {};\n    this.editor = new Editor(container, this, this.options);\n    this.root = this.editor.doc.root;\n    Quill.editors.push(this);\n    this.setHTML(html, Quill.sources.SILENT);\n    themeClass = Quill.themes[this.options.theme];\n    if (themeClass == null) {\n      throw new Error(\"Cannot load \" + this.options.theme + \" theme. Are you sure you registered it?\");\n    }\n    this.theme = new themeClass(this, this.options);\n    _.each(this.options.modules, (function(_this) {\n      return function(option, name) {\n        return _this.addModule(name, option);\n      };\n    })(this));\n  }\n\n  Quill.prototype.addContainer = function(className, before) {\n    if (before == null) {\n      before = false;\n    }\n    return this.editor.renderer.addContainer(className, before);\n  };\n\n  Quill.prototype.addFormat = function(name, format) {\n    return this.editor.doc.addFormat(name, format);\n  };\n\n  Quill.prototype.addModule = function(name, options) {\n    var moduleClass;\n    moduleClass = Quill.modules[name];\n    if (moduleClass == null) {\n      throw new Error(\"Cannot load \" + name + \" module. Are you sure you registered it?\");\n    }\n    if (!_.isObject(options)) {\n      options = {};\n    }\n    options = _.defaults(options, this.theme.constructor.OPTIONS[name] || {}, moduleClass.DEFAULTS || {});\n    this.modules[name] = new moduleClass(this, options);\n    this.emit(Quill.events.MODULE_INIT, name, this.modules[name]);\n    return this.modules[name];\n  };\n\n  Quill.prototype.addStyles = function(styles) {\n    return this.editor.renderer.addStyles(styles);\n  };\n\n  Quill.prototype.deleteText = function(start, end, source) {\n    var delta, formats, _ref;\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    _ref = this._buildParams(start, end, {}, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    if (!(end > start)) {\n      return;\n    }\n    delta = new Delta().retain(start)[\"delete\"](end - start);\n    return this.editor.applyDelta(delta, source);\n  };\n\n  Quill.prototype.emit = function() {\n    var args, eventName;\n    eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    Quill.__super__.emit.apply(this, [Quill.events.PRE_EVENT, eventName].concat(__slice.call(args)));\n    Quill.__super__.emit.apply(this, [eventName].concat(__slice.call(args)));\n    return Quill.__super__.emit.apply(this, [Quill.events.POST_EVENT, eventName].concat(__slice.call(args)));\n  };\n\n  Quill.prototype.focus = function() {\n    return this.editor.focus();\n  };\n\n  Quill.prototype.formatLine = function(start, end, name, value, source) {\n    var formats, line, offset, _ref, _ref1;\n    _ref = this._buildParams(start, end, name, value, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    _ref1 = this.editor.doc.findLineAt(end), line = _ref1[0], offset = _ref1[1];\n    if (line != null) {\n      end += line.length - offset;\n    }\n    return this.formatText(start, end, formats, source);\n  };\n\n  Quill.prototype.formatText = function(start, end, name, value, source) {\n    var delta, formats, _ref;\n    _ref = this._buildParams(start, end, name, value, source), start = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    formats = _.reduce(formats, (function(_this) {\n      return function(formats, value, name) {\n        var format;\n        format = _this.editor.doc.formats[name];\n        if (!(value && value !== format.config[\"default\"])) {\n          formats[name] = null;\n        }\n        return formats;\n      };\n    })(this), formats);\n    delta = new Delta().retain(start).retain(end - start, formats);\n    return this.editor.applyDelta(delta, source);\n  };\n\n  Quill.prototype.getContents = function(start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (end == null) {\n      end = null;\n    }\n    if (_.isObject(start)) {\n      end = start.end;\n      start = start.start;\n    }\n    return this.editor.getDelta().slice(start, end);\n  };\n\n  Quill.prototype.getHTML = function() {\n    return this.root.innerHTML;\n  };\n\n  Quill.prototype.getLength = function() {\n    return this.editor.getDelta().length();\n  };\n\n  Quill.prototype.getModule = function(name) {\n    return this.modules[name];\n  };\n\n  Quill.prototype.getSelection = function() {\n    this.editor.checkUpdate();\n    return this.editor.selection.getRange();\n  };\n\n  Quill.prototype.getText = function(start, end) {\n    if (start == null) {\n      start = 0;\n    }\n    if (end == null) {\n      end = null;\n    }\n    return _.map(this.getContents(start, end).ops, function(op) {\n      if (_.isString(op.insert)) {\n        return op.insert;\n      } else {\n        return '';\n      }\n    }).join('');\n  };\n\n  Quill.prototype.insertEmbed = function(index, type, url, source) {\n    return this.insertText(index, dom.EMBED_TEXT, type, url, source);\n  };\n\n  Quill.prototype.insertText = function(index, text, name, value, source) {\n    var delta, end, formats, _ref;\n    _ref = this._buildParams(index, 0, name, value, source), index = _ref[0], end = _ref[1], formats = _ref[2], source = _ref[3];\n    if (!(text.length > 0)) {\n      return;\n    }\n    delta = new Delta().retain(index).insert(text, formats);\n    return this.editor.applyDelta(delta, source);\n  };\n\n  Quill.prototype.onModuleLoad = function(name, callback) {\n    if (this.modules[name]) {\n      return callback(this.modules[name]);\n    }\n    return this.on(Quill.events.MODULE_INIT, function(moduleName, module) {\n      if (moduleName === name) {\n        return callback(module);\n      }\n    });\n  };\n\n  Quill.prototype.prepareFormat = function(name, value) {\n    var format, range;\n    format = this.editor.doc.formats[name];\n    if (format == null) {\n      return;\n    }\n    range = this.getSelection();\n    if (!(range != null ? range.isCollapsed() : void 0)) {\n      return;\n    }\n    if (format.isType(Format.types.LINE)) {\n      return this.formatLine(range, name, value, Quill.sources.USER);\n    } else {\n      return format.prepare(value);\n    }\n  };\n\n  Quill.prototype.setContents = function(delta, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (_.isArray(delta)) {\n      delta = {\n        ops: delta\n      };\n    }\n    delta.ops.unshift({\n      \"delete\": this.getLength()\n    });\n    return this.updateContents(delta, source);\n  };\n\n  Quill.prototype.setHTML = function(html, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (!html) {\n      html = \"<\" + dom.DEFAULT_BLOCK_TAG + \"><\" + dom.DEFAULT_BREAK_TAG + \"></\" + dom.DEFAULT_BLOCK_TAG + \">\";\n    }\n    this.editor.doc.setHTML(html);\n    return this.editor.checkUpdate(source);\n  };\n\n  Quill.prototype.setSelection = function(start, end, source) {\n    var range;\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    if (_.isNumber(start) && _.isNumber(end)) {\n      range = new Range(start, end);\n    } else {\n      range = start;\n      source = end || source;\n    }\n    return this.editor.selection.setRange(range, source);\n  };\n\n  Quill.prototype.updateContents = function(delta, source) {\n    if (source == null) {\n      source = Quill.sources.API;\n    }\n    return this.editor.applyDelta(delta, source);\n  };\n\n  Quill.prototype._buildParams = function() {\n    var formats, params;\n    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    if (_.isObject(params[0])) {\n      params.splice(0, 1, params[0].start, params[0].end);\n    }\n    if (_.isString(params[2])) {\n      formats = {};\n      formats[params[2]] = params[3];\n      params.splice(2, 2, formats);\n    }\n    if (params[3] == null) {\n      params[3] = Quill.sources.API;\n    }\n    return params;\n  };\n\n  return Quill;\n\n})(EventEmitter2);\n\nQuill.registerTheme('default', __webpack_require__(/*! ./themes/default */ \"(app-pages-browser)/./node_modules/quilljs/lib/themes/default.js\"));\n\nQuill.registerTheme('snow', __webpack_require__(/*! ./themes/snow */ \"(app-pages-browser)/./node_modules/quilljs/lib/themes/snow/index.js\"));\n\nmodule.exports = Quill;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/quill.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/themes/default.js":
/*!****************************************************!*\
  !*** ./node_modules/quilljs/lib/themes/default.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var DefaultTheme;\n\nDefaultTheme = (function() {\n  DefaultTheme.OPTIONS = {};\n\n  function DefaultTheme(quill) {\n    this.quill = quill;\n    this.editor = this.quill.editor;\n    this.editorContainer = this.editor.root;\n  }\n\n  return DefaultTheme;\n\n})();\n\nmodule.exports = DefaultTheme;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWlsbGpzL2xpYi90aGVtZXMvZGVmYXVsdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpbGxqcy9saWIvdGhlbWVzL2RlZmF1bHQuanM/NTYyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGVmYXVsdFRoZW1lO1xuXG5EZWZhdWx0VGhlbWUgPSAoZnVuY3Rpb24oKSB7XG4gIERlZmF1bHRUaGVtZS5PUFRJT05TID0ge307XG5cbiAgZnVuY3Rpb24gRGVmYXVsdFRoZW1lKHF1aWxsKSB7XG4gICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xuICAgIHRoaXMuZWRpdG9yID0gdGhpcy5xdWlsbC5lZGl0b3I7XG4gICAgdGhpcy5lZGl0b3JDb250YWluZXIgPSB0aGlzLmVkaXRvci5yb290O1xuICB9XG5cbiAgcmV0dXJuIERlZmF1bHRUaGVtZTtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0VGhlbWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/themes/default.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/lib/themes/snow/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/quilljs/lib/themes/snow/index.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var ColorPicker, DefaultTheme, Picker, SnowTheme, dom, _,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n_ = __webpack_require__(/*! lodash */ \"(app-pages-browser)/./node_modules/lodash/dist/lodash.js\");\n\nColorPicker = __webpack_require__(/*! ../../lib/color-picker */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/color-picker.js\");\n\nDefaultTheme = __webpack_require__(/*! ../default */ \"(app-pages-browser)/./node_modules/quilljs/lib/themes/default.js\");\n\ndom = __webpack_require__(/*! ../../lib/dom */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/dom.js\");\n\nPicker = __webpack_require__(/*! ../../lib/picker */ \"(app-pages-browser)/./node_modules/quilljs/lib/lib/picker.js\");\n\nSnowTheme = (function(_super) {\n  __extends(SnowTheme, _super);\n\n  SnowTheme.COLORS = [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008A00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\"];\n\n  SnowTheme.OPTIONS = {\n    'multi-cursor': {\n      template: '<span class=\"cursor-flag\"> <span class=\"cursor-triangle top\"></span> <span class=\"cursor-name\"></span> <span class=\"cursor-triangle bottom\"></span> </span> <span class=\"cursor-caret\"></span>'\n    }\n  };\n\n  SnowTheme.STYLES = {\n    '.snow .image-tooltip-container a': {\n      'border': '1px solid #06c'\n    },\n    '.snow .image-tooltip-container a.insert': {\n      'background-color': '#06c',\n      'color': '#fff'\n    },\n    '.snow .cursor-name': {\n      'border-radius': '4px',\n      'font-size': '11px',\n      'font-family': 'Arial',\n      'margin-left': '-50%',\n      'padding': '4px 10px'\n    },\n    '.snow .cursor-triangle': {\n      'border-left': '4px solid transparent',\n      'border-right': '4px solid transparent',\n      'height': '0px',\n      'margin-left': '-3px',\n      'width': '0px'\n    },\n    '.snow .cursor.left .cursor-name': {\n      'margin-left': '-8px'\n    },\n    '.snow .cursor.right .cursor-flag': {\n      'right': 'auto'\n    },\n    '.snow .cursor.right .cursor-name': {\n      'margin-left': '-100%',\n      'margin-right': '-8px'\n    },\n    '.snow .cursor-triangle.bottom': {\n      'border-top': '4px solid transparent',\n      'display': 'block',\n      'margin-bottom': '-1px'\n    },\n    '.snow .cursor-triangle.top': {\n      'border-bottom': '4px solid transparent',\n      'display': 'none',\n      'margin-top': '-1px'\n    },\n    '.snow .cursor.top .cursor-triangle.bottom': {\n      'display': 'none'\n    },\n    '.snow .cursor.top .cursor-triangle.top': {\n      'display': 'block'\n    },\n    '.snow a': {\n      'color': '#06c'\n    },\n    '.snow .tooltip': {\n      'border': '1px solid #ccc',\n      'box-shadow': '0px 0px 5px #ddd',\n      'color': '#222'\n    },\n    '.snow .tooltip a': {\n      'color': '#06c'\n    },\n    '.snow .tooltip .input': {\n      'border': '1px solid #ccc',\n      'margin': '0px',\n      'padding': '5px'\n    },\n    '.snow .image-tooltip-container .preview': {\n      'border-color': '#ccc',\n      'color': '#ccc'\n    },\n    '.snow .link-tooltip-container a, .snow .link-tooltip-container span': {\n      'display': 'inline-block',\n      'line-height': '25px'\n    }\n  };\n\n  function SnowTheme(quill) {\n    this.quill = quill;\n    SnowTheme.__super__.constructor.apply(this, arguments);\n    this.quill.addStyles(SnowTheme.STYLES);\n    this.pickers = [];\n    this.quill.on(this.quill.constructor.events.SELECTION_CHANGE, (function(_this) {\n      return function(range) {\n        if (range != null) {\n          return _.invoke(_this.pickers, 'close');\n        }\n      };\n    })(this));\n    dom(this.quill.root.ownerDocument.body).addClass('snow');\n    this.quill.onModuleLoad('multi-cursor', _.bind(this.extendMultiCursor, this));\n    this.quill.onModuleLoad('toolbar', _.bind(this.extendToolbar, this));\n  }\n\n  SnowTheme.prototype.extendMultiCursor = function(module) {\n    return module.on(module.constructor.events.CURSOR_ADDED, function(cursor) {\n      var bottomTriangle, topTriangle;\n      bottomTriangle = cursor.elem.querySelector('.cursor-triangle.bottom');\n      topTriangle = cursor.elem.querySelector('.cursor-triangle.top');\n      return bottomTriangle.style.borderTopColor = topTriangle.style.borderBottomColor = cursor.color;\n    });\n  };\n\n  SnowTheme.prototype.extendToolbar = function(module) {\n    _.each(['color', 'background', 'font', 'size', 'align'], (function(_this) {\n      return function(format) {\n        var picker, select;\n        select = module.container.querySelector(\".ql-\" + format);\n        if (select == null) {\n          return;\n        }\n        switch (format) {\n          case 'font':\n          case 'size':\n          case 'align':\n            picker = new Picker(select);\n            break;\n          case 'color':\n          case 'background':\n            picker = new ColorPicker(select);\n            _.each(picker.container.querySelectorAll('.ql-picker-item'), function(item, i) {\n              if (i < 7) {\n                return dom(item).addClass('ql-primary-color');\n              }\n            });\n        }\n        if (picker != null) {\n          return _this.pickers.push(picker);\n        }\n      };\n    })(this));\n    return _.each(dom(module.container).textNodes(), function(node) {\n      if (dom(node).text().trim().length === 0) {\n        return dom(node).remove();\n      }\n    });\n  };\n\n  return SnowTheme;\n\n})(DefaultTheme);\n\nmodule.exports = SnowTheme;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quilljs/lib/themes/snow/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-quill/dist/react-quill.js":
/*!******************************************************!*\
  !*** ./node_modules/react-quill/dist/react-quill.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"), __webpack_require__(/*! quilljs */ \"(app-pages-browser)/./node_modules/quilljs/index.js\"));\n\telse {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_721__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_721__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_721__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_721__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_721__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_721__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/***/ function(module, exports, __nested_webpack_require_2084__) {\n\n\t/*\n\tReact-Quill 0.0.2\n\thttps://github.com/zenoamaro/react-quill\n\t*/\n\tmodule.exports = __nested_webpack_require_2084__(/*! ./component */ 1);\n\tmodule.exports.Mixin = __nested_webpack_require_2084__(/*! ./mixin */ 2);\n\tmodule.exports.Toolbar = __nested_webpack_require_2084__(/*! ./toolbar */ 3);\n\n\n/***/ },\n/* 1 */\n/*!**************************!*\\\n  !*** ./src/component.js ***!\n  \\**************************/\n/***/ function(module, exports, __nested_webpack_require_2514__) {\n\n\t'use strict';\n\t\n\tvar React = __nested_webpack_require_2514__(/*! react */ 4),\n\t\tQuillToolbar = __nested_webpack_require_2514__(/*! ./toolbar */ 3),\n\t\tQuillMixin = __nested_webpack_require_2514__(/*! ./mixin */ 2),\n\t\tT = React.PropTypes;\n\t\n\t// Support React 0.11 and 0.12\n\t// FIXME: Remove with React 0.13\n\tif (React.createFactory) {\n\t\tQuillToolbar = React.createFactory(QuillToolbar);\n\t}\n\t\n\tvar QuillComponent = React.createClass({\n\t\n\t\tdisplayName: 'Quill',\n\t\n\t\tmixins: [ QuillMixin ],\n\t\n\t\tpropTypes: {\n\t\t\tid:           T.string,\n\t\t\tclassName:    T.string,\n\t\t\tvalue:        T.string,\n\t\t\tdefaultValue: T.string,\n\t\t\treadOnly:     T.bool,\n\t\t\ttoolbar:      T.object,\n\t\t\tformats:      T.array,\n\t\t\tstyles:       T.object,\n\t\t\ttheme:        T.string,\n\t\t\tpollInterval: T.number,\n\t\t\tonChange:     T.func\n\t\t},\n\t\n\t\tgetDefaultProps: function() {\n\t\t\treturn {\n\t\t\t\tclassName: '',\n\t\t\t\tmodules: {}\n\t\t\t};\n\t\t},\n\t\n\t\t/*\n\t\tRetrieve the initial value from either `value` (preferred)\n\t\tor `defaultValue` if you want an un-controlled component.\n\t\t*/\n\t\tgetInitialState: function() {\n\t\t\treturn {};\n\t\t},\n\t\n\t\t/*\n\t\tUpdate only if we've been passed a new `value`.\n\t\tThis leaves components using `defaultValue` alone.\n\t\t*/\n\t\tcomponentWillReceiveProps: function(nextProps) {\n\t\t\tif ('value' in nextProps) {\n\t\t\t\tif (nextProps.value !== this.props.value) {\n\t\t\t\t\tthis.setEditorContents(this.state.editor, nextProps.value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tcomponentDidMount: function() {\n\t\t\tvar editor = this.createEditor(\n\t\t\t\tthis.getEditorElement(),\n\t\t\t\tthis.getEditorConfig());\n\t\t\tthis.setState({ editor:editor });\n\t\t},\n\t\n\t\tcomponentWillUnmount: function() {\n\t\t\tthis.destroyEditor(this.state.editor);\n\t\t},\n\t\n\t\tshouldComponentUpdate: function(nextProps, nextState) {\n\t\t\t// Never re-render or we lose the element.\n\t\t\treturn false;\n\t\t},\n\t\n\t\t/*\n\t\tIf for whatever reason we are rendering again,\n\t\twe should tear down the editor and bring it up\n\t\tagain.\n\t\t*/\n\t\tcomponentWillUpdate: function() {\n\t\t\tthis.componentWillUnmount();\n\t\t},\n\t\n\t\tcomponentDidUpdate: function() {\n\t\t\tthis.componentDidMount();\n\t\t},\n\t\n\t\tgetEditorConfig: function() {\n\t\t\tvar config = {\n\t\t\t\treadOnly:     this.props.readOnly,\n\t\t\t\ttheme:        this.props.theme,\n\t\t\t\tformats:      this.props.formats,\n\t\t\t\tstyles:       this.props.styles,\n\t\t\t\tmodules:      this.props.modules,\n\t\t\t\tpollInterval: this.props.pollInterval\n\t\t\t};\n\t\t\t// Unless we're redefining the toolbar,\n\t\t\t// attach to the default one as a ref.\n\t\t\tif (!config.modules.toolbar) {\n\t\t\t\t// Don't mutate the original modules\n\t\t\t\t// because it's shared between components.\n\t\t\t\tconfig.modules = JSON.parse(JSON.stringify(config.modules));\n\t\t\t\tconfig.modules.toolbar = {\n\t\t\t\t\tcontainer: this.refs.toolbar.getDOMNode()\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn config;\n\t\t},\n\t\n\t\tgetEditorElement: function() {\n\t\t\treturn this.refs.editor.getDOMNode();\n\t\t},\n\t\n\t\tgetEditorContents: function() {\n\t\t\treturn this.props.value || this.props.defaultValue;\n\t\t},\n\t\n\t\tgetClassName: function() {\n\t\t\treturn ['quill', this.props.className].join(' ');\n\t\t},\n\t\n\t\t/*\n\t\tRenders either the specified contents, or a default\n\t\tconfiguration of toolbar and contents area.\n\t\t*/\n\t\trenderContents: function() {\n\t\t\tif (React.Children.count(this.props.children) > 0) {\n\t\t\t\treturn React.Children.only(this.props.children);\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\tQuillToolbar({\n\t\t\t\t\t\tkey:'toolbar',\n\t\t\t\t\t\tref:'toolbar',\n\t\t\t\t\t\titems: this.props.toolbar\n\t\t\t\t\t}),\n\t\t\t\t\tReact.DOM.div({\n\t\t\t\t\t\tkey:'editor',\n\t\t\t\t\t\tref:'editor',\n\t\t\t\t\t\tclassName: 'quill-contents',\n\t\t\t\t\t\tdangerouslySetInnerHTML: { __html:this.getEditorContents() }\n\t\t\t\t\t})\n\t\t\t\t];\n\t\t\t}\n\t\t},\n\t\n\t\trender: function() {\n\t\t\treturn React.DOM.div({\n\t\t\t\tclassName: this.getClassName(),\n\t\t\t\tonChange: this.preventDefault },\n\t\t\t\tthis.renderContents()\n\t\t\t);\n\t\t},\n\t\n\t\t/*\n\t\tUpdates the local state with the new contents,\n\t\texecutes the change handler passed as props.\n\t\t*/\n\t\tonEditorChange: function(value) {\n\t\t\tif (value !== this.state.value) {\n\t\t\t\tif (this.props.onChange) {\n\t\t\t\t\tthis.props.onChange(value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/*\n\t\tStop change events from the toolbar from\n\t\tbubbling up outside.\n\t\t*/\n\t\tpreventDefault: function(event) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\n\t});\n\t\n\tmodule.exports = QuillComponent;\n\n/***/ },\n/* 2 */\n/*!**********************!*\\\n  !*** ./src/mixin.js ***!\n  \\**********************/\n/***/ function(module, exports, __nested_webpack_require_6830__) {\n\n\t'use strict';\n\t\n\tvar React = __nested_webpack_require_6830__(/*! react */ 4),\n\t\tQuill = __nested_webpack_require_6830__(/*! quilljs */ 5),\n\t\tT = React.PropTypes;\n\t\n\tvar QuillMixin = {\n\t\n\t\t/**\n\t\tCreates an editor on the given element. The editor will\n\t\tbe passed the configuration, have its events bound,\n\t\t*/\n\t\tcreateEditor: function($el, config) {\n\t\t\tvar editor = new Quill($el, config);\n\t\t\tthis.hookEditor(editor);\n\t\t\treturn editor;\n\t\t},\n\t\n\t\thookEditor: function(editor) {\n\t\t\tvar self = this;\n\t\t\teditor.on('text-change', function(delta, source) {\n\t\t\t\tif (self.onEditorChange) {\n\t\t\t\t\tself.onEditorChange(editor.getHTML(), delta, source);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\n\t\tupdateEditor: function(editor, config) {\n\t\t\t// TODO: Unfortunately, while we can add modules and\n\t\t\t//       stuff, we can't remove them. And there is\n\t\t\t//       little API to update other parts of the config.\n\t\t\t//       But if we could tear down the editor, at least\n\t\t\t//       we could do a re-init with the new config.\n\t\t\tthrow new Error('Not implemented');\n\t\t},\n\t\n\t\tdestroyEditor: function(editor) {\n\t\t\t// TODO: How to destroy this?\n\t\t\t// editor.destroy();\n\t\t\teditor.removeAllListeners();\n\t\t},\n\t\n\t\t/*\n\t\tReplace the contents of the editor, but keep\n\t\tthe previous selection hanging around so that\n\t\tthe cursor won't move.\n\t\t*/\n\t\tsetEditorContents: function(editor, value) {\n\t\t\tvar sel = editor.getSelection();\n\t\t\teditor.setHTML(value);\n\t\t\teditor.setSelection(sel);\n\t\t}\n\t\n\t};\n\t\n\tmodule.exports = QuillMixin;\n\n/***/ },\n/* 3 */\n/*!************************!*\\\n  !*** ./src/toolbar.js ***!\n  \\************************/\n/***/ function(module, exports, __nested_webpack_require_8444__) {\n\n\t'use strict';\n\t\n\tvar React = __nested_webpack_require_8444__(/*! react */ 4),\n\t\tT = React.PropTypes;\n\t\n\tvar defaultItems = [\n\t\n\t\t{ label:'Formats', type:'group', items: [\n\t\t\t{ label:'Size', type:'size', items: [\n\t\t\t\t{ label:'Normal', value:'' },\n\t\t\t\t{ label:'Smaller', value:'0.8em' },\n\t\t\t\t{ label:'Larger', value:'1.4em' },\n\t\t\t\t{ label:'Huge', value:'2em' }\n\t\t\t]},\n\t\t\t{ label:'Alignment', type:'align', items: [\n\t\t\t\t{ label:'Center', value:'center' },\n\t\t\t\t{ label:'Left', value:'left' },\n\t\t\t\t{ label:'Right', value:'right' },\n\t\t\t\t{ label:'Justify', value:'justify' }\n\t\t\t]}\n\t\t]},\n\t\n\t\t{ label:'Text', type:'group', items: [\n\t\t\t{ type:'bold', label:'Bold' },\n\t\t\t{ type:'italic', label:'Italic' },\n\t\t\t{ type:'strike', label:'Strike' },\n\t\t\t{ type:'underline', label:'Underline' },\n\t\t\t{ type:'link', label:'Link' }\n\t\t]},\n\t\n\t\t{ label:'Blocks', type:'group', items: [\n\t\t\t{ type:'bullet', label:'Bullet' },\n\t\t\t{ type:'list', label:'List' }\n\t\t]}\n\t\n\t];\n\t\n\tvar QuillToolbar = React.createClass({\n\t\n\t\tdisplayName: 'Quill Toolbar',\n\t\n\t\tpropTypes: {\n\t\t\tid:        T.string,\n\t\t\tclassName: T.string,\n\t\t\titems:     T.array\n\t\t},\n\t\n\t\tgetDefaultProps: function(){\n\t\t\treturn {\n\t\t\t\titems: defaultItems\n\t\t\t};\n\t\t},\n\t\n\t\trenderGroup: function(item) {\n\t\t\treturn React.DOM.span({\n\t\t\t\tkey: item.label,\n\t\t\t\tclassName:'ql-format-group' },\n\t\t\t\titem.items.map(this.renderItem)\n\t\t\t);\n\t\t},\n\t\n\t\trenderChoiceItem: function(item) {\n\t\t\treturn React.DOM.option({\n\t\t\t\tkey: item.label || item.value,\n\t\t\t\tvalue:item.value },\n\t\t\t\titem.label\n\t\t\t);\n\t\t},\n\t\n\t\trenderChoices: function(item) {\n\t\t\treturn React.DOM.select({\n\t\t\t\tkey: item.label,\n\t\t\t\tclassName: 'ql-'+item.type },\n\t\t\t\titem.items.map(this.renderChoiceItem)\n\t\t\t);\n\t\t},\n\t\n\t\trenderAction: function(item) {\n\t\t\treturn React.DOM.span({\n\t\t\t\tkey: item.label || item.value,\n\t\t\t\tclassName: 'ql-format-button ql-'+item.type,\n\t\t\t\ttitle: item.label }\n\t\t\t);\n\t\t},\n\t\n\t\trenderItem: function(item) {\n\t\t\tvar mapping = {\n\t\t\t\t'group': this.renderGroup,\n\t\t\t\t'align': this.renderChoices,\n\t\t\t\t'size': this.renderChoices,\n\t\t\t\t'action': this.renderAction\n\t\t\t};\n\t\t\tvar renderer = mapping[item.type] || mapping.action;\n\t\t\treturn renderer(item);\n\t\t},\n\t\n\t\tgetClassName: function() {\n\t\t\treturn 'quill-toolbar ' + (this.props.className||'');\n\t\t},\n\t\n\t\trender: function() {\n\t\t\treturn React.DOM.div({\n\t\t\t\tclassName: this.getClassName() },\n\t\t\t\tthis.props.items.map(this.renderItem)\n\t\t\t);\n\t\t}\n\t\n\t});\n\t\n\tmodule.exports = QuillToolbar;\n\n/***/ },\n/* 4 */\n/*!**************************************************************************************!*\\\n  !*** external {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"} ***!\n  \\**************************************************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/*!********************************************************************************************!*\\\n  !*** external {\"commonjs\":\"quilljs\",\"commonjs2\":\"quilljs\",\"amd\":\"quilljs\",\"root\":\"Quill\"} ***!\n  \\********************************************************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ }\n/******/ ])\n});\n\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-quill/dist/react-quill.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/index.js":
/*!*****************************************!*\
  !*** ./node_modules/rich-text/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./lib/type */ \"(app-pages-browser)/./node_modules/rich-text/lib/type.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsa0hBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvaW5kZXguanM/NjgwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3R5cGUnKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rich-text/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/lib/delta.js":
/*!*********************************************!*\
  !*** ./node_modules/rich-text/lib/delta.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var diff = __webpack_require__(/*! fast-diff */ \"(app-pages-browser)/./node_modules/fast-diff/diff.js\");\nvar is = __webpack_require__(/*! ./is */ \"(app-pages-browser)/./node_modules/rich-text/lib/is.js\");\nvar op = __webpack_require__(/*! ./op */ \"(app-pages-browser)/./node_modules/rich-text/lib/op.js\");\n\n\nvar NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()\n\n\nvar Delta = function (ops) {\n  // Assume we are given a well formed ops\n  if (is.array(ops)) {\n    this.ops = ops;\n  } else if (is.object(ops) && is.array(ops.ops)) {\n    this.ops = ops.ops;\n  } else {\n    this.ops = [];\n  }\n};\n\n\nDelta.prototype.insert = function (text, attributes) {\n  var newOp = {};\n  if (is.string(text)) {\n    if (text.length === 0) return this;\n    newOp.insert = text;\n  } else if (is.number(text)) {\n    newOp.insert = text;\n  }\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\n\nDelta.prototype['delete'] = function (length) {\n  if (length <= 0) return this;\n  return this.push({ 'delete': length });\n};\n\nDelta.prototype.retain = function (length, attributes) {\n  if (length <= 0) return this;\n  var newOp = { retain: length };\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\n\nDelta.prototype.push = function (newOp) {\n  var index = this.ops.length;\n  var lastOp = this.ops[index - 1];\n  newOp = op.clone(newOp);\n  if (is.object(lastOp)) {\n    if (is.number(newOp['delete']) && is.number(lastOp['delete'])) {\n      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n      return this;\n    }\n    // Since it does not matter if we insert before or after deleting at the same index,\n    // always prefer to insert first\n    if (is.number(lastOp['delete']) && (is.string(newOp.insert) || is.number(newOp.insert))) {\n      index -= 1;\n      lastOp = this.ops[index - 1];\n      if (!is.object(lastOp)) {\n        this.ops.unshift(newOp);\n        return this;\n      }\n    }\n    if (is.equal(newOp.attributes, lastOp.attributes)) {\n      if (is.string(newOp.insert) && is.string(lastOp.insert)) {\n        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      } else if (is.number(newOp.retain) && is.number(lastOp.retain)) {\n        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      }\n    }\n  }\n  this.ops.splice(index, 0, newOp);\n  return this;\n};\n\nDelta.prototype.chop = function () {\n  var lastOp = this.ops[this.ops.length - 1];\n  if (lastOp && lastOp.retain && !lastOp.attributes) {\n    this.ops.pop();\n  }\n  return this;\n};\n\nDelta.prototype.length = function () {\n  return this.ops.reduce(function (length, elem) {\n    return length + op.length(elem);\n  }, 0);\n};\n\nDelta.prototype.slice = function (start, end) {\n  start = start || 0;\n  if (!is.number(end)) end = Infinity;\n  var delta = new Delta();\n  var iter = op.iterator(this.ops);\n  var index = 0;\n  while (index < end && iter.hasNext()) {\n    var nextOp;\n    if (index < start) {\n      nextOp = iter.next(start - index);\n    } else {\n      nextOp = iter.next(end - index);\n      delta.push(nextOp);\n    }\n    index += op.length(nextOp);\n  }\n  return delta;\n};\n\n\nDelta.prototype.compose = function (other) {\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  this.ops = [];\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (otherIter.peekType() === 'insert') {\n      this.push(otherIter.next());\n    } else if (thisIter.peekType() === 'delete') {\n      this.push(thisIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (is.number(otherOp.retain)) {\n        var newOp = {};\n        if (is.number(thisOp.retain)) {\n          newOp.retain = length;\n        } else {\n          newOp.insert = thisOp.insert;\n        }\n        // Preserve null when composing with a retain, otherwise remove it for inserts\n        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, is.number(thisOp.retain));\n        if (attributes) newOp.attributes = attributes;\n        this.push(newOp);\n      // Other op should be delete, we could be an insert or retain\n      // Insert + delete cancels out\n      } else if (is.number(otherOp['delete']) && is.number(thisOp.retain)) {\n        this.push(otherOp);\n      }\n    }\n  }\n  return this.chop();\n};\n\nDelta.prototype.diff = function (other) {\n  var strings = [this.ops, other.ops].map(function (ops) {\n    return ops.map(function (op) {\n      if (is.string(op.insert)) return op.insert;\n      if (is.number(op.insert)) return NULL_CHARACTER;\n      var prep = ops === other.ops ? 'on' : 'with';\n      throw new Error('diff() called ' + prep + ' non-document');\n    }).join('');\n  });\n  var diffResult = diff(strings[0], strings[1]);\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  diffResult.forEach(function (component) {\n    var length = component[1].length;\n    while (length > 0) {\n      var opLength = 0;\n      switch (component[0]) {\n        case diff.INSERT:\n          opLength = Math.min(otherIter.peekLength(), length);\n          delta.push(otherIter.next(opLength));\n          break;\n        case diff.DELETE:\n          opLength = Math.min(length, thisIter.peekLength());\n          thisIter.next(opLength);\n          delta['delete'](opLength);\n          break;\n        case diff.EQUAL:\n          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n          var thisOp = thisIter.next(opLength);\n          var otherOp = otherIter.next(opLength);\n          if (thisOp.insert === otherOp.insert) {\n            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n          } else {\n            delta.push(otherOp)['delete'](opLength);\n          }\n          break;\n      }\n      length -= opLength;\n    }\n  });\n  return delta.chop();\n};\n\nDelta.prototype.transform = function (other, priority) {\n  priority = !!priority;\n  if (is.number(other)) {\n    return this.transformPosition(other, priority);\n  }\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n      delta.retain(op.length(thisIter.next()));\n    } else if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (thisOp['delete']) {\n        // Our delete either makes their delete redundant or removes their retain\n        continue;\n      } else if (otherOp['delete']) {\n        delta.push(otherOp);\n      } else {\n        // We retain either their retain or insert\n        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.transformPosition = function (index, priority) {\n  priority = !!priority;\n  var thisIter = op.iterator(this.ops);\n  var offset = 0;\n  while (thisIter.hasNext() && offset <= index) {\n    var length = thisIter.peekLength();\n    var nextType = thisIter.peekType();\n    thisIter.next();\n    if (nextType === 'delete') {\n      index -= Math.min(length, index - offset);\n      continue;\n    } else if (nextType === 'insert' && (offset < index || !priority)) {\n      index += length;\n    }\n    offset += length;\n  }\n  return index;\n};\n\n\nmodule.exports = Delta;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rich-text/lib/delta.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/lib/is.js":
/*!******************************************!*\
  !*** ./node_modules/rich-text/lib/is.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = {\n  equal: function (a, b) {\n    if (a === b) return true;\n    if (a == null && b == null) return true;\n    if (a == null || b == null) return false;\n    if (Object.keys(a).length != Object.keys(b).length) return false;\n    for(var key in a) {\n      // Only compare one level deep\n      if (a[key] !== b[key]) return false;\n    }\n    return true;\n  },\n\n  array: function (value) {\n    return Array.isArray(value);\n  },\n\n  number: function (value) {\n    if (typeof value === 'number') return true;\n    if (typeof value === 'object' && Object.prototype.toString.call(value) === '[object Number]') return true;\n    return false;\n  },\n\n  object: function (value) {\n    if (!value) return false;\n    return (typeof value === 'function' || typeof value === 'object');\n  },\n\n  string: function (value) {\n    if (typeof value === 'string') return true;\n    if (typeof value === 'object' && Object.prototype.toString.call(value) === '[object String]') return true;\n    return false;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvbGliL2lzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmljaC10ZXh0L2xpYi9pcy5qcz9mYTBmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBlcXVhbDogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGEgPT0gbnVsbCAmJiBiID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKE9iamVjdC5rZXlzKGEpLmxlbmd0aCAhPSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IodmFyIGtleSBpbiBhKSB7XG4gICAgICAvLyBPbmx5IGNvbXBhcmUgb25lIGxldmVsIGRlZXBcbiAgICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBhcnJheTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9LFxuXG4gIG51bWJlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0cnVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG4gIH0sXG5cbiAgc3RyaW5nOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rich-text/lib/is.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/lib/op.js":
/*!******************************************!*\
  !*** ./node_modules/rich-text/lib/op.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var is = __webpack_require__(/*! ./is */ \"(app-pages-browser)/./node_modules/rich-text/lib/is.js\");\n\n\nvar lib = {\n  attributes: {\n    clone: function (attributes, keepNull) {\n      if (!is.object(attributes)) return {};\n      return Object.keys(attributes).reduce(function (memo, key) {\n        if (attributes[key] !== undefined && (attributes[key] !== null || keepNull)) {\n          memo[key] = attributes[key];\n        }\n        return memo;\n      }, {});\n    },\n\n    compose: function (a, b, keepNull) {\n      if (!is.object(a)) a = {};\n      if (!is.object(b)) b = {};\n      var attributes = this.clone(b, keepNull);\n      for (var key in a) {\n        if (a[key] !== undefined && b[key] === undefined) {\n          attributes[key] = a[key];\n        }\n      }\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    diff: function(a, b) {\n      if (!is.object(a)) a = {};\n      if (!is.object(b)) b = {};\n      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {\n        if (a[key] !== b[key]) {\n          attributes[key] = b[key] === undefined ? null : b[key];\n        }\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    transform: function (a, b, priority) {\n      if (!is.object(a)) return b;\n      if (!is.object(b)) return undefined;\n      if (!priority) return b;  // b simply overwrites us without priority\n      var attributes = Object.keys(b).reduce(function (attributes, key) {\n        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n  },\n\n  clone: function (op) {\n    var newOp = this.attributes.clone(op);\n    if (is.object(newOp.attributes)) {\n      newOp.attributes = this.attributes.clone(newOp.attributes, true);\n    }\n    return newOp;\n  },\n\n  iterator: function (ops) {\n    return new Iterator(ops);\n  },\n\n  length: function (op) {\n    if (is.number(op['delete'])) {\n      return op['delete'];\n    } else if (is.number(op.retain)) {\n      return op.retain;\n    } else {\n      return is.string(op.insert) ? op.insert.length : 1;\n    }\n  }\n};\n\n\nfunction Iterator(ops) {\n  this.ops = ops;\n  this.index = 0;\n  this.offset = 0;\n};\n\nIterator.prototype.hasNext = function () {\n  return this.peekLength() < Infinity;\n};\n\nIterator.prototype.next = function (length) {\n  if (!length) length = Infinity;\n  var nextOp = this.ops[this.index];\n  if (nextOp) {\n    var offset = this.offset;\n    var opLength = lib.length(nextOp)\n    if (length >= opLength - offset) {\n      length = opLength - offset;\n      this.index += 1;\n      this.offset = 0;\n    } else {\n      this.offset += length;\n    }\n    if (is.number(nextOp['delete'])) {\n      return { 'delete': length };\n    } else {\n      var retOp = {};\n      if (nextOp.attributes) {\n        retOp.attributes = nextOp.attributes;\n      }\n      if (is.number(nextOp.retain)) {\n        retOp.retain = length;\n      } else if (is.string(nextOp.insert)) {\n        retOp.insert = nextOp.insert.substr(offset, length);\n      } else {\n        // offset should === 0, length should === 1\n        retOp.insert = nextOp.insert;\n      }\n      return retOp;\n    }\n  } else {\n    return { retain: Infinity };\n  }\n};\n\nIterator.prototype.peekLength = function () {\n  if (this.ops[this.index]) {\n    // Should never return 0 if our index is being managed correctly\n    return lib.length(this.ops[this.index]) - this.offset;\n  } else {\n    return Infinity;\n  }\n};\n\nIterator.prototype.peekType = function () {\n  if (this.ops[this.index]) {\n    if (is.number(this.ops[this.index]['delete'])) {\n      return 'delete';\n    } else if (is.number(this.ops[this.index].retain)) {\n      return 'retain';\n    } else {\n      return 'insert';\n    }\n  }\n  return 'retain';\n};\n\n\nmodule.exports = lib;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvbGliL29wLmpzIiwibWFwcGluZ3MiOiJBQUFBLFNBQVMsbUJBQU8sQ0FBQyxvRUFBTTs7O0FBR3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBSTtBQUNYLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLElBQUk7QUFDWDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0EsT0FBTyxJQUFJO0FBQ1g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvbGliL29wLmpzP2FmZjEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzID0gcmVxdWlyZSgnLi9pcycpO1xuXG5cbnZhciBsaWIgPSB7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBjbG9uZTogZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtlZXBOdWxsKSB7XG4gICAgICBpZiAoIWlzLm9iamVjdChhdHRyaWJ1dGVzKSkgcmV0dXJuIHt9O1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5KSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoYXR0cmlidXRlc1trZXldICE9PSBudWxsIHx8IGtlZXBOdWxsKSkge1xuICAgICAgICAgIG1lbW9ba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICB9LFxuXG4gICAgY29tcG9zZTogZnVuY3Rpb24gKGEsIGIsIGtlZXBOdWxsKSB7XG4gICAgICBpZiAoIWlzLm9iamVjdChhKSkgYSA9IHt9O1xuICAgICAgaWYgKCFpcy5vYmplY3QoYikpIGIgPSB7fTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5jbG9uZShiLCBrZWVwTnVsbCk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoYVtrZXldICE9PSB1bmRlZmluZWQgJiYgYltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSBhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgZGlmZjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKCFpcy5vYmplY3QoYSkpIGEgPSB7fTtcbiAgICAgIGlmICghaXMub2JqZWN0KGIpKSBiID0ge307XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKGEpLmNvbmNhdChPYmplY3Qua2V5cyhiKSkucmVkdWNlKGZ1bmN0aW9uIChhdHRyaWJ1dGVzLCBrZXkpIHtcbiAgICAgICAgaWYgKGFba2V5XSAhPT0gYltrZXldKSB7XG4gICAgICAgICAgYXR0cmlidXRlc1trZXldID0gYltrZXldID09PSB1bmRlZmluZWQgPyBudWxsIDogYltrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgfSwge30pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmxlbmd0aCA+IDAgPyBhdHRyaWJ1dGVzIDogdW5kZWZpbmVkO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChhLCBiLCBwcmlvcml0eSkge1xuICAgICAgaWYgKCFpcy5vYmplY3QoYSkpIHJldHVybiBiO1xuICAgICAgaWYgKCFpcy5vYmplY3QoYikpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIXByaW9yaXR5KSByZXR1cm4gYjsgIC8vIGIgc2ltcGx5IG92ZXJ3cml0ZXMgdXMgd2l0aG91dCBwcmlvcml0eVxuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhiKS5yZWR1Y2UoZnVuY3Rpb24gKGF0dHJpYnV0ZXMsIGtleSkge1xuICAgICAgICBpZiAoYVtrZXldID09PSB1bmRlZmluZWQpIGF0dHJpYnV0ZXNba2V5XSA9IGJba2V5XTsgIC8vIG51bGwgaXMgYSB2YWxpZCB2YWx1ZVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICAgIH0sIHt9KTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggPiAwID8gYXR0cmlidXRlcyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG5cbiAgY2xvbmU6IGZ1bmN0aW9uIChvcCkge1xuICAgIHZhciBuZXdPcCA9IHRoaXMuYXR0cmlidXRlcy5jbG9uZShvcCk7XG4gICAgaWYgKGlzLm9iamVjdChuZXdPcC5hdHRyaWJ1dGVzKSkge1xuICAgICAgbmV3T3AuYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcy5jbG9uZShuZXdPcC5hdHRyaWJ1dGVzLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld09wO1xuICB9LFxuXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiAob3BzKSB7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihvcHMpO1xuICB9LFxuXG4gIGxlbmd0aDogZnVuY3Rpb24gKG9wKSB7XG4gICAgaWYgKGlzLm51bWJlcihvcFsnZGVsZXRlJ10pKSB7XG4gICAgICByZXR1cm4gb3BbJ2RlbGV0ZSddO1xuICAgIH0gZWxzZSBpZiAoaXMubnVtYmVyKG9wLnJldGFpbikpIHtcbiAgICAgIHJldHVybiBvcC5yZXRhaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpcy5zdHJpbmcob3AuaW5zZXJ0KSA/IG9wLmluc2VydC5sZW5ndGggOiAxO1xuICAgIH1cbiAgfVxufTtcblxuXG5mdW5jdGlvbiBJdGVyYXRvcihvcHMpIHtcbiAgdGhpcy5vcHMgPSBvcHM7XG4gIHRoaXMuaW5kZXggPSAwO1xuICB0aGlzLm9mZnNldCA9IDA7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGVla0xlbmd0aCgpIDwgSW5maW5pdHk7XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIGxlbmd0aCA9IEluZmluaXR5O1xuICB2YXIgbmV4dE9wID0gdGhpcy5vcHNbdGhpcy5pbmRleF07XG4gIGlmIChuZXh0T3ApIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgdmFyIG9wTGVuZ3RoID0gbGliLmxlbmd0aChuZXh0T3ApXG4gICAgaWYgKGxlbmd0aCA+PSBvcExlbmd0aCAtIG9mZnNldCkge1xuICAgICAgbGVuZ3RoID0gb3BMZW5ndGggLSBvZmZzZXQ7XG4gICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICB9XG4gICAgaWYgKGlzLm51bWJlcihuZXh0T3BbJ2RlbGV0ZSddKSkge1xuICAgICAgcmV0dXJuIHsgJ2RlbGV0ZSc6IGxlbmd0aCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmV0T3AgPSB7fTtcbiAgICAgIGlmIChuZXh0T3AuYXR0cmlidXRlcykge1xuICAgICAgICByZXRPcC5hdHRyaWJ1dGVzID0gbmV4dE9wLmF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICBpZiAoaXMubnVtYmVyKG5leHRPcC5yZXRhaW4pKSB7XG4gICAgICAgIHJldE9wLnJldGFpbiA9IGxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAoaXMuc3RyaW5nKG5leHRPcC5pbnNlcnQpKSB7XG4gICAgICAgIHJldE9wLmluc2VydCA9IG5leHRPcC5pbnNlcnQuc3Vic3RyKG9mZnNldCwgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG9mZnNldCBzaG91bGQgPT09IDAsIGxlbmd0aCBzaG91bGQgPT09IDFcbiAgICAgICAgcmV0T3AuaW5zZXJ0ID0gbmV4dE9wLmluc2VydDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRPcDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHsgcmV0YWluOiBJbmZpbml0eSB9O1xuICB9XG59O1xuXG5JdGVyYXRvci5wcm90b3R5cGUucGVla0xlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMub3BzW3RoaXMuaW5kZXhdKSB7XG4gICAgLy8gU2hvdWxkIG5ldmVyIHJldHVybiAwIGlmIG91ciBpbmRleCBpcyBiZWluZyBtYW5hZ2VkIGNvcnJlY3RseVxuICAgIHJldHVybiBsaWIubGVuZ3RoKHRoaXMub3BzW3RoaXMuaW5kZXhdKSAtIHRoaXMub2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBJbmZpbml0eTtcbiAgfVxufTtcblxuSXRlcmF0b3IucHJvdG90eXBlLnBlZWtUeXBlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHNbdGhpcy5pbmRleF0pIHtcbiAgICBpZiAoaXMubnVtYmVyKHRoaXMub3BzW3RoaXMuaW5kZXhdWydkZWxldGUnXSkpIHtcbiAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9IGVsc2UgaWYgKGlzLm51bWJlcih0aGlzLm9wc1t0aGlzLmluZGV4XS5yZXRhaW4pKSB7XG4gICAgICByZXR1cm4gJ3JldGFpbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnaW5zZXJ0JztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICdyZXRhaW4nO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpYjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rich-text/lib/op.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/lib/type.js":
/*!********************************************!*\
  !*** ./node_modules/rich-text/lib/type.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var Delta = __webpack_require__(/*! ./delta */ \"(app-pages-browser)/./node_modules/rich-text/lib/delta.js\");\nvar pkg = __webpack_require__(/*! ../package.json */ \"(app-pages-browser)/./node_modules/rich-text/package.json\");\n\n\nmodule.exports = {\n  Delta: Delta,\n  name: 'rich-text',\n  uri: 'http://sharejs.org/types/rich-text/v1',\n\n  create: function (initial) {\n    return new Delta(initial);\n  },\n\n  apply: function (snapshot, delta) {\n    snapshot = new Delta(snapshot);\n    delta = new Delta(delta);\n    return snapshot.compose(delta);\n  },\n\n  compose: function (delta1, delta2) {\n    delta1 = new Delta(delta1);\n    delta2 = new Delta(delta2);\n    return delta1.compose(delta2);\n  },\n\n  diff: function (delta1, delta2) {\n    delta1 = new Delta(delta1);\n    delta2 = new Delta(delta2);\n    return delta1.diff(delta2);\n  },\n\n  transform: function (delta1, delta2, side) {\n    delta1 = new Delta(delta1);\n    delta2 = new Delta(delta2);\n    // Fuzzer specs is in opposite order of delta interface\n    return delta2.transform(delta1, side === 'left');\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yaWNoLXRleHQvbGliL3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLDBFQUFTO0FBQzdCLFVBQVUsbUJBQU8sQ0FBQyxrRkFBaUI7OztBQUduQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmljaC10ZXh0L2xpYi90eXBlLmpzPzNhMGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIERlbHRhID0gcmVxdWlyZSgnLi9kZWx0YScpO1xudmFyIHBrZyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEZWx0YTogRGVsdGEsXG4gIG5hbWU6ICdyaWNoLXRleHQnLFxuICB1cmk6ICdodHRwOi8vc2hhcmVqcy5vcmcvdHlwZXMvcmljaC10ZXh0L3YxJyxcblxuICBjcmVhdGU6IGZ1bmN0aW9uIChpbml0aWFsKSB7XG4gICAgcmV0dXJuIG5ldyBEZWx0YShpbml0aWFsKTtcbiAgfSxcblxuICBhcHBseTogZnVuY3Rpb24gKHNuYXBzaG90LCBkZWx0YSkge1xuICAgIHNuYXBzaG90ID0gbmV3IERlbHRhKHNuYXBzaG90KTtcbiAgICBkZWx0YSA9IG5ldyBEZWx0YShkZWx0YSk7XG4gICAgcmV0dXJuIHNuYXBzaG90LmNvbXBvc2UoZGVsdGEpO1xuICB9LFxuXG4gIGNvbXBvc2U6IGZ1bmN0aW9uIChkZWx0YTEsIGRlbHRhMikge1xuICAgIGRlbHRhMSA9IG5ldyBEZWx0YShkZWx0YTEpO1xuICAgIGRlbHRhMiA9IG5ldyBEZWx0YShkZWx0YTIpO1xuICAgIHJldHVybiBkZWx0YTEuY29tcG9zZShkZWx0YTIpO1xuICB9LFxuXG4gIGRpZmY6IGZ1bmN0aW9uIChkZWx0YTEsIGRlbHRhMikge1xuICAgIGRlbHRhMSA9IG5ldyBEZWx0YShkZWx0YTEpO1xuICAgIGRlbHRhMiA9IG5ldyBEZWx0YShkZWx0YTIpO1xuICAgIHJldHVybiBkZWx0YTEuZGlmZihkZWx0YTIpO1xuICB9LFxuXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gKGRlbHRhMSwgZGVsdGEyLCBzaWRlKSB7XG4gICAgZGVsdGExID0gbmV3IERlbHRhKGRlbHRhMSk7XG4gICAgZGVsdGEyID0gbmV3IERlbHRhKGRlbHRhMik7XG4gICAgLy8gRnV6emVyIHNwZWNzIGlzIGluIG9wcG9zaXRlIG9yZGVyIG9mIGRlbHRhIGludGVyZmFjZVxuICAgIHJldHVybiBkZWx0YTIudHJhbnNmb3JtKGRlbHRhMSwgc2lkZSA9PT0gJ2xlZnQnKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/rich-text/lib/type.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quilljs/package.json":
/*!*******************************************!*\
  !*** ./node_modules/quilljs/package.json ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"name":"quilljs","version":"0.18.1","description":"Cross browser rich text editor","author":"Jason Chen <jhchen7@gmail.com>","homepage":"http://quilljs.com","contributors":["Byron Milligan <byronner@gmail.com>","Keegan Poppen <keegan.poppen@gmail.com>"],"main":"index.js","dependencies":{"eventemitter2":"~0.4.13","lodash":"~2.4.1","rich-text":"~1.0.2"},"devDependencies":{"async":"~0.9.0","coffee-script":"~1.8.0","coffeeify":"~0.7.0","glob":"~4.0.4","grunt":"~0.4.3","grunt-browserify":"~2.1.0","grunt-contrib-clean":"~0.6.0","grunt-contrib-coffee":"~0.12.0","grunt-contrib-compress":"~0.12.0","grunt-contrib-concat":"~0.5.0","grunt-contrib-connect":"~0.8.0","grunt-contrib-copy":"~0.7.0","grunt-contrib-stylus":"~0.18.0","grunt-contrib-uglify":"~0.6.0","grunt-karma":"~0.9.0","grunt-lodash":"~0.3.0","grunt-protractor-runner":"~1.1.0","grunt-sauce-connect-launcher":"~0.3.0","harp":"~0.14.0","istanbul":"~0.3.0","jquery":"~2.1.1","karma":"~0.12.0","karma-chrome-launcher":"~0.1.2","karma-coffee-preprocessor":"~0.2.1","karma-coverage":"~0.2.0","karma-firefox-launcher":"~0.1.3","karma-html2js-preprocessor":"~0.1.0","karma-jasmine":"~0.2.0","karma-phantomjs-launcher":"~0.1.2","karma-safari-launcher":"~0.1.1","karma-sauce-launcher":"~0.2.2","load-grunt-tasks":"~0.6.0","protractor":"~1.3.1","stylus":"~0.49.2","watchify":"~0.10.2"},"engines":{"node":">=0.10"},"license":"BSD-3-Clause","repository":{"type":"git","url":"https://github.com/quilljs/quill"},"bugs":{"url":"https://github.com/quilljs/quill/issues"},"scripts":{"prepublish":"grunt coffee:quill","postpublish":"grunt clean:coffee","test":"grunt test"},"keywords":["editor","rich text","wysiwyg"]}');

/***/ }),

/***/ "(app-pages-browser)/./node_modules/rich-text/package.json":
/*!*********************************************!*\
  !*** ./node_modules/rich-text/package.json ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = JSON.parse('{"name":"rich-text","version":"1.0.3","description":"Format for representing rich text documents and changes.","author":"Jason Chen <jhchen7@gmail.com>","homepage":"https://github.com/ottypes/rich-text","main":"index.js","dependencies":{"fast-diff":"~1.0.0"},"devDependencies":{"chai":"~1.9.1","coveralls":"~2.11.1","grunt":"~0.4.5","istanbul":"~0.3.0","lodash":"~2.4.1","mocha":"~1.21.4","ot-fuzzer":"~1.0.0"},"engines":{"node":">=0.10"},"license":"MIT","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/ottypes/rich-text"},"bugs":{"url":"https://github.com/ottypes/rich-text/issues"},"keywords":["rich text","ot","operational transform","delta"]}');

/***/ })

});